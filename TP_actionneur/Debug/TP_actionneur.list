
TP_actionneur.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009820  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000434  08009a00  08009a00  00019a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e34  08009e34  0002010c  2**0
                  CONTENTS
  4 .ARM          00000008  08009e34  08009e34  00019e34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009e3c  08009e3c  0002010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e3c  08009e3c  00019e3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009e40  08009e40  00019e40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  08009e44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000220  2000010c  08009f50  0002010c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000032c  08009f50  0002032c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018ee8  00000000  00000000  0002013c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bfb  00000000  00000000  00039024  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001530  00000000  00000000  0003bc20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001428  00000000  00000000  0003d150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002943a  00000000  00000000  0003e578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000179bf  00000000  00000000  000679b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00113d22  00000000  00000000  0007f371  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00193093  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000067dc  00000000  00000000  001930e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000010c 	.word	0x2000010c
 80001fc:	00000000 	.word	0x00000000
 8000200:	080099e8 	.word	0x080099e8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000110 	.word	0x20000110
 800021c:	080099e8 	.word	0x080099e8

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <configuration>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void configuration(){
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
	CCR1= (ARR * ALPHA)/100;
 80005f8:	4b10      	ldr	r3, [pc, #64]	; (800063c <configuration+0x48>)
 80005fa:	f240 12ff 	movw	r2, #511	; 0x1ff
 80005fe:	801a      	strh	r2, [r3, #0]
	CCR2= (ARR *(100 - ALPHA))/100;
 8000600:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <configuration+0x4c>)
 8000602:	f240 12ff 	movw	r2, #511	; 0x1ff
 8000606:	801a      	strh	r2, [r3, #0]
	TIM1->CCR1 = CCR1;
 8000608:	4b0c      	ldr	r3, [pc, #48]	; (800063c <configuration+0x48>)
 800060a:	881a      	ldrh	r2, [r3, #0]
 800060c:	4b0d      	ldr	r3, [pc, #52]	; (8000644 <configuration+0x50>)
 800060e:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = CCR2;
 8000610:	4b0b      	ldr	r3, [pc, #44]	; (8000640 <configuration+0x4c>)
 8000612:	881a      	ldrh	r2, [r3, #0]
 8000614:	4b0b      	ldr	r3, [pc, #44]	; (8000644 <configuration+0x50>)
 8000616:	639a      	str	r2, [r3, #56]	; 0x38


	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000618:	2100      	movs	r1, #0
 800061a:	480b      	ldr	r0, [pc, #44]	; (8000648 <configuration+0x54>)
 800061c:	f004 fc7a 	bl	8004f14 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1); // turn on complementary channel
 8000620:	2100      	movs	r1, #0
 8000622:	4809      	ldr	r0, [pc, #36]	; (8000648 <configuration+0x54>)
 8000624:	f005 fc46 	bl	8005eb4 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000628:	2104      	movs	r1, #4
 800062a:	4807      	ldr	r0, [pc, #28]	; (8000648 <configuration+0x54>)
 800062c:	f004 fc72 	bl	8004f14 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2); // turn on complementary channel
 8000630:	2104      	movs	r1, #4
 8000632:	4805      	ldr	r0, [pc, #20]	; (8000648 <configuration+0x54>)
 8000634:	f005 fc3e 	bl	8005eb4 <HAL_TIMEx_PWMN_Start>
}
 8000638:	bf00      	nop
 800063a:	bd80      	pop	{r7, pc}
 800063c:	2000030c 	.word	0x2000030c
 8000640:	2000030e 	.word	0x2000030e
 8000644:	40012c00 	.word	0x40012c00
 8000648:	20000194 	.word	0x20000194

0800064c <HAL_GPIO_EXTI_Callback>:



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000656:	2120      	movs	r1, #32
 8000658:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800065c:	f003 fb3a 	bl	8003cd4 <HAL_GPIO_TogglePin>
	powerUp();
 8000660:	f000 fd3e 	bl	80010e0 <powerUp>
}
 8000664:	bf00      	nop
 8000666:	3708      	adds	r7, #8
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}

0800066c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b0a0      	sub	sp, #128	; 0x80
 8000670:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	char	 	cmdBuffer[CMD_BUFFER_SIZE];
	int 		idx_cmd = 0;
 8000672:	2300      	movs	r3, #0
 8000674:	67fb      	str	r3, [r7, #124]	; 0x7c
	char* 		argv[MAX_ARGS];
	int		 	argc = 0;
 8000676:	2300      	movs	r3, #0
 8000678:	67bb      	str	r3, [r7, #120]	; 0x78
	char*		token;
	int 		newCmdReady = 0;
 800067a:	2300      	movs	r3, #0
 800067c:	673b      	str	r3, [r7, #112]	; 0x70
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800067e:	f001 f832 	bl	80016e6 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000682:	f000 fa5d 	bl	8000b40 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000686:	f000 fc9f 	bl	8000fc8 <MX_GPIO_Init>
	MX_TIM1_Init();
 800068a:	f000 fb1d 	bl	8000cc8 <MX_TIM1_Init>
	MX_USART2_UART_Init();
 800068e:	f000 fc4f 	bl	8000f30 <MX_USART2_UART_Init>
	MX_ADC1_Init();
 8000692:	f000 faa1 	bl	8000bd8 <MX_ADC1_Init>
	MX_TIM2_Init();
 8000696:	f000 fbd5 	bl	8000e44 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800069a:	2100      	movs	r1, #0
 800069c:	489b      	ldr	r0, [pc, #620]	; (800090c <main+0x2a0>)
 800069e:	f004 fc39 	bl	8004f14 <HAL_TIM_PWM_Start>
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80006a2:	217f      	movs	r1, #127	; 0x7f
 80006a4:	489a      	ldr	r0, [pc, #616]	; (8000910 <main+0x2a4>)
 80006a6:	f002 fe0f 	bl	80032c8 <HAL_ADCEx_Calibration_Start>
	configuration();
 80006aa:	f7ff ffa3 	bl	80005f4 <configuration>

	memset(argv,NULL,MAX_ARGS*sizeof(char*));
 80006ae:	463b      	mov	r3, r7
 80006b0:	2224      	movs	r2, #36	; 0x24
 80006b2:	2100      	movs	r1, #0
 80006b4:	4618      	mov	r0, r3
 80006b6:	f007 fed1 	bl	800845c <memset>
	memset(cmdBuffer,NULL,CMD_BUFFER_SIZE*sizeof(char));
 80006ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006be:	2240      	movs	r2, #64	; 0x40
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f007 feca 	bl	800845c <memset>
 80006c8:	4b92      	ldr	r3, [pc, #584]	; (8000914 <main+0x2a8>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	701a      	strb	r2, [r3, #0]
	memset(uartRxBuffer,NULL,UART_RX_BUFFER_SIZE*sizeof(char));
	memset(uartTxBuffer,NULL,UART_TX_BUFFER_SIZE*sizeof(char));
 80006ce:	2240      	movs	r2, #64	; 0x40
 80006d0:	2100      	movs	r1, #0
 80006d2:	4891      	ldr	r0, [pc, #580]	; (8000918 <main+0x2ac>)
 80006d4:	f007 fec2 	bl	800845c <memset>

	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 80006d8:	2201      	movs	r2, #1
 80006da:	498e      	ldr	r1, [pc, #568]	; (8000914 <main+0x2a8>)
 80006dc:	488f      	ldr	r0, [pc, #572]	; (800091c <main+0x2b0>)
 80006de:	f005 feff 	bl	80064e0 <HAL_UART_Receive_IT>
	HAL_Delay(10);
 80006e2:	200a      	movs	r0, #10
 80006e4:	f001 f870 	bl	80017c8 <HAL_Delay>
	HAL_UART_Transmit(&huart2, started, sizeof(started), HAL_MAX_DELAY);
 80006e8:	f04f 33ff 	mov.w	r3, #4294967295
 80006ec:	2266      	movs	r2, #102	; 0x66
 80006ee:	498c      	ldr	r1, [pc, #560]	; (8000920 <main+0x2b4>)
 80006f0:	488a      	ldr	r0, [pc, #552]	; (800091c <main+0x2b0>)
 80006f2:	f005 fe5e 	bl	80063b2 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 80006f6:	f04f 33ff 	mov.w	r3, #4294967295
 80006fa:	2218      	movs	r2, #24
 80006fc:	4989      	ldr	r1, [pc, #548]	; (8000924 <main+0x2b8>)
 80006fe:	4887      	ldr	r0, [pc, #540]	; (800091c <main+0x2b0>)
 8000700:	f005 fe57 	bl	80063b2 <HAL_UART_Transmit>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		// uartRxReceived is set to 1 when a new character is received on uart 1
		if(uartRxReceived){
 8000704:	4b88      	ldr	r3, [pc, #544]	; (8000928 <main+0x2bc>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d058      	beq.n	80007be <main+0x152>
			switch(uartRxBuffer[0]){
 800070c:	4b81      	ldr	r3, [pc, #516]	; (8000914 <main+0x2a8>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	2b0d      	cmp	r3, #13
 8000712:	d002      	beq.n	800071a <main+0xae>
 8000714:	2b7f      	cmp	r3, #127	; 0x7f
 8000716:	d02f      	beq.n	8000778 <main+0x10c>
 8000718:	e03e      	b.n	8000798 <main+0x12c>
			// Nouvelle ligne, instruction à traiter
			case ASCII_CR:
				HAL_UART_Transmit(&huart2, newline, sizeof(newline), HAL_MAX_DELAY);
 800071a:	f04f 33ff 	mov.w	r3, #4294967295
 800071e:	2203      	movs	r2, #3
 8000720:	4982      	ldr	r1, [pc, #520]	; (800092c <main+0x2c0>)
 8000722:	487e      	ldr	r0, [pc, #504]	; (800091c <main+0x2b0>)
 8000724:	f005 fe45 	bl	80063b2 <HAL_UART_Transmit>
				cmdBuffer[idx_cmd] = '\0';
 8000728:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800072c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800072e:	4413      	add	r3, r2
 8000730:	2200      	movs	r2, #0
 8000732:	701a      	strb	r2, [r3, #0]
				argc = 0;
 8000734:	2300      	movs	r3, #0
 8000736:	67bb      	str	r3, [r7, #120]	; 0x78
				token = strtok(cmdBuffer, " ");
 8000738:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800073c:	497c      	ldr	r1, [pc, #496]	; (8000930 <main+0x2c4>)
 800073e:	4618      	mov	r0, r3
 8000740:	f007 feb4 	bl	80084ac <strtok>
 8000744:	4603      	mov	r3, r0
 8000746:	677b      	str	r3, [r7, #116]	; 0x74
				while(token!=NULL){
 8000748:	e00e      	b.n	8000768 <main+0xfc>
					argv[argc++] = token;
 800074a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800074c:	1c5a      	adds	r2, r3, #1
 800074e:	67ba      	str	r2, [r7, #120]	; 0x78
 8000750:	009b      	lsls	r3, r3, #2
 8000752:	3380      	adds	r3, #128	; 0x80
 8000754:	443b      	add	r3, r7
 8000756:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000758:	f843 2c80 	str.w	r2, [r3, #-128]
					token = strtok(NULL, " ");
 800075c:	4974      	ldr	r1, [pc, #464]	; (8000930 <main+0x2c4>)
 800075e:	2000      	movs	r0, #0
 8000760:	f007 fea4 	bl	80084ac <strtok>
 8000764:	4603      	mov	r3, r0
 8000766:	677b      	str	r3, [r7, #116]	; 0x74
				while(token!=NULL){
 8000768:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800076a:	2b00      	cmp	r3, #0
 800076c:	d1ed      	bne.n	800074a <main+0xde>
				}

				idx_cmd = 0;
 800076e:	2300      	movs	r3, #0
 8000770:	67fb      	str	r3, [r7, #124]	; 0x7c
				newCmdReady = 1;
 8000772:	2301      	movs	r3, #1
 8000774:	673b      	str	r3, [r7, #112]	; 0x70
				break;
 8000776:	e01f      	b.n	80007b8 <main+0x14c>
				// Suppression du dernier caractère
			case ASCII_DEL:
				cmdBuffer[idx_cmd--] = '\0';
 8000778:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800077a:	1e5a      	subs	r2, r3, #1
 800077c:	67fa      	str	r2, [r7, #124]	; 0x7c
 800077e:	3380      	adds	r3, #128	; 0x80
 8000780:	443b      	add	r3, r7
 8000782:	2200      	movs	r2, #0
 8000784:	f803 2c5c 	strb.w	r2, [r3, #-92]
				HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 8000788:	f04f 33ff 	mov.w	r3, #4294967295
 800078c:	2201      	movs	r2, #1
 800078e:	4961      	ldr	r1, [pc, #388]	; (8000914 <main+0x2a8>)
 8000790:	4862      	ldr	r0, [pc, #392]	; (800091c <main+0x2b0>)
 8000792:	f005 fe0e 	bl	80063b2 <HAL_UART_Transmit>
				break;
 8000796:	e00f      	b.n	80007b8 <main+0x14c>
				// Nouveau caractère
			default:
				cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 8000798:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800079a:	1c5a      	adds	r2, r3, #1
 800079c:	67fa      	str	r2, [r7, #124]	; 0x7c
 800079e:	4a5d      	ldr	r2, [pc, #372]	; (8000914 <main+0x2a8>)
 80007a0:	7812      	ldrb	r2, [r2, #0]
 80007a2:	3380      	adds	r3, #128	; 0x80
 80007a4:	443b      	add	r3, r7
 80007a6:	f803 2c5c 	strb.w	r2, [r3, #-92]
				HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 80007aa:	f04f 33ff 	mov.w	r3, #4294967295
 80007ae:	2201      	movs	r2, #1
 80007b0:	4958      	ldr	r1, [pc, #352]	; (8000914 <main+0x2a8>)
 80007b2:	485a      	ldr	r0, [pc, #360]	; (800091c <main+0x2b0>)
 80007b4:	f005 fdfd 	bl	80063b2 <HAL_UART_Transmit>
			}
			uartRxReceived = 0;
 80007b8:	4b5b      	ldr	r3, [pc, #364]	; (8000928 <main+0x2bc>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
		}

		if(newCmdReady){
 80007be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d09f      	beq.n	8000704 <main+0x98>
			if(strcmp(argv[0],"set")==0){
 80007c4:	683b      	ldr	r3, [r7, #0]
 80007c6:	495b      	ldr	r1, [pc, #364]	; (8000934 <main+0x2c8>)
 80007c8:	4618      	mov	r0, r3
 80007ca:	f7ff fd29 	bl	8000220 <strcmp>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d12d      	bne.n	8000830 <main+0x1c4>
				if(strcmp(argv[1],"PA5")==0){
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	4958      	ldr	r1, [pc, #352]	; (8000938 <main+0x2cc>)
 80007d8:	4618      	mov	r0, r3
 80007da:	f7ff fd21 	bl	8000220 <strcmp>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d11d      	bne.n	8000820 <main+0x1b4>
					HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, atoi(argv[2]));
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	4618      	mov	r0, r3
 80007e8:	f007 fe0a 	bl	8008400 <atoi>
 80007ec:	4603      	mov	r3, r0
 80007ee:	b2db      	uxtb	r3, r3
 80007f0:	461a      	mov	r2, r3
 80007f2:	2120      	movs	r1, #32
 80007f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007f8:	f003 fa54 	bl	8003ca4 <HAL_GPIO_WritePin>
					sprintf(uartTxBuffer,"Switch on/off led : %d\r\n",atoi(argv[2]));
 80007fc:	68bb      	ldr	r3, [r7, #8]
 80007fe:	4618      	mov	r0, r3
 8000800:	f007 fdfe 	bl	8008400 <atoi>
 8000804:	4603      	mov	r3, r0
 8000806:	461a      	mov	r2, r3
 8000808:	494c      	ldr	r1, [pc, #304]	; (800093c <main+0x2d0>)
 800080a:	4843      	ldr	r0, [pc, #268]	; (8000918 <main+0x2ac>)
 800080c:	f007 fe2e 	bl	800846c <siprintf>
					HAL_UART_Transmit(&huart2, uartTxBuffer, 32, HAL_MAX_DELAY);
 8000810:	f04f 33ff 	mov.w	r3, #4294967295
 8000814:	2220      	movs	r2, #32
 8000816:	4940      	ldr	r1, [pc, #256]	; (8000918 <main+0x2ac>)
 8000818:	4840      	ldr	r0, [pc, #256]	; (800091c <main+0x2b0>)
 800081a:	f005 fdca 	bl	80063b2 <HAL_UART_Transmit>
 800081e:	e16a      	b.n	8000af6 <main+0x48a>
				}
				else{
					HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8000820:	f04f 33ff 	mov.w	r3, #4294967295
 8000824:	2214      	movs	r2, #20
 8000826:	4946      	ldr	r1, [pc, #280]	; (8000940 <main+0x2d4>)
 8000828:	483c      	ldr	r0, [pc, #240]	; (800091c <main+0x2b0>)
 800082a:	f005 fdc2 	bl	80063b2 <HAL_UART_Transmit>
 800082e:	e162      	b.n	8000af6 <main+0x48a>
				}
			}
			else if(strcmp(argv[0],"get")==0)
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	4944      	ldr	r1, [pc, #272]	; (8000944 <main+0x2d8>)
 8000834:	4618      	mov	r0, r3
 8000836:	f7ff fcf3 	bl	8000220 <strcmp>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d10c      	bne.n	800085a <main+0x1ee>
			{
				HAL_ADC_Start_IT(&hadc1);
 8000840:	4833      	ldr	r0, [pc, #204]	; (8000910 <main+0x2a4>)
 8000842:	f001 fc0f 	bl	8002064 <HAL_ADC_Start_IT>
				TIM2->CCR1 = (AD_RES<<4);
 8000846:	4b40      	ldr	r3, [pc, #256]	; (8000948 <main+0x2dc>)
 8000848:	881b      	ldrh	r3, [r3, #0]
 800084a:	011a      	lsls	r2, r3, #4
 800084c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000850:	635a      	str	r2, [r3, #52]	; 0x34
				HAL_Delay(1);
 8000852:	2001      	movs	r0, #1
 8000854:	f000 ffb8 	bl	80017c8 <HAL_Delay>
 8000858:	e14d      	b.n	8000af6 <main+0x48a>
//				sprintf(uartTxBuffer,"Le courant vaut : %d\r\n", AD_RES);
//				HAL_UART_Transmit(&huart2, uartTxBuffer, 32, HAL_MAX_DELAY);

				//HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
			}
			else if(strcmp(argv[0],"help")==0)
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	493b      	ldr	r1, [pc, #236]	; (800094c <main+0x2e0>)
 800085e:	4618      	mov	r0, r3
 8000860:	f7ff fcde 	bl	8000220 <strcmp>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d107      	bne.n	800087a <main+0x20e>
			{
				HAL_UART_Transmit(&huart2, help, sizeof(help), HAL_MAX_DELAY);
 800086a:	f04f 33ff 	mov.w	r3, #4294967295
 800086e:	22f1      	movs	r2, #241	; 0xf1
 8000870:	4937      	ldr	r1, [pc, #220]	; (8000950 <main+0x2e4>)
 8000872:	482a      	ldr	r0, [pc, #168]	; (800091c <main+0x2b0>)
 8000874:	f005 fd9d 	bl	80063b2 <HAL_UART_Transmit>
 8000878:	e13d      	b.n	8000af6 <main+0x48a>
			}
			else if(strcmp(argv[0],"pinout")==0)
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	4935      	ldr	r1, [pc, #212]	; (8000954 <main+0x2e8>)
 800087e:	4618      	mov	r0, r3
 8000880:	f7ff fcce 	bl	8000220 <strcmp>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d107      	bne.n	800089a <main+0x22e>
			{
				HAL_UART_Transmit(&huart2, pinout, sizeof(pinout), HAL_MAX_DELAY);
 800088a:	f04f 33ff 	mov.w	r3, #4294967295
 800088e:	220d      	movs	r2, #13
 8000890:	4931      	ldr	r1, [pc, #196]	; (8000958 <main+0x2ec>)
 8000892:	4822      	ldr	r0, [pc, #136]	; (800091c <main+0x2b0>)
 8000894:	f005 fd8d 	bl	80063b2 <HAL_UART_Transmit>
 8000898:	e12d      	b.n	8000af6 <main+0x48a>
			}
			else if(strcmp(argv[0],"start")==0)
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	492f      	ldr	r1, [pc, #188]	; (800095c <main+0x2f0>)
 800089e:	4618      	mov	r0, r3
 80008a0:	f7ff fcbe 	bl	8000220 <strcmp>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d107      	bne.n	80008ba <main+0x24e>
			{
				HAL_UART_Transmit(&huart2, powerOn, sizeof(powerOn), HAL_MAX_DELAY);
 80008aa:	f04f 33ff 	mov.w	r3, #4294967295
 80008ae:	220c      	movs	r2, #12
 80008b0:	492b      	ldr	r1, [pc, #172]	; (8000960 <main+0x2f4>)
 80008b2:	481a      	ldr	r0, [pc, #104]	; (800091c <main+0x2b0>)
 80008b4:	f005 fd7d 	bl	80063b2 <HAL_UART_Transmit>
 80008b8:	e11d      	b.n	8000af6 <main+0x48a>
			}
			else if(strcmp(argv[0],"stop")==0)
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	4929      	ldr	r1, [pc, #164]	; (8000964 <main+0x2f8>)
 80008be:	4618      	mov	r0, r3
 80008c0:	f7ff fcae 	bl	8000220 <strcmp>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d107      	bne.n	80008da <main+0x26e>
			{
				HAL_UART_Transmit(&huart2, powerOff, sizeof(powerOff), HAL_MAX_DELAY);
 80008ca:	f04f 33ff 	mov.w	r3, #4294967295
 80008ce:	220a      	movs	r2, #10
 80008d0:	4925      	ldr	r1, [pc, #148]	; (8000968 <main+0x2fc>)
 80008d2:	4812      	ldr	r0, [pc, #72]	; (800091c <main+0x2b0>)
 80008d4:	f005 fd6d 	bl	80063b2 <HAL_UART_Transmit>
 80008d8:	e10d      	b.n	8000af6 <main+0x48a>
			}
			else if(strlen(argv[0])==10)
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	4618      	mov	r0, r3
 80008de:	f7ff fca9 	bl	8000234 <strlen>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b0a      	cmp	r3, #10
 80008e6:	f040 80ff 	bne.w	8000ae8 <main+0x47c>
			{
				memset(speed,0,sizeof(speed));
 80008ea:	2204      	movs	r2, #4
 80008ec:	2100      	movs	r1, #0
 80008ee:	481f      	ldr	r0, [pc, #124]	; (800096c <main+0x300>)
 80008f0:	f007 fdb4 	bl	800845c <memset>
				memset(uartTxBuffer,NULL,UART_TX_BUFFER_SIZE*sizeof(char));
 80008f4:	2240      	movs	r2, #64	; 0x40
 80008f6:	2100      	movs	r1, #0
 80008f8:	4807      	ldr	r0, [pc, #28]	; (8000918 <main+0x2ac>)
 80008fa:	f007 fdaf 	bl	800845c <memset>
				speedInt=0;
 80008fe:	4b1c      	ldr	r3, [pc, #112]	; (8000970 <main+0x304>)
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
				for(int i = 0; i<4;i++){
 8000904:	2300      	movs	r3, #0
 8000906:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000908:	e042      	b.n	8000990 <main+0x324>
 800090a:	bf00      	nop
 800090c:	200001e0 	.word	0x200001e0
 8000910:	20000128 	.word	0x20000128
 8000914:	200002c0 	.word	0x200002c0
 8000918:	200002c4 	.word	0x200002c4
 800091c:	2000022c 	.word	0x2000022c
 8000920:	20000018 	.word	0x20000018
 8000924:	20000000 	.word	0x20000000
 8000928:	200002bc 	.word	0x200002bc
 800092c:	20000080 	.word	0x20000080
 8000930:	08009a00 	.word	0x08009a00
 8000934:	08009a04 	.word	0x08009a04
 8000938:	08009a08 	.word	0x08009a08
 800093c:	08009a0c 	.word	0x08009a0c
 8000940:	20000084 	.word	0x20000084
 8000944:	08009a28 	.word	0x08009a28
 8000948:	20000310 	.word	0x20000310
 800094c:	08009a2c 	.word	0x08009a2c
 8000950:	08009a90 	.word	0x08009a90
 8000954:	08009a34 	.word	0x08009a34
 8000958:	08009b84 	.word	0x08009b84
 800095c:	08009a3c 	.word	0x08009a3c
 8000960:	08009b94 	.word	0x08009b94
 8000964:	08009a44 	.word	0x08009a44
 8000968:	08009ba0 	.word	0x08009ba0
 800096c:	20000304 	.word	0x20000304
 8000970:	20000308 	.word	0x20000308
					speed[i] = cmdBuffer[i+6];
 8000974:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000976:	3306      	adds	r3, #6
 8000978:	3380      	adds	r3, #128	; 0x80
 800097a:	443b      	add	r3, r7
 800097c:	f813 1c5c 	ldrb.w	r1, [r3, #-92]
 8000980:	4a62      	ldr	r2, [pc, #392]	; (8000b0c <main+0x4a0>)
 8000982:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000984:	4413      	add	r3, r2
 8000986:	460a      	mov	r2, r1
 8000988:	701a      	strb	r2, [r3, #0]
				for(int i = 0; i<4;i++){
 800098a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800098c:	3301      	adds	r3, #1
 800098e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000990:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000992:	2b03      	cmp	r3, #3
 8000994:	ddee      	ble.n	8000974 <main+0x308>
				}
				speedInt = atoi(speed);
 8000996:	485d      	ldr	r0, [pc, #372]	; (8000b0c <main+0x4a0>)
 8000998:	f007 fd32 	bl	8008400 <atoi>
 800099c:	4603      	mov	r3, r0
 800099e:	4a5c      	ldr	r2, [pc, #368]	; (8000b10 <main+0x4a4>)
 80009a0:	6013      	str	r3, [r2, #0]
				sprintf(uartTxBuffer,"speedInt value = %d\n\r", speedInt);
 80009a2:	4b5b      	ldr	r3, [pc, #364]	; (8000b10 <main+0x4a4>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	461a      	mov	r2, r3
 80009a8:	495a      	ldr	r1, [pc, #360]	; (8000b14 <main+0x4a8>)
 80009aa:	485b      	ldr	r0, [pc, #364]	; (8000b18 <main+0x4ac>)
 80009ac:	f007 fd5e 	bl	800846c <siprintf>
				HAL_UART_Transmit(&huart2, uartTxBuffer, sizeof(uartTxBuffer), HAL_MAX_DELAY);
 80009b0:	f04f 33ff 	mov.w	r3, #4294967295
 80009b4:	2240      	movs	r2, #64	; 0x40
 80009b6:	4958      	ldr	r1, [pc, #352]	; (8000b18 <main+0x4ac>)
 80009b8:	4858      	ldr	r0, [pc, #352]	; (8000b1c <main+0x4b0>)
 80009ba:	f005 fcfa 	bl	80063b2 <HAL_UART_Transmit>


				if(speedInt > SPEED_MAX){
 80009be:	4b54      	ldr	r3, [pc, #336]	; (8000b10 <main+0x4a4>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	2b64      	cmp	r3, #100	; 0x64
 80009c4:	dd02      	ble.n	80009cc <main+0x360>
					speedInt = SPEED_MAX;
 80009c6:	4b52      	ldr	r3, [pc, #328]	; (8000b10 <main+0x4a4>)
 80009c8:	2264      	movs	r2, #100	; 0x64
 80009ca:	601a      	str	r2, [r3, #0]
				//					CCR1= (ARR * speedInt)/100;
				//					CCR2= (ARR *(100 - speedInt))/100;
				//					__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1, CCR1);
				//					__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2, CCR2);
				//				}
				if(oldSpeed<speedInt){
 80009cc:	4b54      	ldr	r3, [pc, #336]	; (8000b20 <main+0x4b4>)
 80009ce:	681a      	ldr	r2, [r3, #0]
 80009d0:	4b4f      	ldr	r3, [pc, #316]	; (8000b10 <main+0x4a4>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	429a      	cmp	r2, r3
 80009d6:	da41      	bge.n	8000a5c <main+0x3f0>
					for(int i=oldSpeed;i<=speedInt;i++){
 80009d8:	4b51      	ldr	r3, [pc, #324]	; (8000b20 <main+0x4b4>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	66bb      	str	r3, [r7, #104]	; 0x68
 80009de:	e037      	b.n	8000a50 <main+0x3e4>
						sprintf(uartTxBuffer,"speed value = %d\n\r", i);
 80009e0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80009e2:	4950      	ldr	r1, [pc, #320]	; (8000b24 <main+0x4b8>)
 80009e4:	484c      	ldr	r0, [pc, #304]	; (8000b18 <main+0x4ac>)
 80009e6:	f007 fd41 	bl	800846c <siprintf>
						HAL_UART_Transmit(&huart2, uartTxBuffer, sizeof(uartTxBuffer), HAL_MAX_DELAY);
 80009ea:	f04f 33ff 	mov.w	r3, #4294967295
 80009ee:	2240      	movs	r2, #64	; 0x40
 80009f0:	4949      	ldr	r1, [pc, #292]	; (8000b18 <main+0x4ac>)
 80009f2:	484a      	ldr	r0, [pc, #296]	; (8000b1c <main+0x4b0>)
 80009f4:	f005 fcdd 	bl	80063b2 <HAL_UART_Transmit>
						CCR1= (ARR * i)/100;
 80009f8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80009fa:	4613      	mov	r3, r2
 80009fc:	029b      	lsls	r3, r3, #10
 80009fe:	1a9b      	subs	r3, r3, r2
 8000a00:	4a49      	ldr	r2, [pc, #292]	; (8000b28 <main+0x4bc>)
 8000a02:	fb82 1203 	smull	r1, r2, r2, r3
 8000a06:	1152      	asrs	r2, r2, #5
 8000a08:	17db      	asrs	r3, r3, #31
 8000a0a:	1ad3      	subs	r3, r2, r3
 8000a0c:	b29a      	uxth	r2, r3
 8000a0e:	4b47      	ldr	r3, [pc, #284]	; (8000b2c <main+0x4c0>)
 8000a10:	801a      	strh	r2, [r3, #0]
						CCR2= (ARR *(100 - i))/100;
 8000a12:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000a14:	f1c3 0264 	rsb	r2, r3, #100	; 0x64
 8000a18:	4613      	mov	r3, r2
 8000a1a:	029b      	lsls	r3, r3, #10
 8000a1c:	1a9b      	subs	r3, r3, r2
 8000a1e:	4a42      	ldr	r2, [pc, #264]	; (8000b28 <main+0x4bc>)
 8000a20:	fb82 1203 	smull	r1, r2, r2, r3
 8000a24:	1152      	asrs	r2, r2, #5
 8000a26:	17db      	asrs	r3, r3, #31
 8000a28:	1ad3      	subs	r3, r2, r3
 8000a2a:	b29a      	uxth	r2, r3
 8000a2c:	4b40      	ldr	r3, [pc, #256]	; (8000b30 <main+0x4c4>)
 8000a2e:	801a      	strh	r2, [r3, #0]
						__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1, CCR1);
 8000a30:	4b3e      	ldr	r3, [pc, #248]	; (8000b2c <main+0x4c0>)
 8000a32:	881a      	ldrh	r2, [r3, #0]
 8000a34:	4b3f      	ldr	r3, [pc, #252]	; (8000b34 <main+0x4c8>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	635a      	str	r2, [r3, #52]	; 0x34
						__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2, CCR2);
 8000a3a:	4b3d      	ldr	r3, [pc, #244]	; (8000b30 <main+0x4c4>)
 8000a3c:	881a      	ldrh	r2, [r3, #0]
 8000a3e:	4b3d      	ldr	r3, [pc, #244]	; (8000b34 <main+0x4c8>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	639a      	str	r2, [r3, #56]	; 0x38
						HAL_Delay(100);
 8000a44:	2064      	movs	r0, #100	; 0x64
 8000a46:	f000 febf 	bl	80017c8 <HAL_Delay>
					for(int i=oldSpeed;i<=speedInt;i++){
 8000a4a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000a4c:	3301      	adds	r3, #1
 8000a4e:	66bb      	str	r3, [r7, #104]	; 0x68
 8000a50:	4b2f      	ldr	r3, [pc, #188]	; (8000b10 <main+0x4a4>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000a56:	429a      	cmp	r2, r3
 8000a58:	ddc2      	ble.n	80009e0 <main+0x374>
 8000a5a:	e040      	b.n	8000ade <main+0x472>
					}
				}
				else{
					for(int i=oldSpeed;i>=speedInt;i--){
 8000a5c:	4b30      	ldr	r3, [pc, #192]	; (8000b20 <main+0x4b4>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	667b      	str	r3, [r7, #100]	; 0x64
 8000a62:	e037      	b.n	8000ad4 <main+0x468>
						sprintf(uartTxBuffer,"speed value = %d\n\r", i);
 8000a64:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000a66:	492f      	ldr	r1, [pc, #188]	; (8000b24 <main+0x4b8>)
 8000a68:	482b      	ldr	r0, [pc, #172]	; (8000b18 <main+0x4ac>)
 8000a6a:	f007 fcff 	bl	800846c <siprintf>
						HAL_UART_Transmit(&huart2, uartTxBuffer, sizeof(uartTxBuffer), HAL_MAX_DELAY);
 8000a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a72:	2240      	movs	r2, #64	; 0x40
 8000a74:	4928      	ldr	r1, [pc, #160]	; (8000b18 <main+0x4ac>)
 8000a76:	4829      	ldr	r0, [pc, #164]	; (8000b1c <main+0x4b0>)
 8000a78:	f005 fc9b 	bl	80063b2 <HAL_UART_Transmit>
						CCR1= (ARR * i)/100;
 8000a7c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000a7e:	4613      	mov	r3, r2
 8000a80:	029b      	lsls	r3, r3, #10
 8000a82:	1a9b      	subs	r3, r3, r2
 8000a84:	4a28      	ldr	r2, [pc, #160]	; (8000b28 <main+0x4bc>)
 8000a86:	fb82 1203 	smull	r1, r2, r2, r3
 8000a8a:	1152      	asrs	r2, r2, #5
 8000a8c:	17db      	asrs	r3, r3, #31
 8000a8e:	1ad3      	subs	r3, r2, r3
 8000a90:	b29a      	uxth	r2, r3
 8000a92:	4b26      	ldr	r3, [pc, #152]	; (8000b2c <main+0x4c0>)
 8000a94:	801a      	strh	r2, [r3, #0]
						CCR2= (ARR *(100 - i))/100;
 8000a96:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000a98:	f1c3 0264 	rsb	r2, r3, #100	; 0x64
 8000a9c:	4613      	mov	r3, r2
 8000a9e:	029b      	lsls	r3, r3, #10
 8000aa0:	1a9b      	subs	r3, r3, r2
 8000aa2:	4a21      	ldr	r2, [pc, #132]	; (8000b28 <main+0x4bc>)
 8000aa4:	fb82 1203 	smull	r1, r2, r2, r3
 8000aa8:	1152      	asrs	r2, r2, #5
 8000aaa:	17db      	asrs	r3, r3, #31
 8000aac:	1ad3      	subs	r3, r2, r3
 8000aae:	b29a      	uxth	r2, r3
 8000ab0:	4b1f      	ldr	r3, [pc, #124]	; (8000b30 <main+0x4c4>)
 8000ab2:	801a      	strh	r2, [r3, #0]
						__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1, CCR1);
 8000ab4:	4b1d      	ldr	r3, [pc, #116]	; (8000b2c <main+0x4c0>)
 8000ab6:	881a      	ldrh	r2, [r3, #0]
 8000ab8:	4b1e      	ldr	r3, [pc, #120]	; (8000b34 <main+0x4c8>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	635a      	str	r2, [r3, #52]	; 0x34
						__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2, CCR2);
 8000abe:	4b1c      	ldr	r3, [pc, #112]	; (8000b30 <main+0x4c4>)
 8000ac0:	881a      	ldrh	r2, [r3, #0]
 8000ac2:	4b1c      	ldr	r3, [pc, #112]	; (8000b34 <main+0x4c8>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	639a      	str	r2, [r3, #56]	; 0x38
						HAL_Delay(100);
 8000ac8:	2064      	movs	r0, #100	; 0x64
 8000aca:	f000 fe7d 	bl	80017c8 <HAL_Delay>
					for(int i=oldSpeed;i>=speedInt;i--){
 8000ace:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000ad0:	3b01      	subs	r3, #1
 8000ad2:	667b      	str	r3, [r7, #100]	; 0x64
 8000ad4:	4b0e      	ldr	r3, [pc, #56]	; (8000b10 <main+0x4a4>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000ada:	429a      	cmp	r2, r3
 8000adc:	dac2      	bge.n	8000a64 <main+0x3f8>

					}
				}
				oldSpeed = speedInt;
 8000ade:	4b0c      	ldr	r3, [pc, #48]	; (8000b10 <main+0x4a4>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	4a0f      	ldr	r2, [pc, #60]	; (8000b20 <main+0x4b4>)
 8000ae4:	6013      	str	r3, [r2, #0]
 8000ae6:	e006      	b.n	8000af6 <main+0x48a>
			}
			else{
				HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8000ae8:	f04f 33ff 	mov.w	r3, #4294967295
 8000aec:	2214      	movs	r2, #20
 8000aee:	4912      	ldr	r1, [pc, #72]	; (8000b38 <main+0x4cc>)
 8000af0:	480a      	ldr	r0, [pc, #40]	; (8000b1c <main+0x4b0>)
 8000af2:	f005 fc5e 	bl	80063b2 <HAL_UART_Transmit>
			}
			HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8000af6:	f04f 33ff 	mov.w	r3, #4294967295
 8000afa:	2218      	movs	r2, #24
 8000afc:	490f      	ldr	r1, [pc, #60]	; (8000b3c <main+0x4d0>)
 8000afe:	4807      	ldr	r0, [pc, #28]	; (8000b1c <main+0x4b0>)
 8000b00:	f005 fc57 	bl	80063b2 <HAL_UART_Transmit>
			newCmdReady = 0;
 8000b04:	2300      	movs	r3, #0
 8000b06:	673b      	str	r3, [r7, #112]	; 0x70
		if(uartRxReceived){
 8000b08:	e5fc      	b.n	8000704 <main+0x98>
 8000b0a:	bf00      	nop
 8000b0c:	20000304 	.word	0x20000304
 8000b10:	20000308 	.word	0x20000308
 8000b14:	08009a4c 	.word	0x08009a4c
 8000b18:	200002c4 	.word	0x200002c4
 8000b1c:	2000022c 	.word	0x2000022c
 8000b20:	20000098 	.word	0x20000098
 8000b24:	08009a64 	.word	0x08009a64
 8000b28:	51eb851f 	.word	0x51eb851f
 8000b2c:	2000030c 	.word	0x2000030c
 8000b30:	2000030e 	.word	0x2000030e
 8000b34:	20000194 	.word	0x20000194
 8000b38:	20000084 	.word	0x20000084
 8000b3c:	20000000 	.word	0x20000000

08000b40 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b094      	sub	sp, #80	; 0x50
 8000b44:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b46:	f107 0318 	add.w	r3, r7, #24
 8000b4a:	2238      	movs	r2, #56	; 0x38
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f007 fc84 	bl	800845c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b54:	1d3b      	adds	r3, r7, #4
 8000b56:	2200      	movs	r2, #0
 8000b58:	601a      	str	r2, [r3, #0]
 8000b5a:	605a      	str	r2, [r3, #4]
 8000b5c:	609a      	str	r2, [r3, #8]
 8000b5e:	60da      	str	r2, [r3, #12]
 8000b60:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000b62:	2000      	movs	r0, #0
 8000b64:	f003 f8e8 	bl	8003d38 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b68:	2302      	movs	r3, #2
 8000b6a:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b70:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b72:	2340      	movs	r3, #64	; 0x40
 8000b74:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b76:	2302      	movs	r3, #2
 8000b78:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000b7e:	2304      	movs	r3, #4
 8000b80:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 8000b82:	2355      	movs	r3, #85	; 0x55
 8000b84:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b86:	2302      	movs	r3, #2
 8000b88:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b92:	f107 0318 	add.w	r3, r7, #24
 8000b96:	4618      	mov	r0, r3
 8000b98:	f003 f982 	bl	8003ea0 <HAL_RCC_OscConfig>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <SystemClock_Config+0x66>
	{
		Error_Handler();
 8000ba2:	f000 fae5 	bl	8001170 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ba6:	230f      	movs	r3, #15
 8000ba8:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000baa:	2303      	movs	r3, #3
 8000bac:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000bba:	1d3b      	adds	r3, r7, #4
 8000bbc:	2104      	movs	r1, #4
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f003 fc86 	bl	80044d0 <HAL_RCC_ClockConfig>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <SystemClock_Config+0x8e>
	{
		Error_Handler();
 8000bca:	f000 fad1 	bl	8001170 <Error_Handler>
	}
}
 8000bce:	bf00      	nop
 8000bd0:	3750      	adds	r7, #80	; 0x50
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
	...

08000bd8 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b08c      	sub	sp, #48	; 0x30
 8000bdc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode = {0};
 8000bde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000be2:	2200      	movs	r2, #0
 8000be4:	601a      	str	r2, [r3, #0]
 8000be6:	605a      	str	r2, [r3, #4]
 8000be8:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = {0};
 8000bea:	1d3b      	adds	r3, r7, #4
 8000bec:	2220      	movs	r2, #32
 8000bee:	2100      	movs	r1, #0
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f007 fc33 	bl	800845c <memset>

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8000bf6:	4b32      	ldr	r3, [pc, #200]	; (8000cc0 <MX_ADC1_Init+0xe8>)
 8000bf8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000bfc:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000bfe:	4b30      	ldr	r3, [pc, #192]	; (8000cc0 <MX_ADC1_Init+0xe8>)
 8000c00:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000c04:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c06:	4b2e      	ldr	r3, [pc, #184]	; (8000cc0 <MX_ADC1_Init+0xe8>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c0c:	4b2c      	ldr	r3, [pc, #176]	; (8000cc0 <MX_ADC1_Init+0xe8>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	60da      	str	r2, [r3, #12]
	hadc1.Init.GainCompensation = 0;
 8000c12:	4b2b      	ldr	r3, [pc, #172]	; (8000cc0 <MX_ADC1_Init+0xe8>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	611a      	str	r2, [r3, #16]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c18:	4b29      	ldr	r3, [pc, #164]	; (8000cc0 <MX_ADC1_Init+0xe8>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	615a      	str	r2, [r3, #20]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c1e:	4b28      	ldr	r3, [pc, #160]	; (8000cc0 <MX_ADC1_Init+0xe8>)
 8000c20:	2204      	movs	r2, #4
 8000c22:	619a      	str	r2, [r3, #24]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c24:	4b26      	ldr	r3, [pc, #152]	; (8000cc0 <MX_ADC1_Init+0xe8>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	771a      	strb	r2, [r3, #28]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8000c2a:	4b25      	ldr	r3, [pc, #148]	; (8000cc0 <MX_ADC1_Init+0xe8>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	775a      	strb	r2, [r3, #29]
	hadc1.Init.NbrOfConversion = 1;
 8000c30:	4b23      	ldr	r3, [pc, #140]	; (8000cc0 <MX_ADC1_Init+0xe8>)
 8000c32:	2201      	movs	r2, #1
 8000c34:	621a      	str	r2, [r3, #32]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c36:	4b22      	ldr	r3, [pc, #136]	; (8000cc0 <MX_ADC1_Init+0xe8>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c3e:	4b20      	ldr	r3, [pc, #128]	; (8000cc0 <MX_ADC1_Init+0xe8>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c44:	4b1e      	ldr	r3, [pc, #120]	; (8000cc0 <MX_ADC1_Init+0xe8>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	631a      	str	r2, [r3, #48]	; 0x30
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c4a:	4b1d      	ldr	r3, [pc, #116]	; (8000cc0 <MX_ADC1_Init+0xe8>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c52:	4b1b      	ldr	r3, [pc, #108]	; (8000cc0 <MX_ADC1_Init+0xe8>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	63da      	str	r2, [r3, #60]	; 0x3c
	hadc1.Init.OversamplingMode = DISABLE;
 8000c58:	4b19      	ldr	r3, [pc, #100]	; (8000cc0 <MX_ADC1_Init+0xe8>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c60:	4817      	ldr	r0, [pc, #92]	; (8000cc0 <MX_ADC1_Init+0xe8>)
 8000c62:	f001 f83d 	bl	8001ce0 <HAL_ADC_Init>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_ADC1_Init+0x98>
	{
		Error_Handler();
 8000c6c:	f000 fa80 	bl	8001170 <Error_Handler>
	}

	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 8000c70:	2300      	movs	r3, #0
 8000c72:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000c74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4811      	ldr	r0, [pc, #68]	; (8000cc0 <MX_ADC1_Init+0xe8>)
 8000c7c:	f002 fbb8 	bl	80033f0 <HAL_ADCEx_MultiModeConfigChannel>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <MX_ADC1_Init+0xb2>
	{
		Error_Handler();
 8000c86:	f000 fa73 	bl	8001170 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 8000c8a:	4b0e      	ldr	r3, [pc, #56]	; (8000cc4 <MX_ADC1_Init+0xec>)
 8000c8c:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c8e:	2306      	movs	r3, #6
 8000c90:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000c92:	2300      	movs	r3, #0
 8000c94:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c96:	237f      	movs	r3, #127	; 0x7f
 8000c98:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c9a:	2304      	movs	r3, #4
 8000c9c:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	61bb      	str	r3, [r7, #24]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ca2:	1d3b      	adds	r3, r7, #4
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4806      	ldr	r0, [pc, #24]	; (8000cc0 <MX_ADC1_Init+0xe8>)
 8000ca8:	f001 fdba 	bl	8002820 <HAL_ADC_ConfigChannel>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_ADC1_Init+0xde>
	{
		Error_Handler();
 8000cb2:	f000 fa5d 	bl	8001170 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000cb6:	bf00      	nop
 8000cb8:	3730      	adds	r7, #48	; 0x30
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	20000128 	.word	0x20000128
 8000cc4:	04300002 	.word	0x04300002

08000cc8 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b09c      	sub	sp, #112	; 0x70
 8000ccc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cce:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	601a      	str	r2, [r3, #0]
 8000cd6:	605a      	str	r2, [r3, #4]
 8000cd8:	609a      	str	r2, [r3, #8]
 8000cda:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cdc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	605a      	str	r2, [r3, #4]
 8000ce6:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8000ce8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	609a      	str	r2, [r3, #8]
 8000cf4:	60da      	str	r2, [r3, #12]
 8000cf6:	611a      	str	r2, [r3, #16]
 8000cf8:	615a      	str	r2, [r3, #20]
 8000cfa:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000cfc:	1d3b      	adds	r3, r7, #4
 8000cfe:	2234      	movs	r2, #52	; 0x34
 8000d00:	2100      	movs	r1, #0
 8000d02:	4618      	mov	r0, r3
 8000d04:	f007 fbaa 	bl	800845c <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8000d08:	4b4c      	ldr	r3, [pc, #304]	; (8000e3c <MX_TIM1_Init+0x174>)
 8000d0a:	4a4d      	ldr	r2, [pc, #308]	; (8000e40 <MX_TIM1_Init+0x178>)
 8000d0c:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 5-1;
 8000d0e:	4b4b      	ldr	r3, [pc, #300]	; (8000e3c <MX_TIM1_Init+0x174>)
 8000d10:	2204      	movs	r2, #4
 8000d12:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000d14:	4b49      	ldr	r3, [pc, #292]	; (8000e3c <MX_TIM1_Init+0x174>)
 8000d16:	2220      	movs	r2, #32
 8000d18:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 1022;
 8000d1a:	4b48      	ldr	r3, [pc, #288]	; (8000e3c <MX_TIM1_Init+0x174>)
 8000d1c:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8000d20:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d22:	4b46      	ldr	r3, [pc, #280]	; (8000e3c <MX_TIM1_Init+0x174>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000d28:	4b44      	ldr	r3, [pc, #272]	; (8000e3c <MX_TIM1_Init+0x174>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d2e:	4b43      	ldr	r3, [pc, #268]	; (8000e3c <MX_TIM1_Init+0x174>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d34:	4841      	ldr	r0, [pc, #260]	; (8000e3c <MX_TIM1_Init+0x174>)
 8000d36:	f004 f835 	bl	8004da4 <HAL_TIM_Base_Init>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_TIM1_Init+0x7c>
	{
		Error_Handler();
 8000d40:	f000 fa16 	bl	8001170 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d48:	663b      	str	r3, [r7, #96]	; 0x60
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d4a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000d4e:	4619      	mov	r1, r3
 8000d50:	483a      	ldr	r0, [pc, #232]	; (8000e3c <MX_TIM1_Init+0x174>)
 8000d52:	f004 fb05 	bl	8005360 <HAL_TIM_ConfigClockSource>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_TIM1_Init+0x98>
	{
		Error_Handler();
 8000d5c:	f000 fa08 	bl	8001170 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000d60:	4836      	ldr	r0, [pc, #216]	; (8000e3c <MX_TIM1_Init+0x174>)
 8000d62:	f004 f876 	bl	8004e52 <HAL_TIM_PWM_Init>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_TIM1_Init+0xa8>
	{
		Error_Handler();
 8000d6c:	f000 fa00 	bl	8001170 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d70:	2300      	movs	r3, #0
 8000d72:	657b      	str	r3, [r7, #84]	; 0x54
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d74:	2300      	movs	r3, #0
 8000d76:	65bb      	str	r3, [r7, #88]	; 0x58
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d7c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000d80:	4619      	mov	r1, r3
 8000d82:	482e      	ldr	r0, [pc, #184]	; (8000e3c <MX_TIM1_Init+0x174>)
 8000d84:	f005 f958 	bl	8006038 <HAL_TIMEx_MasterConfigSynchronization>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_TIM1_Init+0xca>
	{
		Error_Handler();
 8000d8e:	f000 f9ef 	bl	8001170 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d92:	2360      	movs	r3, #96	; 0x60
 8000d94:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.Pulse = 613;
 8000d96:	f240 2365 	movw	r3, #613	; 0x265
 8000d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000da0:	2300      	movs	r3, #0
 8000da2:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000da4:	2300      	movs	r3, #0
 8000da6:	64bb      	str	r3, [r7, #72]	; 0x48
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000da8:	2300      	movs	r3, #0
 8000daa:	64fb      	str	r3, [r7, #76]	; 0x4c
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000dac:	2300      	movs	r3, #0
 8000dae:	653b      	str	r3, [r7, #80]	; 0x50
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000db0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000db4:	2200      	movs	r2, #0
 8000db6:	4619      	mov	r1, r3
 8000db8:	4820      	ldr	r0, [pc, #128]	; (8000e3c <MX_TIM1_Init+0x174>)
 8000dba:	f004 f9bd 	bl	8005138 <HAL_TIM_PWM_ConfigChannel>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_TIM1_Init+0x100>
	{
		Error_Handler();
 8000dc4:	f000 f9d4 	bl	8001170 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000dc8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000dcc:	2204      	movs	r2, #4
 8000dce:	4619      	mov	r1, r3
 8000dd0:	481a      	ldr	r0, [pc, #104]	; (8000e3c <MX_TIM1_Init+0x174>)
 8000dd2:	f004 f9b1 	bl	8005138 <HAL_TIM_PWM_ConfigChannel>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <MX_TIM1_Init+0x118>
	{
		Error_Handler();
 8000ddc:	f000 f9c8 	bl	8001170 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000de0:	2300      	movs	r3, #0
 8000de2:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000de4:	2300      	movs	r3, #0
 8000de6:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000de8:	2300      	movs	r3, #0
 8000dea:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 200;
 8000dec:	23c8      	movs	r3, #200	; 0xc8
 8000dee:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000df0:	2300      	movs	r3, #0
 8000df2:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000df4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000df8:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000e02:	2300      	movs	r3, #0
 8000e04:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000e06:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000e0a:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.Break2Filter = 0;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
	sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000e10:	2300      	movs	r3, #0
 8000e12:	633b      	str	r3, [r7, #48]	; 0x30
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e14:	2300      	movs	r3, #0
 8000e16:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000e18:	1d3b      	adds	r3, r7, #4
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	4807      	ldr	r0, [pc, #28]	; (8000e3c <MX_TIM1_Init+0x174>)
 8000e1e:	f005 f9a1 	bl	8006164 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <MX_TIM1_Init+0x164>
	{
		Error_Handler();
 8000e28:	f000 f9a2 	bl	8001170 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8000e2c:	4803      	ldr	r0, [pc, #12]	; (8000e3c <MX_TIM1_Init+0x174>)
 8000e2e:	f000 fa57 	bl	80012e0 <HAL_TIM_MspPostInit>

}
 8000e32:	bf00      	nop
 8000e34:	3770      	adds	r7, #112	; 0x70
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	20000194 	.word	0x20000194
 8000e40:	40012c00 	.word	0x40012c00

08000e44 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b08e      	sub	sp, #56	; 0x38
 8000e48:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e4e:	2200      	movs	r2, #0
 8000e50:	601a      	str	r2, [r3, #0]
 8000e52:	605a      	str	r2, [r3, #4]
 8000e54:	609a      	str	r2, [r3, #8]
 8000e56:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e58:	f107 031c 	add.w	r3, r7, #28
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	605a      	str	r2, [r3, #4]
 8000e62:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8000e64:	463b      	mov	r3, r7
 8000e66:	2200      	movs	r2, #0
 8000e68:	601a      	str	r2, [r3, #0]
 8000e6a:	605a      	str	r2, [r3, #4]
 8000e6c:	609a      	str	r2, [r3, #8]
 8000e6e:	60da      	str	r2, [r3, #12]
 8000e70:	611a      	str	r2, [r3, #16]
 8000e72:	615a      	str	r2, [r3, #20]
 8000e74:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000e76:	4b2d      	ldr	r3, [pc, #180]	; (8000f2c <MX_TIM2_Init+0xe8>)
 8000e78:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e7c:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8000e7e:	4b2b      	ldr	r3, [pc, #172]	; (8000f2c <MX_TIM2_Init+0xe8>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e84:	4b29      	ldr	r3, [pc, #164]	; (8000f2c <MX_TIM2_Init+0xe8>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535;
 8000e8a:	4b28      	ldr	r3, [pc, #160]	; (8000f2c <MX_TIM2_Init+0xe8>)
 8000e8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e90:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e92:	4b26      	ldr	r3, [pc, #152]	; (8000f2c <MX_TIM2_Init+0xe8>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e98:	4b24      	ldr	r3, [pc, #144]	; (8000f2c <MX_TIM2_Init+0xe8>)
 8000e9a:	2280      	movs	r2, #128	; 0x80
 8000e9c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e9e:	4823      	ldr	r0, [pc, #140]	; (8000f2c <MX_TIM2_Init+0xe8>)
 8000ea0:	f003 ff80 	bl	8004da4 <HAL_TIM_Base_Init>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <MX_TIM2_Init+0x6a>
	{
		Error_Handler();
 8000eaa:	f000 f961 	bl	8001170 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eb2:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000eb4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000eb8:	4619      	mov	r1, r3
 8000eba:	481c      	ldr	r0, [pc, #112]	; (8000f2c <MX_TIM2_Init+0xe8>)
 8000ebc:	f004 fa50 	bl	8005360 <HAL_TIM_ConfigClockSource>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <MX_TIM2_Init+0x86>
	{
		Error_Handler();
 8000ec6:	f000 f953 	bl	8001170 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000eca:	4818      	ldr	r0, [pc, #96]	; (8000f2c <MX_TIM2_Init+0xe8>)
 8000ecc:	f003 ffc1 	bl	8004e52 <HAL_TIM_PWM_Init>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <MX_TIM2_Init+0x96>
	{
		Error_Handler();
 8000ed6:	f000 f94b 	bl	8001170 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eda:	2300      	movs	r3, #0
 8000edc:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ee2:	f107 031c 	add.w	r3, r7, #28
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4810      	ldr	r0, [pc, #64]	; (8000f2c <MX_TIM2_Init+0xe8>)
 8000eea:	f005 f8a5 	bl	8006038 <HAL_TIMEx_MasterConfigSynchronization>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_TIM2_Init+0xb4>
	{
		Error_Handler();
 8000ef4:	f000 f93c 	bl	8001170 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ef8:	2360      	movs	r3, #96	; 0x60
 8000efa:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8000efc:	2300      	movs	r3, #0
 8000efe:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f00:	2300      	movs	r3, #0
 8000f02:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f04:	2300      	movs	r3, #0
 8000f06:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f08:	463b      	mov	r3, r7
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4807      	ldr	r0, [pc, #28]	; (8000f2c <MX_TIM2_Init+0xe8>)
 8000f10:	f004 f912 	bl	8005138 <HAL_TIM_PWM_ConfigChannel>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <MX_TIM2_Init+0xda>
	{
		Error_Handler();
 8000f1a:	f000 f929 	bl	8001170 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8000f1e:	4803      	ldr	r0, [pc, #12]	; (8000f2c <MX_TIM2_Init+0xe8>)
 8000f20:	f000 f9de 	bl	80012e0 <HAL_TIM_MspPostInit>

}
 8000f24:	bf00      	nop
 8000f26:	3738      	adds	r7, #56	; 0x38
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	200001e0 	.word	0x200001e0

08000f30 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000f34:	4b22      	ldr	r3, [pc, #136]	; (8000fc0 <MX_USART2_UART_Init+0x90>)
 8000f36:	4a23      	ldr	r2, [pc, #140]	; (8000fc4 <MX_USART2_UART_Init+0x94>)
 8000f38:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000f3a:	4b21      	ldr	r3, [pc, #132]	; (8000fc0 <MX_USART2_UART_Init+0x90>)
 8000f3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f40:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f42:	4b1f      	ldr	r3, [pc, #124]	; (8000fc0 <MX_USART2_UART_Init+0x90>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000f48:	4b1d      	ldr	r3, [pc, #116]	; (8000fc0 <MX_USART2_UART_Init+0x90>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000f4e:	4b1c      	ldr	r3, [pc, #112]	; (8000fc0 <MX_USART2_UART_Init+0x90>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000f54:	4b1a      	ldr	r3, [pc, #104]	; (8000fc0 <MX_USART2_UART_Init+0x90>)
 8000f56:	220c      	movs	r2, #12
 8000f58:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f5a:	4b19      	ldr	r3, [pc, #100]	; (8000fc0 <MX_USART2_UART_Init+0x90>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f60:	4b17      	ldr	r3, [pc, #92]	; (8000fc0 <MX_USART2_UART_Init+0x90>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f66:	4b16      	ldr	r3, [pc, #88]	; (8000fc0 <MX_USART2_UART_Init+0x90>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f6c:	4b14      	ldr	r3, [pc, #80]	; (8000fc0 <MX_USART2_UART_Init+0x90>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	625a      	str	r2, [r3, #36]	; 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f72:	4b13      	ldr	r3, [pc, #76]	; (8000fc0 <MX_USART2_UART_Init+0x90>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f78:	4811      	ldr	r0, [pc, #68]	; (8000fc0 <MX_USART2_UART_Init+0x90>)
 8000f7a:	f005 f9ca 	bl	8006312 <HAL_UART_Init>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <MX_USART2_UART_Init+0x58>
	{
		Error_Handler();
 8000f84:	f000 f8f4 	bl	8001170 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f88:	2100      	movs	r1, #0
 8000f8a:	480d      	ldr	r0, [pc, #52]	; (8000fc0 <MX_USART2_UART_Init+0x90>)
 8000f8c:	f007 f96d 	bl	800826a <HAL_UARTEx_SetTxFifoThreshold>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <MX_USART2_UART_Init+0x6a>
	{
		Error_Handler();
 8000f96:	f000 f8eb 	bl	8001170 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	4808      	ldr	r0, [pc, #32]	; (8000fc0 <MX_USART2_UART_Init+0x90>)
 8000f9e:	f007 f9a2 	bl	80082e6 <HAL_UARTEx_SetRxFifoThreshold>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_USART2_UART_Init+0x7c>
	{
		Error_Handler();
 8000fa8:	f000 f8e2 	bl	8001170 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000fac:	4804      	ldr	r0, [pc, #16]	; (8000fc0 <MX_USART2_UART_Init+0x90>)
 8000fae:	f007 f923 	bl	80081f8 <HAL_UARTEx_DisableFifoMode>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_USART2_UART_Init+0x8c>
	{
		Error_Handler();
 8000fb8:	f000 f8da 	bl	8001170 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000fbc:	bf00      	nop
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	2000022c 	.word	0x2000022c
 8000fc4:	40004400 	.word	0x40004400

08000fc8 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b088      	sub	sp, #32
 8000fcc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fce:	f107 030c 	add.w	r3, r7, #12
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	605a      	str	r2, [r3, #4]
 8000fd8:	609a      	str	r2, [r3, #8]
 8000fda:	60da      	str	r2, [r3, #12]
 8000fdc:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000fde:	4b33      	ldr	r3, [pc, #204]	; (80010ac <MX_GPIO_Init+0xe4>)
 8000fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe2:	4a32      	ldr	r2, [pc, #200]	; (80010ac <MX_GPIO_Init+0xe4>)
 8000fe4:	f043 0304 	orr.w	r3, r3, #4
 8000fe8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fea:	4b30      	ldr	r3, [pc, #192]	; (80010ac <MX_GPIO_Init+0xe4>)
 8000fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fee:	f003 0304 	and.w	r3, r3, #4
 8000ff2:	60bb      	str	r3, [r7, #8]
 8000ff4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000ff6:	4b2d      	ldr	r3, [pc, #180]	; (80010ac <MX_GPIO_Init+0xe4>)
 8000ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ffa:	4a2c      	ldr	r2, [pc, #176]	; (80010ac <MX_GPIO_Init+0xe4>)
 8000ffc:	f043 0320 	orr.w	r3, r3, #32
 8001000:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001002:	4b2a      	ldr	r3, [pc, #168]	; (80010ac <MX_GPIO_Init+0xe4>)
 8001004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001006:	f003 0320 	and.w	r3, r3, #32
 800100a:	607b      	str	r3, [r7, #4]
 800100c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800100e:	4b27      	ldr	r3, [pc, #156]	; (80010ac <MX_GPIO_Init+0xe4>)
 8001010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001012:	4a26      	ldr	r2, [pc, #152]	; (80010ac <MX_GPIO_Init+0xe4>)
 8001014:	f043 0301 	orr.w	r3, r3, #1
 8001018:	64d3      	str	r3, [r2, #76]	; 0x4c
 800101a:	4b24      	ldr	r3, [pc, #144]	; (80010ac <MX_GPIO_Init+0xe4>)
 800101c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800101e:	f003 0301 	and.w	r3, r3, #1
 8001022:	603b      	str	r3, [r7, #0]
 8001024:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(POWER_UP_GPIO_Port, POWER_UP_Pin, GPIO_PIN_RESET);
 8001026:	2200      	movs	r2, #0
 8001028:	2108      	movs	r1, #8
 800102a:	4821      	ldr	r0, [pc, #132]	; (80010b0 <MX_GPIO_Init+0xe8>)
 800102c:	f002 fe3a 	bl	8003ca4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001030:	2200      	movs	r2, #0
 8001032:	2120      	movs	r1, #32
 8001034:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001038:	f002 fe34 	bl	8003ca4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : BUTTON_Pin */
	GPIO_InitStruct.Pin = BUTTON_Pin;
 800103c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001040:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001042:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001046:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	2300      	movs	r3, #0
 800104a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 800104c:	f107 030c 	add.w	r3, r7, #12
 8001050:	4619      	mov	r1, r3
 8001052:	4817      	ldr	r0, [pc, #92]	; (80010b0 <MX_GPIO_Init+0xe8>)
 8001054:	f002 fca4 	bl	80039a0 <HAL_GPIO_Init>

	/*Configure GPIO pin : POWER_UP_Pin */
	GPIO_InitStruct.Pin = POWER_UP_Pin;
 8001058:	2308      	movs	r3, #8
 800105a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800105c:	2301      	movs	r3, #1
 800105e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001060:	2300      	movs	r3, #0
 8001062:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001064:	2300      	movs	r3, #0
 8001066:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(POWER_UP_GPIO_Port, &GPIO_InitStruct);
 8001068:	f107 030c 	add.w	r3, r7, #12
 800106c:	4619      	mov	r1, r3
 800106e:	4810      	ldr	r0, [pc, #64]	; (80010b0 <MX_GPIO_Init+0xe8>)
 8001070:	f002 fc96 	bl	80039a0 <HAL_GPIO_Init>

	/*Configure GPIO pin : LED_Pin */
	GPIO_InitStruct.Pin = LED_Pin;
 8001074:	2320      	movs	r3, #32
 8001076:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001078:	2301      	movs	r3, #1
 800107a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107c:	2300      	movs	r3, #0
 800107e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001080:	2300      	movs	r3, #0
 8001082:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001084:	f107 030c 	add.w	r3, r7, #12
 8001088:	4619      	mov	r1, r3
 800108a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800108e:	f002 fc87 	bl	80039a0 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001092:	2200      	movs	r2, #0
 8001094:	2100      	movs	r1, #0
 8001096:	2028      	movs	r0, #40	; 0x28
 8001098:	f002 fb8d 	bl	80037b6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800109c:	2028      	movs	r0, #40	; 0x28
 800109e:	f002 fba4 	bl	80037ea <HAL_NVIC_EnableIRQ>

}
 80010a2:	bf00      	nop
 80010a4:	3720      	adds	r7, #32
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	40021000 	.word	0x40021000
 80010b0:	48000800 	.word	0x48000800

080010b4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback (UART_HandleTypeDef * huart){
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 80010bc:	4b05      	ldr	r3, [pc, #20]	; (80010d4 <HAL_UART_RxCpltCallback+0x20>)
 80010be:	2201      	movs	r2, #1
 80010c0:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 80010c2:	2201      	movs	r2, #1
 80010c4:	4904      	ldr	r1, [pc, #16]	; (80010d8 <HAL_UART_RxCpltCallback+0x24>)
 80010c6:	4805      	ldr	r0, [pc, #20]	; (80010dc <HAL_UART_RxCpltCallback+0x28>)
 80010c8:	f005 fa0a 	bl	80064e0 <HAL_UART_Receive_IT>
}
 80010cc:	bf00      	nop
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	200002bc 	.word	0x200002bc
 80010d8:	200002c0 	.word	0x200002c0
 80010dc:	2000022c 	.word	0x2000022c

080010e0 <powerUp>:

void powerUp(void){
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(POWER_UP_GPIO_Port, POWER_UP_Pin, GPIO_PIN_SET);
 80010e6:	2201      	movs	r2, #1
 80010e8:	2108      	movs	r1, #8
 80010ea:	480a      	ldr	r0, [pc, #40]	; (8001114 <powerUp+0x34>)
 80010ec:	f002 fdda 	bl	8003ca4 <HAL_GPIO_WritePin>
	for(volatile count = 0;count<100;count++); // delay 6 µs
 80010f0:	2300      	movs	r3, #0
 80010f2:	607b      	str	r3, [r7, #4]
 80010f4:	e002      	b.n	80010fc <powerUp+0x1c>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	3301      	adds	r3, #1
 80010fa:	607b      	str	r3, [r7, #4]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2b63      	cmp	r3, #99	; 0x63
 8001100:	ddf9      	ble.n	80010f6 <powerUp+0x16>
	HAL_GPIO_WritePin(POWER_UP_GPIO_Port, POWER_UP_Pin, GPIO_PIN_RESET);
 8001102:	2200      	movs	r2, #0
 8001104:	2108      	movs	r1, #8
 8001106:	4803      	ldr	r0, [pc, #12]	; (8001114 <powerUp+0x34>)
 8001108:	f002 fdcc 	bl	8003ca4 <HAL_GPIO_WritePin>
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	48000800 	.word	0x48000800

08001118 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
	memset(uartTxBuffer,NULL,UART_TX_BUFFER_SIZE*sizeof(char));
 8001120:	2240      	movs	r2, #64	; 0x40
 8001122:	2100      	movs	r1, #0
 8001124:	480d      	ldr	r0, [pc, #52]	; (800115c <HAL_ADC_ConvCpltCallback+0x44>)
 8001126:	f007 f999 	bl	800845c <memset>
	AD_RES = HAL_ADC_GetValue(&hadc1);
 800112a:	480d      	ldr	r0, [pc, #52]	; (8001160 <HAL_ADC_ConvCpltCallback+0x48>)
 800112c:	f001 f8f6 	bl	800231c <HAL_ADC_GetValue>
 8001130:	4603      	mov	r3, r0
 8001132:	b29a      	uxth	r2, r3
 8001134:	4b0b      	ldr	r3, [pc, #44]	; (8001164 <HAL_ADC_ConvCpltCallback+0x4c>)
 8001136:	801a      	strh	r2, [r3, #0]
	sprintf(uartTxBuffer,"Current value = %d\n\r", AD_RES);
 8001138:	4b0a      	ldr	r3, [pc, #40]	; (8001164 <HAL_ADC_ConvCpltCallback+0x4c>)
 800113a:	881b      	ldrh	r3, [r3, #0]
 800113c:	461a      	mov	r2, r3
 800113e:	490a      	ldr	r1, [pc, #40]	; (8001168 <HAL_ADC_ConvCpltCallback+0x50>)
 8001140:	4806      	ldr	r0, [pc, #24]	; (800115c <HAL_ADC_ConvCpltCallback+0x44>)
 8001142:	f007 f993 	bl	800846c <siprintf>
	HAL_UART_Transmit(&huart2, uartTxBuffer, sizeof(uartTxBuffer), HAL_MAX_DELAY);
 8001146:	f04f 33ff 	mov.w	r3, #4294967295
 800114a:	2240      	movs	r2, #64	; 0x40
 800114c:	4903      	ldr	r1, [pc, #12]	; (800115c <HAL_ADC_ConvCpltCallback+0x44>)
 800114e:	4807      	ldr	r0, [pc, #28]	; (800116c <HAL_ADC_ConvCpltCallback+0x54>)
 8001150:	f005 f92f 	bl	80063b2 <HAL_UART_Transmit>
}
 8001154:	bf00      	nop
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	200002c4 	.word	0x200002c4
 8001160:	20000128 	.word	0x20000128
 8001164:	20000310 	.word	0x20000310
 8001168:	08009a78 	.word	0x08009a78
 800116c:	2000022c 	.word	0x2000022c

08001170 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001174:	b672      	cpsid	i
}
 8001176:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001178:	e7fe      	b.n	8001178 <Error_Handler+0x8>
	...

0800117c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001182:	4b0f      	ldr	r3, [pc, #60]	; (80011c0 <HAL_MspInit+0x44>)
 8001184:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001186:	4a0e      	ldr	r2, [pc, #56]	; (80011c0 <HAL_MspInit+0x44>)
 8001188:	f043 0301 	orr.w	r3, r3, #1
 800118c:	6613      	str	r3, [r2, #96]	; 0x60
 800118e:	4b0c      	ldr	r3, [pc, #48]	; (80011c0 <HAL_MspInit+0x44>)
 8001190:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001192:	f003 0301 	and.w	r3, r3, #1
 8001196:	607b      	str	r3, [r7, #4]
 8001198:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800119a:	4b09      	ldr	r3, [pc, #36]	; (80011c0 <HAL_MspInit+0x44>)
 800119c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800119e:	4a08      	ldr	r2, [pc, #32]	; (80011c0 <HAL_MspInit+0x44>)
 80011a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011a4:	6593      	str	r3, [r2, #88]	; 0x58
 80011a6:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <HAL_MspInit+0x44>)
 80011a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ae:	603b      	str	r3, [r7, #0]
 80011b0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80011b2:	f002 fe65 	bl	8003e80 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	40021000 	.word	0x40021000

080011c4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b09e      	sub	sp, #120	; 0x78
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011cc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	605a      	str	r2, [r3, #4]
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	60da      	str	r2, [r3, #12]
 80011da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011dc:	f107 0310 	add.w	r3, r7, #16
 80011e0:	2254      	movs	r2, #84	; 0x54
 80011e2:	2100      	movs	r1, #0
 80011e4:	4618      	mov	r0, r3
 80011e6:	f007 f939 	bl	800845c <memset>
  if(hadc->Instance==ADC1)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80011f2:	d13c      	bne.n	800126e <HAL_ADC_MspInit+0xaa>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80011f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80011f8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80011fa:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80011fe:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001200:	f107 0310 	add.w	r3, r7, #16
 8001204:	4618      	mov	r0, r3
 8001206:	f003 fb7f 	bl	8004908 <HAL_RCCEx_PeriphCLKConfig>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001210:	f7ff ffae 	bl	8001170 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001214:	4b18      	ldr	r3, [pc, #96]	; (8001278 <HAL_ADC_MspInit+0xb4>)
 8001216:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001218:	4a17      	ldr	r2, [pc, #92]	; (8001278 <HAL_ADC_MspInit+0xb4>)
 800121a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800121e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001220:	4b15      	ldr	r3, [pc, #84]	; (8001278 <HAL_ADC_MspInit+0xb4>)
 8001222:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001224:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001228:	60fb      	str	r3, [r7, #12]
 800122a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800122c:	4b12      	ldr	r3, [pc, #72]	; (8001278 <HAL_ADC_MspInit+0xb4>)
 800122e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001230:	4a11      	ldr	r2, [pc, #68]	; (8001278 <HAL_ADC_MspInit+0xb4>)
 8001232:	f043 0301 	orr.w	r3, r3, #1
 8001236:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001238:	4b0f      	ldr	r3, [pc, #60]	; (8001278 <HAL_ADC_MspInit+0xb4>)
 800123a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800123c:	f003 0301 	and.w	r3, r3, #1
 8001240:	60bb      	str	r3, [r7, #8]
 8001242:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001244:	2301      	movs	r3, #1
 8001246:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001248:	2303      	movs	r3, #3
 800124a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124c:	2300      	movs	r3, #0
 800124e:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001250:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001254:	4619      	mov	r1, r3
 8001256:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800125a:	f002 fba1 	bl	80039a0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800125e:	2200      	movs	r2, #0
 8001260:	2100      	movs	r1, #0
 8001262:	2012      	movs	r0, #18
 8001264:	f002 faa7 	bl	80037b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001268:	2012      	movs	r0, #18
 800126a:	f002 fabe 	bl	80037ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800126e:	bf00      	nop
 8001270:	3778      	adds	r7, #120	; 0x78
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	40021000 	.word	0x40021000

0800127c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800127c:	b480      	push	{r7}
 800127e:	b085      	sub	sp, #20
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a13      	ldr	r2, [pc, #76]	; (80012d8 <HAL_TIM_Base_MspInit+0x5c>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d10c      	bne.n	80012a8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800128e:	4b13      	ldr	r3, [pc, #76]	; (80012dc <HAL_TIM_Base_MspInit+0x60>)
 8001290:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001292:	4a12      	ldr	r2, [pc, #72]	; (80012dc <HAL_TIM_Base_MspInit+0x60>)
 8001294:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001298:	6613      	str	r3, [r2, #96]	; 0x60
 800129a:	4b10      	ldr	r3, [pc, #64]	; (80012dc <HAL_TIM_Base_MspInit+0x60>)
 800129c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800129e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80012a2:	60fb      	str	r3, [r7, #12]
 80012a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80012a6:	e010      	b.n	80012ca <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012b0:	d10b      	bne.n	80012ca <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012b2:	4b0a      	ldr	r3, [pc, #40]	; (80012dc <HAL_TIM_Base_MspInit+0x60>)
 80012b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012b6:	4a09      	ldr	r2, [pc, #36]	; (80012dc <HAL_TIM_Base_MspInit+0x60>)
 80012b8:	f043 0301 	orr.w	r3, r3, #1
 80012bc:	6593      	str	r3, [r2, #88]	; 0x58
 80012be:	4b07      	ldr	r3, [pc, #28]	; (80012dc <HAL_TIM_Base_MspInit+0x60>)
 80012c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	60bb      	str	r3, [r7, #8]
 80012c8:	68bb      	ldr	r3, [r7, #8]
}
 80012ca:	bf00      	nop
 80012cc:	3714      	adds	r7, #20
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	40012c00 	.word	0x40012c00
 80012dc:	40021000 	.word	0x40021000

080012e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b08a      	sub	sp, #40	; 0x28
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e8:	f107 0314 	add.w	r3, r7, #20
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]
 80012f2:	609a      	str	r2, [r3, #8]
 80012f4:	60da      	str	r2, [r3, #12]
 80012f6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a24      	ldr	r2, [pc, #144]	; (8001390 <HAL_TIM_MspPostInit+0xb0>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d11e      	bne.n	8001340 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001302:	4b24      	ldr	r3, [pc, #144]	; (8001394 <HAL_TIM_MspPostInit+0xb4>)
 8001304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001306:	4a23      	ldr	r2, [pc, #140]	; (8001394 <HAL_TIM_MspPostInit+0xb4>)
 8001308:	f043 0301 	orr.w	r3, r3, #1
 800130c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800130e:	4b21      	ldr	r3, [pc, #132]	; (8001394 <HAL_TIM_MspPostInit+0xb4>)
 8001310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001312:	f003 0301 	and.w	r3, r3, #1
 8001316:	613b      	str	r3, [r7, #16]
 8001318:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA11     ------> TIM1_CH1N
    PA12     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12;
 800131a:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 800131e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001320:	2302      	movs	r3, #2
 8001322:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001324:	2300      	movs	r3, #0
 8001326:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001328:	2300      	movs	r3, #0
 800132a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800132c:	2306      	movs	r3, #6
 800132e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001330:	f107 0314 	add.w	r3, r7, #20
 8001334:	4619      	mov	r1, r3
 8001336:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800133a:	f002 fb31 	bl	80039a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800133e:	e022      	b.n	8001386 <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM2)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001348:	d11d      	bne.n	8001386 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800134a:	4b12      	ldr	r3, [pc, #72]	; (8001394 <HAL_TIM_MspPostInit+0xb4>)
 800134c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800134e:	4a11      	ldr	r2, [pc, #68]	; (8001394 <HAL_TIM_MspPostInit+0xb4>)
 8001350:	f043 0301 	orr.w	r3, r3, #1
 8001354:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001356:	4b0f      	ldr	r3, [pc, #60]	; (8001394 <HAL_TIM_MspPostInit+0xb4>)
 8001358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800135a:	f003 0301 	and.w	r3, r3, #1
 800135e:	60fb      	str	r3, [r7, #12]
 8001360:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001362:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001366:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001368:	2302      	movs	r3, #2
 800136a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	2300      	movs	r3, #0
 800136e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001370:	2300      	movs	r3, #0
 8001372:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001374:	2301      	movs	r3, #1
 8001376:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001378:	f107 0314 	add.w	r3, r7, #20
 800137c:	4619      	mov	r1, r3
 800137e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001382:	f002 fb0d 	bl	80039a0 <HAL_GPIO_Init>
}
 8001386:	bf00      	nop
 8001388:	3728      	adds	r7, #40	; 0x28
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	40012c00 	.word	0x40012c00
 8001394:	40021000 	.word	0x40021000

08001398 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b09e      	sub	sp, #120	; 0x78
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	605a      	str	r2, [r3, #4]
 80013aa:	609a      	str	r2, [r3, #8]
 80013ac:	60da      	str	r2, [r3, #12]
 80013ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013b0:	f107 0310 	add.w	r3, r7, #16
 80013b4:	2254      	movs	r2, #84	; 0x54
 80013b6:	2100      	movs	r1, #0
 80013b8:	4618      	mov	r0, r3
 80013ba:	f007 f84f 	bl	800845c <memset>
  if(huart->Instance==USART2)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a23      	ldr	r2, [pc, #140]	; (8001450 <HAL_UART_MspInit+0xb8>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d13e      	bne.n	8001446 <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80013c8:	2302      	movs	r3, #2
 80013ca:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80013cc:	2300      	movs	r3, #0
 80013ce:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013d0:	f107 0310 	add.w	r3, r7, #16
 80013d4:	4618      	mov	r0, r3
 80013d6:	f003 fa97 	bl	8004908 <HAL_RCCEx_PeriphCLKConfig>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80013e0:	f7ff fec6 	bl	8001170 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013e4:	4b1b      	ldr	r3, [pc, #108]	; (8001454 <HAL_UART_MspInit+0xbc>)
 80013e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013e8:	4a1a      	ldr	r2, [pc, #104]	; (8001454 <HAL_UART_MspInit+0xbc>)
 80013ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013ee:	6593      	str	r3, [r2, #88]	; 0x58
 80013f0:	4b18      	ldr	r3, [pc, #96]	; (8001454 <HAL_UART_MspInit+0xbc>)
 80013f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f8:	60fb      	str	r3, [r7, #12]
 80013fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013fc:	4b15      	ldr	r3, [pc, #84]	; (8001454 <HAL_UART_MspInit+0xbc>)
 80013fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001400:	4a14      	ldr	r2, [pc, #80]	; (8001454 <HAL_UART_MspInit+0xbc>)
 8001402:	f043 0301 	orr.w	r3, r3, #1
 8001406:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001408:	4b12      	ldr	r3, [pc, #72]	; (8001454 <HAL_UART_MspInit+0xbc>)
 800140a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800140c:	f003 0301 	and.w	r3, r3, #1
 8001410:	60bb      	str	r3, [r7, #8]
 8001412:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001414:	230c      	movs	r3, #12
 8001416:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001418:	2302      	movs	r3, #2
 800141a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141c:	2300      	movs	r3, #0
 800141e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001420:	2300      	movs	r3, #0
 8001422:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001424:	2307      	movs	r3, #7
 8001426:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001428:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800142c:	4619      	mov	r1, r3
 800142e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001432:	f002 fab5 	bl	80039a0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001436:	2200      	movs	r2, #0
 8001438:	2100      	movs	r1, #0
 800143a:	2026      	movs	r0, #38	; 0x26
 800143c:	f002 f9bb 	bl	80037b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001440:	2026      	movs	r0, #38	; 0x26
 8001442:	f002 f9d2 	bl	80037ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001446:	bf00      	nop
 8001448:	3778      	adds	r7, #120	; 0x78
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	40004400 	.word	0x40004400
 8001454:	40021000 	.word	0x40021000

08001458 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 800145c:	e7fe      	b.n	800145c <NMI_Handler+0x4>

0800145e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800145e:	b480      	push	{r7}
 8001460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001462:	e7fe      	b.n	8001462 <HardFault_Handler+0x4>

08001464 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001468:	e7fe      	b.n	8001468 <MemManage_Handler+0x4>

0800146a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800146a:	b480      	push	{r7}
 800146c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800146e:	e7fe      	b.n	800146e <BusFault_Handler+0x4>

08001470 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001474:	e7fe      	b.n	8001474 <UsageFault_Handler+0x4>

08001476 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001476:	b480      	push	{r7}
 8001478:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800147a:	bf00      	nop
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr

08001484 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001488:	bf00      	nop
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr

08001492 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001492:	b480      	push	{r7}
 8001494:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001496:	bf00      	nop
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr

080014a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014a4:	f000 f972 	bl	800178c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014a8:	bf00      	nop
 80014aa:	bd80      	pop	{r7, pc}

080014ac <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80014b0:	4802      	ldr	r0, [pc, #8]	; (80014bc <ADC1_2_IRQHandler+0x10>)
 80014b2:	f000 ff41 	bl	8002338 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	20000128 	.word	0x20000128

080014c0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80014c4:	4802      	ldr	r0, [pc, #8]	; (80014d0 <USART2_IRQHandler+0x10>)
 80014c6:	f005 f861 	bl	800658c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80014ca:	bf00      	nop
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	2000022c 	.word	0x2000022c

080014d4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 80014d8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80014dc:	f002 fc14 	bl	8003d08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80014e0:	bf00      	nop
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
	return 1;
 80014e8:	2301      	movs	r3, #1
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <_kill>:

int _kill(int pid, int sig)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80014fe:	f006 ff83 	bl	8008408 <__errno>
 8001502:	4603      	mov	r3, r0
 8001504:	2216      	movs	r2, #22
 8001506:	601a      	str	r2, [r3, #0]
	return -1;
 8001508:	f04f 33ff 	mov.w	r3, #4294967295
}
 800150c:	4618      	mov	r0, r3
 800150e:	3708      	adds	r7, #8
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}

08001514 <_exit>:

void _exit (int status)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800151c:	f04f 31ff 	mov.w	r1, #4294967295
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f7ff ffe7 	bl	80014f4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001526:	e7fe      	b.n	8001526 <_exit+0x12>

08001528 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b086      	sub	sp, #24
 800152c:	af00      	add	r7, sp, #0
 800152e:	60f8      	str	r0, [r7, #12]
 8001530:	60b9      	str	r1, [r7, #8]
 8001532:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001534:	2300      	movs	r3, #0
 8001536:	617b      	str	r3, [r7, #20]
 8001538:	e00a      	b.n	8001550 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800153a:	f3af 8000 	nop.w
 800153e:	4601      	mov	r1, r0
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	1c5a      	adds	r2, r3, #1
 8001544:	60ba      	str	r2, [r7, #8]
 8001546:	b2ca      	uxtb	r2, r1
 8001548:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	3301      	adds	r3, #1
 800154e:	617b      	str	r3, [r7, #20]
 8001550:	697a      	ldr	r2, [r7, #20]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	429a      	cmp	r2, r3
 8001556:	dbf0      	blt.n	800153a <_read+0x12>
	}

return len;
 8001558:	687b      	ldr	r3, [r7, #4]
}
 800155a:	4618      	mov	r0, r3
 800155c:	3718      	adds	r7, #24
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001562:	b580      	push	{r7, lr}
 8001564:	b086      	sub	sp, #24
 8001566:	af00      	add	r7, sp, #0
 8001568:	60f8      	str	r0, [r7, #12]
 800156a:	60b9      	str	r1, [r7, #8]
 800156c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800156e:	2300      	movs	r3, #0
 8001570:	617b      	str	r3, [r7, #20]
 8001572:	e009      	b.n	8001588 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	1c5a      	adds	r2, r3, #1
 8001578:	60ba      	str	r2, [r7, #8]
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	4618      	mov	r0, r3
 800157e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	3301      	adds	r3, #1
 8001586:	617b      	str	r3, [r7, #20]
 8001588:	697a      	ldr	r2, [r7, #20]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	429a      	cmp	r2, r3
 800158e:	dbf1      	blt.n	8001574 <_write+0x12>
	}
	return len;
 8001590:	687b      	ldr	r3, [r7, #4]
}
 8001592:	4618      	mov	r0, r3
 8001594:	3718      	adds	r7, #24
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <_close>:

int _close(int file)
{
 800159a:	b480      	push	{r7}
 800159c:	b083      	sub	sp, #12
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
	return -1;
 80015a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr

080015b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015b2:	b480      	push	{r7}
 80015b4:	b083      	sub	sp, #12
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
 80015ba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015c2:	605a      	str	r2, [r3, #4]
	return 0;
 80015c4:	2300      	movs	r3, #0
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr

080015d2 <_isatty>:

int _isatty(int file)
{
 80015d2:	b480      	push	{r7}
 80015d4:	b083      	sub	sp, #12
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]
	return 1;
 80015da:	2301      	movs	r3, #1
}
 80015dc:	4618      	mov	r0, r3
 80015de:	370c      	adds	r7, #12
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr

080015e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b085      	sub	sp, #20
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	60b9      	str	r1, [r7, #8]
 80015f2:	607a      	str	r2, [r7, #4]
	return 0;
 80015f4:	2300      	movs	r3, #0
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3714      	adds	r7, #20
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
	...

08001604 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b086      	sub	sp, #24
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800160c:	4a14      	ldr	r2, [pc, #80]	; (8001660 <_sbrk+0x5c>)
 800160e:	4b15      	ldr	r3, [pc, #84]	; (8001664 <_sbrk+0x60>)
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001618:	4b13      	ldr	r3, [pc, #76]	; (8001668 <_sbrk+0x64>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d102      	bne.n	8001626 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001620:	4b11      	ldr	r3, [pc, #68]	; (8001668 <_sbrk+0x64>)
 8001622:	4a12      	ldr	r2, [pc, #72]	; (800166c <_sbrk+0x68>)
 8001624:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001626:	4b10      	ldr	r3, [pc, #64]	; (8001668 <_sbrk+0x64>)
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4413      	add	r3, r2
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	429a      	cmp	r2, r3
 8001632:	d207      	bcs.n	8001644 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001634:	f006 fee8 	bl	8008408 <__errno>
 8001638:	4603      	mov	r3, r0
 800163a:	220c      	movs	r2, #12
 800163c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800163e:	f04f 33ff 	mov.w	r3, #4294967295
 8001642:	e009      	b.n	8001658 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001644:	4b08      	ldr	r3, [pc, #32]	; (8001668 <_sbrk+0x64>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800164a:	4b07      	ldr	r3, [pc, #28]	; (8001668 <_sbrk+0x64>)
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4413      	add	r3, r2
 8001652:	4a05      	ldr	r2, [pc, #20]	; (8001668 <_sbrk+0x64>)
 8001654:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001656:	68fb      	ldr	r3, [r7, #12]
}
 8001658:	4618      	mov	r0, r3
 800165a:	3718      	adds	r7, #24
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	20020000 	.word	0x20020000
 8001664:	00000400 	.word	0x00000400
 8001668:	20000314 	.word	0x20000314
 800166c:	20000330 	.word	0x20000330

08001670 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001674:	4b06      	ldr	r3, [pc, #24]	; (8001690 <SystemInit+0x20>)
 8001676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800167a:	4a05      	ldr	r2, [pc, #20]	; (8001690 <SystemInit+0x20>)
 800167c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001680:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001684:	bf00      	nop
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	e000ed00 	.word	0xe000ed00

08001694 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001694:	480d      	ldr	r0, [pc, #52]	; (80016cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001696:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001698:	480d      	ldr	r0, [pc, #52]	; (80016d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800169a:	490e      	ldr	r1, [pc, #56]	; (80016d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800169c:	4a0e      	ldr	r2, [pc, #56]	; (80016d8 <LoopForever+0xe>)
  movs r3, #0
 800169e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80016a0:	e002      	b.n	80016a8 <LoopCopyDataInit>

080016a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016a6:	3304      	adds	r3, #4

080016a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016ac:	d3f9      	bcc.n	80016a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016ae:	4a0b      	ldr	r2, [pc, #44]	; (80016dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80016b0:	4c0b      	ldr	r4, [pc, #44]	; (80016e0 <LoopForever+0x16>)
  movs r3, #0
 80016b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016b4:	e001      	b.n	80016ba <LoopFillZerobss>

080016b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016b8:	3204      	adds	r2, #4

080016ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016bc:	d3fb      	bcc.n	80016b6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80016be:	f7ff ffd7 	bl	8001670 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016c2:	f006 fea7 	bl	8008414 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80016c6:	f7fe ffd1 	bl	800066c <main>

080016ca <LoopForever>:

LoopForever:
    b LoopForever
 80016ca:	e7fe      	b.n	80016ca <LoopForever>
  ldr   r0, =_estack
 80016cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80016d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016d4:	2000010c 	.word	0x2000010c
  ldr r2, =_sidata
 80016d8:	08009e44 	.word	0x08009e44
  ldr r2, =_sbss
 80016dc:	2000010c 	.word	0x2000010c
  ldr r4, =_ebss
 80016e0:	2000032c 	.word	0x2000032c

080016e4 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016e4:	e7fe      	b.n	80016e4 <ADC3_IRQHandler>

080016e6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016e6:	b580      	push	{r7, lr}
 80016e8:	b082      	sub	sp, #8
 80016ea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80016ec:	2300      	movs	r3, #0
 80016ee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016f0:	2003      	movs	r0, #3
 80016f2:	f002 f855 	bl	80037a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016f6:	2000      	movs	r0, #0
 80016f8:	f000 f80e 	bl	8001718 <HAL_InitTick>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d002      	beq.n	8001708 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	71fb      	strb	r3, [r7, #7]
 8001706:	e001      	b.n	800170c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001708:	f7ff fd38 	bl	800117c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800170c:	79fb      	ldrb	r3, [r7, #7]

}
 800170e:	4618      	mov	r0, r3
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
	...

08001718 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001720:	2300      	movs	r3, #0
 8001722:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001724:	4b16      	ldr	r3, [pc, #88]	; (8001780 <HAL_InitTick+0x68>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d022      	beq.n	8001772 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800172c:	4b15      	ldr	r3, [pc, #84]	; (8001784 <HAL_InitTick+0x6c>)
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	4b13      	ldr	r3, [pc, #76]	; (8001780 <HAL_InitTick+0x68>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001738:	fbb1 f3f3 	udiv	r3, r1, r3
 800173c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001740:	4618      	mov	r0, r3
 8001742:	f002 f860 	bl	8003806 <HAL_SYSTICK_Config>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d10f      	bne.n	800176c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2b0f      	cmp	r3, #15
 8001750:	d809      	bhi.n	8001766 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001752:	2200      	movs	r2, #0
 8001754:	6879      	ldr	r1, [r7, #4]
 8001756:	f04f 30ff 	mov.w	r0, #4294967295
 800175a:	f002 f82c 	bl	80037b6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800175e:	4a0a      	ldr	r2, [pc, #40]	; (8001788 <HAL_InitTick+0x70>)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6013      	str	r3, [r2, #0]
 8001764:	e007      	b.n	8001776 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	73fb      	strb	r3, [r7, #15]
 800176a:	e004      	b.n	8001776 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	73fb      	strb	r3, [r7, #15]
 8001770:	e001      	b.n	8001776 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001776:	7bfb      	ldrb	r3, [r7, #15]
}
 8001778:	4618      	mov	r0, r3
 800177a:	3710      	adds	r7, #16
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	200000a4 	.word	0x200000a4
 8001784:	2000009c 	.word	0x2000009c
 8001788:	200000a0 	.word	0x200000a0

0800178c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001790:	4b05      	ldr	r3, [pc, #20]	; (80017a8 <HAL_IncTick+0x1c>)
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	4b05      	ldr	r3, [pc, #20]	; (80017ac <HAL_IncTick+0x20>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4413      	add	r3, r2
 800179a:	4a03      	ldr	r2, [pc, #12]	; (80017a8 <HAL_IncTick+0x1c>)
 800179c:	6013      	str	r3, [r2, #0]
}
 800179e:	bf00      	nop
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr
 80017a8:	20000318 	.word	0x20000318
 80017ac:	200000a4 	.word	0x200000a4

080017b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  return uwTick;
 80017b4:	4b03      	ldr	r3, [pc, #12]	; (80017c4 <HAL_GetTick+0x14>)
 80017b6:	681b      	ldr	r3, [r3, #0]
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	20000318 	.word	0x20000318

080017c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017d0:	f7ff ffee 	bl	80017b0 <HAL_GetTick>
 80017d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017e0:	d004      	beq.n	80017ec <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80017e2:	4b09      	ldr	r3, [pc, #36]	; (8001808 <HAL_Delay+0x40>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	68fa      	ldr	r2, [r7, #12]
 80017e8:	4413      	add	r3, r2
 80017ea:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017ec:	bf00      	nop
 80017ee:	f7ff ffdf 	bl	80017b0 <HAL_GetTick>
 80017f2:	4602      	mov	r2, r0
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	68fa      	ldr	r2, [r7, #12]
 80017fa:	429a      	cmp	r2, r3
 80017fc:	d8f7      	bhi.n	80017ee <HAL_Delay+0x26>
  {
  }
}
 80017fe:	bf00      	nop
 8001800:	bf00      	nop
 8001802:	3710      	adds	r7, #16
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	200000a4 	.word	0x200000a4

0800180c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	431a      	orrs	r2, r3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	609a      	str	r2, [r3, #8]
}
 8001826:	bf00      	nop
 8001828:	370c      	adds	r7, #12
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr

08001832 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001832:	b480      	push	{r7}
 8001834:	b083      	sub	sp, #12
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
 800183a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	431a      	orrs	r2, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	609a      	str	r2, [r3, #8]
}
 800184c:	bf00      	nop
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001868:	4618      	mov	r0, r3
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001874:	b480      	push	{r7}
 8001876:	b087      	sub	sp, #28
 8001878:	af00      	add	r7, sp, #0
 800187a:	60f8      	str	r0, [r7, #12]
 800187c:	60b9      	str	r1, [r7, #8]
 800187e:	607a      	str	r2, [r7, #4]
 8001880:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	3360      	adds	r3, #96	; 0x60
 8001886:	461a      	mov	r2, r3
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	4413      	add	r3, r2
 800188e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	4b08      	ldr	r3, [pc, #32]	; (80018b8 <LL_ADC_SetOffset+0x44>)
 8001896:	4013      	ands	r3, r2
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800189e:	683a      	ldr	r2, [r7, #0]
 80018a0:	430a      	orrs	r2, r1
 80018a2:	4313      	orrs	r3, r2
 80018a4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80018ac:	bf00      	nop
 80018ae:	371c      	adds	r7, #28
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr
 80018b8:	03fff000 	.word	0x03fff000

080018bc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80018bc:	b480      	push	{r7}
 80018be:	b085      	sub	sp, #20
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	3360      	adds	r3, #96	; 0x60
 80018ca:	461a      	mov	r2, r3
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	4413      	add	r3, r2
 80018d2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3714      	adds	r7, #20
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b087      	sub	sp, #28
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	60f8      	str	r0, [r7, #12]
 80018f0:	60b9      	str	r1, [r7, #8]
 80018f2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	3360      	adds	r3, #96	; 0x60
 80018f8:	461a      	mov	r2, r3
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	4413      	add	r3, r2
 8001900:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	431a      	orrs	r2, r3
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001912:	bf00      	nop
 8001914:	371c      	adds	r7, #28
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr

0800191e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800191e:	b480      	push	{r7}
 8001920:	b087      	sub	sp, #28
 8001922:	af00      	add	r7, sp, #0
 8001924:	60f8      	str	r0, [r7, #12]
 8001926:	60b9      	str	r1, [r7, #8]
 8001928:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	3360      	adds	r3, #96	; 0x60
 800192e:	461a      	mov	r2, r3
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	4413      	add	r3, r2
 8001936:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	431a      	orrs	r2, r3
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001948:	bf00      	nop
 800194a:	371c      	adds	r7, #28
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001954:	b480      	push	{r7}
 8001956:	b087      	sub	sp, #28
 8001958:	af00      	add	r7, sp, #0
 800195a:	60f8      	str	r0, [r7, #12]
 800195c:	60b9      	str	r1, [r7, #8]
 800195e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	3360      	adds	r3, #96	; 0x60
 8001964:	461a      	mov	r2, r3
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	4413      	add	r3, r2
 800196c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	431a      	orrs	r2, r3
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800197e:	bf00      	nop
 8001980:	371c      	adds	r7, #28
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr

0800198a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800198a:	b480      	push	{r7}
 800198c:	b083      	sub	sp, #12
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
 8001992:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	695b      	ldr	r3, [r3, #20]
 8001998:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	431a      	orrs	r2, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	615a      	str	r2, [r3, #20]
}
 80019a4:	bf00      	nop
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d101      	bne.n	80019c8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80019c4:	2301      	movs	r3, #1
 80019c6:	e000      	b.n	80019ca <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80019c8:	2300      	movs	r3, #0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr

080019d6 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80019d6:	b480      	push	{r7}
 80019d8:	b087      	sub	sp, #28
 80019da:	af00      	add	r7, sp, #0
 80019dc:	60f8      	str	r0, [r7, #12]
 80019de:	60b9      	str	r1, [r7, #8]
 80019e0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	3330      	adds	r3, #48	; 0x30
 80019e6:	461a      	mov	r2, r3
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	0a1b      	lsrs	r3, r3, #8
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	f003 030c 	and.w	r3, r3, #12
 80019f2:	4413      	add	r3, r2
 80019f4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	f003 031f 	and.w	r3, r3, #31
 8001a00:	211f      	movs	r1, #31
 8001a02:	fa01 f303 	lsl.w	r3, r1, r3
 8001a06:	43db      	mvns	r3, r3
 8001a08:	401a      	ands	r2, r3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	0e9b      	lsrs	r3, r3, #26
 8001a0e:	f003 011f 	and.w	r1, r3, #31
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	f003 031f 	and.w	r3, r3, #31
 8001a18:	fa01 f303 	lsl.w	r3, r1, r3
 8001a1c:	431a      	orrs	r2, r3
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001a22:	bf00      	nop
 8001a24:	371c      	adds	r7, #28
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr

08001a2e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001a2e:	b480      	push	{r7}
 8001a30:	b083      	sub	sp, #12
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a3a:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d101      	bne.n	8001a46 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001a42:	2301      	movs	r3, #1
 8001a44:	e000      	b.n	8001a48 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001a46:	2300      	movs	r3, #0
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b087      	sub	sp, #28
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	60b9      	str	r1, [r7, #8]
 8001a5e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	3314      	adds	r3, #20
 8001a64:	461a      	mov	r2, r3
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	0e5b      	lsrs	r3, r3, #25
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	f003 0304 	and.w	r3, r3, #4
 8001a70:	4413      	add	r3, r2
 8001a72:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	0d1b      	lsrs	r3, r3, #20
 8001a7c:	f003 031f 	and.w	r3, r3, #31
 8001a80:	2107      	movs	r1, #7
 8001a82:	fa01 f303 	lsl.w	r3, r1, r3
 8001a86:	43db      	mvns	r3, r3
 8001a88:	401a      	ands	r2, r3
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	0d1b      	lsrs	r3, r3, #20
 8001a8e:	f003 031f 	and.w	r3, r3, #31
 8001a92:	6879      	ldr	r1, [r7, #4]
 8001a94:	fa01 f303 	lsl.w	r3, r1, r3
 8001a98:	431a      	orrs	r2, r3
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001a9e:	bf00      	nop
 8001aa0:	371c      	adds	r7, #28
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
	...

08001aac <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b085      	sub	sp, #20
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	60f8      	str	r0, [r7, #12]
 8001ab4:	60b9      	str	r1, [r7, #8]
 8001ab6:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	4a0f      	ldr	r2, [pc, #60]	; (8001af8 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d10a      	bne.n	8001ad6 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001acc:	431a      	orrs	r2, r3
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8001ad4:	e00a      	b.n	8001aec <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ae2:	43db      	mvns	r3, r3
 8001ae4:	401a      	ands	r2, r3
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8001aec:	bf00      	nop
 8001aee:	3714      	adds	r7, #20
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr
 8001af8:	407f0000 	.word	0x407f0000

08001afc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	f003 031f 	and.w	r3, r3, #31
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	370c      	adds	r7, #12
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr

08001b34 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001b44:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	6093      	str	r3, [r2, #8]
}
 8001b4c:	bf00      	nop
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001b68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b6c:	d101      	bne.n	8001b72 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e000      	b.n	8001b74 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001b72:	2300      	movs	r3, #0
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr

08001b80 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001b90:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b94:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001b9c:	bf00      	nop
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001bbc:	d101      	bne.n	8001bc2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e000      	b.n	8001bc4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001bc2:	2300      	movs	r3, #0
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001be0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001be4:	f043 0201 	orr.w	r2, r3, #1
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001bec:	bf00      	nop
 8001bee:	370c      	adds	r7, #12
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c08:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c0c:	f043 0202 	orr.w	r2, r3, #2
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001c14:	bf00      	nop
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	f003 0301 	and.w	r3, r3, #1
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d101      	bne.n	8001c38 <LL_ADC_IsEnabled+0x18>
 8001c34:	2301      	movs	r3, #1
 8001c36:	e000      	b.n	8001c3a <LL_ADC_IsEnabled+0x1a>
 8001c38:	2300      	movs	r3, #0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr

08001c46 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001c46:	b480      	push	{r7}
 8001c48:	b083      	sub	sp, #12
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d101      	bne.n	8001c5e <LL_ADC_IsDisableOngoing+0x18>
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e000      	b.n	8001c60 <LL_ADC_IsDisableOngoing+0x1a>
 8001c5e:	2300      	movs	r3, #0
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c7c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c80:	f043 0204 	orr.w	r2, r3, #4
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001c88:	bf00      	nop
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	f003 0304 	and.w	r3, r3, #4
 8001ca4:	2b04      	cmp	r3, #4
 8001ca6:	d101      	bne.n	8001cac <LL_ADC_REG_IsConversionOngoing+0x18>
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e000      	b.n	8001cae <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr

08001cba <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	b083      	sub	sp, #12
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	f003 0308 	and.w	r3, r3, #8
 8001cca:	2b08      	cmp	r3, #8
 8001ccc:	d101      	bne.n	8001cd2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e000      	b.n	8001cd4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001cd2:	2300      	movs	r3, #0
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ce0:	b590      	push	{r4, r7, lr}
 8001ce2:	b089      	sub	sp, #36	; 0x24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001cec:	2300      	movs	r3, #0
 8001cee:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d101      	bne.n	8001cfa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e1af      	b.n	800205a <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	695b      	ldr	r3, [r3, #20]
 8001cfe:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d109      	bne.n	8001d1c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f7ff fa5b 	bl	80011c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2200      	movs	r2, #0
 8001d12:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2200      	movs	r2, #0
 8001d18:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7ff ff19 	bl	8001b58 <LL_ADC_IsDeepPowerDownEnabled>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d004      	beq.n	8001d36 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7ff feff 	bl	8001b34 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7ff ff34 	bl	8001ba8 <LL_ADC_IsInternalRegulatorEnabled>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d115      	bne.n	8001d72 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7ff ff18 	bl	8001b80 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d50:	4b9f      	ldr	r3, [pc, #636]	; (8001fd0 <HAL_ADC_Init+0x2f0>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	099b      	lsrs	r3, r3, #6
 8001d56:	4a9f      	ldr	r2, [pc, #636]	; (8001fd4 <HAL_ADC_Init+0x2f4>)
 8001d58:	fba2 2303 	umull	r2, r3, r2, r3
 8001d5c:	099b      	lsrs	r3, r3, #6
 8001d5e:	3301      	adds	r3, #1
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001d64:	e002      	b.n	8001d6c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	3b01      	subs	r3, #1
 8001d6a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d1f9      	bne.n	8001d66 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7ff ff16 	bl	8001ba8 <LL_ADC_IsInternalRegulatorEnabled>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d10d      	bne.n	8001d9e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d86:	f043 0210 	orr.w	r2, r3, #16
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d92:	f043 0201 	orr.w	r2, r3, #1
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7ff ff76 	bl	8001c94 <LL_ADC_REG_IsConversionOngoing>
 8001da8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dae:	f003 0310 	and.w	r3, r3, #16
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	f040 8148 	bne.w	8002048 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	f040 8144 	bne.w	8002048 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dc4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001dc8:	f043 0202 	orr.w	r2, r3, #2
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7ff ff23 	bl	8001c20 <LL_ADC_IsEnabled>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d141      	bne.n	8001e64 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001de8:	d004      	beq.n	8001df4 <HAL_ADC_Init+0x114>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a7a      	ldr	r2, [pc, #488]	; (8001fd8 <HAL_ADC_Init+0x2f8>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d10f      	bne.n	8001e14 <HAL_ADC_Init+0x134>
 8001df4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001df8:	f7ff ff12 	bl	8001c20 <LL_ADC_IsEnabled>
 8001dfc:	4604      	mov	r4, r0
 8001dfe:	4876      	ldr	r0, [pc, #472]	; (8001fd8 <HAL_ADC_Init+0x2f8>)
 8001e00:	f7ff ff0e 	bl	8001c20 <LL_ADC_IsEnabled>
 8001e04:	4603      	mov	r3, r0
 8001e06:	4323      	orrs	r3, r4
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	bf0c      	ite	eq
 8001e0c:	2301      	moveq	r3, #1
 8001e0e:	2300      	movne	r3, #0
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	e012      	b.n	8001e3a <HAL_ADC_Init+0x15a>
 8001e14:	4871      	ldr	r0, [pc, #452]	; (8001fdc <HAL_ADC_Init+0x2fc>)
 8001e16:	f7ff ff03 	bl	8001c20 <LL_ADC_IsEnabled>
 8001e1a:	4604      	mov	r4, r0
 8001e1c:	4870      	ldr	r0, [pc, #448]	; (8001fe0 <HAL_ADC_Init+0x300>)
 8001e1e:	f7ff feff 	bl	8001c20 <LL_ADC_IsEnabled>
 8001e22:	4603      	mov	r3, r0
 8001e24:	431c      	orrs	r4, r3
 8001e26:	486f      	ldr	r0, [pc, #444]	; (8001fe4 <HAL_ADC_Init+0x304>)
 8001e28:	f7ff fefa 	bl	8001c20 <LL_ADC_IsEnabled>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	4323      	orrs	r3, r4
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	bf0c      	ite	eq
 8001e34:	2301      	moveq	r3, #1
 8001e36:	2300      	movne	r3, #0
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d012      	beq.n	8001e64 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e46:	d004      	beq.n	8001e52 <HAL_ADC_Init+0x172>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a62      	ldr	r2, [pc, #392]	; (8001fd8 <HAL_ADC_Init+0x2f8>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d101      	bne.n	8001e56 <HAL_ADC_Init+0x176>
 8001e52:	4a65      	ldr	r2, [pc, #404]	; (8001fe8 <HAL_ADC_Init+0x308>)
 8001e54:	e000      	b.n	8001e58 <HAL_ADC_Init+0x178>
 8001e56:	4a65      	ldr	r2, [pc, #404]	; (8001fec <HAL_ADC_Init+0x30c>)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	4610      	mov	r0, r2
 8001e60:	f7ff fcd4 	bl	800180c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	7f5b      	ldrb	r3, [r3, #29]
 8001e68:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e6e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001e74:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001e7a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e82:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e84:	4313      	orrs	r3, r2
 8001e86:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d106      	bne.n	8001ea0 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e96:	3b01      	subs	r3, #1
 8001e98:	045b      	lsls	r3, r3, #17
 8001e9a:	69ba      	ldr	r2, [r7, #24]
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d009      	beq.n	8001ebc <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eac:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001eb6:	69ba      	ldr	r2, [r7, #24]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	68da      	ldr	r2, [r3, #12]
 8001ec2:	4b4b      	ldr	r3, [pc, #300]	; (8001ff0 <HAL_ADC_Init+0x310>)
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	6812      	ldr	r2, [r2, #0]
 8001eca:	69b9      	ldr	r1, [r7, #24]
 8001ecc:	430b      	orrs	r3, r1
 8001ece:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	691b      	ldr	r3, [r3, #16]
 8001ed6:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	430a      	orrs	r2, r1
 8001ee4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7ff fed2 	bl	8001c94 <LL_ADC_REG_IsConversionOngoing>
 8001ef0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7ff fedf 	bl	8001cba <LL_ADC_INJ_IsConversionOngoing>
 8001efc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d17f      	bne.n	8002004 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d17c      	bne.n	8002004 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f0e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001f16:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	68db      	ldr	r3, [r3, #12]
 8001f22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f26:	f023 0302 	bic.w	r3, r3, #2
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	6812      	ldr	r2, [r2, #0]
 8001f2e:	69b9      	ldr	r1, [r7, #24]
 8001f30:	430b      	orrs	r3, r1
 8001f32:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	691b      	ldr	r3, [r3, #16]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d017      	beq.n	8001f6c <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	691a      	ldr	r2, [r3, #16]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001f4a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001f54:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001f58:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f5c:	687a      	ldr	r2, [r7, #4]
 8001f5e:	6911      	ldr	r1, [r2, #16]
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	6812      	ldr	r2, [r2, #0]
 8001f64:	430b      	orrs	r3, r1
 8001f66:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001f6a:	e013      	b.n	8001f94 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	691a      	ldr	r2, [r3, #16]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001f7a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	6812      	ldr	r2, [r2, #0]
 8001f88:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001f8c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f90:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d12a      	bne.n	8001ff4 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	691b      	ldr	r3, [r3, #16]
 8001fa4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001fa8:	f023 0304 	bic.w	r3, r3, #4
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001fb0:	687a      	ldr	r2, [r7, #4]
 8001fb2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001fb4:	4311      	orrs	r1, r2
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001fba:	4311      	orrs	r1, r2
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001fc0:	430a      	orrs	r2, r1
 8001fc2:	431a      	orrs	r2, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f042 0201 	orr.w	r2, r2, #1
 8001fcc:	611a      	str	r2, [r3, #16]
 8001fce:	e019      	b.n	8002004 <HAL_ADC_Init+0x324>
 8001fd0:	2000009c 	.word	0x2000009c
 8001fd4:	053e2d63 	.word	0x053e2d63
 8001fd8:	50000100 	.word	0x50000100
 8001fdc:	50000400 	.word	0x50000400
 8001fe0:	50000500 	.word	0x50000500
 8001fe4:	50000600 	.word	0x50000600
 8001fe8:	50000300 	.word	0x50000300
 8001fec:	50000700 	.word	0x50000700
 8001ff0:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	691a      	ldr	r2, [r3, #16]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f022 0201 	bic.w	r2, r2, #1
 8002002:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	695b      	ldr	r3, [r3, #20]
 8002008:	2b01      	cmp	r3, #1
 800200a:	d10c      	bne.n	8002026 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002012:	f023 010f 	bic.w	r1, r3, #15
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6a1b      	ldr	r3, [r3, #32]
 800201a:	1e5a      	subs	r2, r3, #1
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	430a      	orrs	r2, r1
 8002022:	631a      	str	r2, [r3, #48]	; 0x30
 8002024:	e007      	b.n	8002036 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f022 020f 	bic.w	r2, r2, #15
 8002034:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800203a:	f023 0303 	bic.w	r3, r3, #3
 800203e:	f043 0201 	orr.w	r2, r3, #1
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	65da      	str	r2, [r3, #92]	; 0x5c
 8002046:	e007      	b.n	8002058 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800204c:	f043 0210 	orr.w	r2, r3, #16
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002058:	7ffb      	ldrb	r3, [r7, #31]
}
 800205a:	4618      	mov	r0, r3
 800205c:	3724      	adds	r7, #36	; 0x24
 800205e:	46bd      	mov	sp, r7
 8002060:	bd90      	pop	{r4, r7, pc}
 8002062:	bf00      	nop

08002064 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b086      	sub	sp, #24
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002074:	d004      	beq.n	8002080 <HAL_ADC_Start_IT+0x1c>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a93      	ldr	r2, [pc, #588]	; (80022c8 <HAL_ADC_Start_IT+0x264>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d101      	bne.n	8002084 <HAL_ADC_Start_IT+0x20>
 8002080:	4b92      	ldr	r3, [pc, #584]	; (80022cc <HAL_ADC_Start_IT+0x268>)
 8002082:	e000      	b.n	8002086 <HAL_ADC_Start_IT+0x22>
 8002084:	4b92      	ldr	r3, [pc, #584]	; (80022d0 <HAL_ADC_Start_IT+0x26c>)
 8002086:	4618      	mov	r0, r3
 8002088:	f7ff fd38 	bl	8001afc <LL_ADC_GetMultimode>
 800208c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4618      	mov	r0, r3
 8002094:	f7ff fdfe 	bl	8001c94 <LL_ADC_REG_IsConversionOngoing>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	f040 8134 	bne.w	8002308 <HAL_ADC_Start_IT+0x2a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d101      	bne.n	80020ae <HAL_ADC_Start_IT+0x4a>
 80020aa:	2302      	movs	r3, #2
 80020ac:	e131      	b.n	8002312 <HAL_ADC_Start_IT+0x2ae>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2201      	movs	r2, #1
 80020b2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f000 fff2 	bl	80030a0 <ADC_Enable>
 80020bc:	4603      	mov	r3, r0
 80020be:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80020c0:	7dfb      	ldrb	r3, [r7, #23]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	f040 811b 	bne.w	80022fe <HAL_ADC_Start_IT+0x29a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020cc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80020d0:	f023 0301 	bic.w	r3, r3, #1
 80020d4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a79      	ldr	r2, [pc, #484]	; (80022c8 <HAL_ADC_Start_IT+0x264>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d009      	beq.n	80020fa <HAL_ADC_Start_IT+0x96>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a7a      	ldr	r2, [pc, #488]	; (80022d4 <HAL_ADC_Start_IT+0x270>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d002      	beq.n	80020f6 <HAL_ADC_Start_IT+0x92>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	e003      	b.n	80020fe <HAL_ADC_Start_IT+0x9a>
 80020f6:	4b78      	ldr	r3, [pc, #480]	; (80022d8 <HAL_ADC_Start_IT+0x274>)
 80020f8:	e001      	b.n	80020fe <HAL_ADC_Start_IT+0x9a>
 80020fa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	6812      	ldr	r2, [r2, #0]
 8002102:	4293      	cmp	r3, r2
 8002104:	d002      	beq.n	800210c <HAL_ADC_Start_IT+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d105      	bne.n	8002118 <HAL_ADC_Start_IT+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002110:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800211c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d006      	beq.n	8002132 <HAL_ADC_Start_IT+0xce>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002128:	f023 0206 	bic.w	r2, r3, #6
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	661a      	str	r2, [r3, #96]	; 0x60
 8002130:	e002      	b.n	8002138 <HAL_ADC_Start_IT+0xd4>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	221c      	movs	r2, #28
 800213e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2200      	movs	r2, #0
 8002144:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	685a      	ldr	r2, [r3, #4]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f022 021c 	bic.w	r2, r2, #28
 8002156:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	699b      	ldr	r3, [r3, #24]
 800215c:	2b08      	cmp	r3, #8
 800215e:	d108      	bne.n	8002172 <HAL_ADC_Start_IT+0x10e>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	685a      	ldr	r2, [r3, #4]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f042 0208 	orr.w	r2, r2, #8
 800216e:	605a      	str	r2, [r3, #4]
          break;
 8002170:	e008      	b.n	8002184 <HAL_ADC_Start_IT+0x120>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	685a      	ldr	r2, [r3, #4]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f042 0204 	orr.w	r2, r2, #4
 8002180:	605a      	str	r2, [r3, #4]
          break;
 8002182:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002188:	2b00      	cmp	r3, #0
 800218a:	d107      	bne.n	800219c <HAL_ADC_Start_IT+0x138>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	685a      	ldr	r2, [r3, #4]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f042 0210 	orr.w	r2, r2, #16
 800219a:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a49      	ldr	r2, [pc, #292]	; (80022c8 <HAL_ADC_Start_IT+0x264>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d009      	beq.n	80021ba <HAL_ADC_Start_IT+0x156>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a4a      	ldr	r2, [pc, #296]	; (80022d4 <HAL_ADC_Start_IT+0x270>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d002      	beq.n	80021b6 <HAL_ADC_Start_IT+0x152>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	e003      	b.n	80021be <HAL_ADC_Start_IT+0x15a>
 80021b6:	4b48      	ldr	r3, [pc, #288]	; (80022d8 <HAL_ADC_Start_IT+0x274>)
 80021b8:	e001      	b.n	80021be <HAL_ADC_Start_IT+0x15a>
 80021ba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	6812      	ldr	r2, [r2, #0]
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d008      	beq.n	80021d8 <HAL_ADC_Start_IT+0x174>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d005      	beq.n	80021d8 <HAL_ADC_Start_IT+0x174>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	2b05      	cmp	r3, #5
 80021d0:	d002      	beq.n	80021d8 <HAL_ADC_Start_IT+0x174>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	2b09      	cmp	r3, #9
 80021d6:	d13b      	bne.n	8002250 <HAL_ADC_Start_IT+0x1ec>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	68db      	ldr	r3, [r3, #12]
 80021de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d02d      	beq.n	8002242 <HAL_ADC_Start_IT+0x1de>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ea:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80021ee:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	699b      	ldr	r3, [r3, #24]
 80021fa:	2b08      	cmp	r3, #8
 80021fc:	d110      	bne.n	8002220 <HAL_ADC_Start_IT+0x1bc>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	685a      	ldr	r2, [r3, #4]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f022 0220 	bic.w	r2, r2, #32
 800220c:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	685a      	ldr	r2, [r3, #4]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800221c:	605a      	str	r2, [r3, #4]
              break;
 800221e:	e011      	b.n	8002244 <HAL_ADC_Start_IT+0x1e0>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	685a      	ldr	r2, [r3, #4]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800222e:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	685a      	ldr	r2, [r3, #4]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f042 0220 	orr.w	r2, r2, #32
 800223e:	605a      	str	r2, [r3, #4]
              break;
 8002240:	e000      	b.n	8002244 <HAL_ADC_Start_IT+0x1e0>
          }
        }
 8002242:	bf00      	nop

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4618      	mov	r0, r3
 800224a:	f7ff fd0f 	bl	8001c6c <LL_ADC_REG_StartConversion>
 800224e:	e05f      	b.n	8002310 <HAL_ADC_Start_IT+0x2ac>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002254:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a19      	ldr	r2, [pc, #100]	; (80022c8 <HAL_ADC_Start_IT+0x264>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d009      	beq.n	800227a <HAL_ADC_Start_IT+0x216>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a1a      	ldr	r2, [pc, #104]	; (80022d4 <HAL_ADC_Start_IT+0x270>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d002      	beq.n	8002276 <HAL_ADC_Start_IT+0x212>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	e003      	b.n	800227e <HAL_ADC_Start_IT+0x21a>
 8002276:	4b18      	ldr	r3, [pc, #96]	; (80022d8 <HAL_ADC_Start_IT+0x274>)
 8002278:	e001      	b.n	800227e <HAL_ADC_Start_IT+0x21a>
 800227a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800227e:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d040      	beq.n	800230e <HAL_ADC_Start_IT+0x2aa>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002290:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002294:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	65da      	str	r2, [r3, #92]	; 0x5c
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	699b      	ldr	r3, [r3, #24]
 80022a0:	2b08      	cmp	r3, #8
 80022a2:	d11b      	bne.n	80022dc <HAL_ADC_Start_IT+0x278>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	685a      	ldr	r2, [r3, #4]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f022 0220 	bic.w	r2, r2, #32
 80022b2:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	685a      	ldr	r2, [r3, #4]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022c2:	605a      	str	r2, [r3, #4]
              break;
 80022c4:	e024      	b.n	8002310 <HAL_ADC_Start_IT+0x2ac>
 80022c6:	bf00      	nop
 80022c8:	50000100 	.word	0x50000100
 80022cc:	50000300 	.word	0x50000300
 80022d0:	50000700 	.word	0x50000700
 80022d4:	50000500 	.word	0x50000500
 80022d8:	50000400 	.word	0x50000400
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	685a      	ldr	r2, [r3, #4]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022ea:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	685a      	ldr	r2, [r3, #4]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f042 0220 	orr.w	r2, r2, #32
 80022fa:	605a      	str	r2, [r3, #4]
              break;
 80022fc:	e008      	b.n	8002310 <HAL_ADC_Start_IT+0x2ac>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8002306:	e003      	b.n	8002310 <HAL_ADC_Start_IT+0x2ac>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002308:	2302      	movs	r3, #2
 800230a:	75fb      	strb	r3, [r7, #23]
 800230c:	e000      	b.n	8002310 <HAL_ADC_Start_IT+0x2ac>
        }
 800230e:	bf00      	nop
  }

  /* Return function status */
  return tmp_hal_status;
 8002310:	7dfb      	ldrb	r3, [r7, #23]
}
 8002312:	4618      	mov	r0, r3
 8002314:	3718      	adds	r7, #24
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop

0800231c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800232a:	4618      	mov	r0, r3
 800232c:	370c      	adds	r7, #12
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
	...

08002338 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b08a      	sub	sp, #40	; 0x28
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002340:	2300      	movs	r3, #0
 8002342:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800235c:	d004      	beq.n	8002368 <HAL_ADC_IRQHandler+0x30>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a8e      	ldr	r2, [pc, #568]	; (800259c <HAL_ADC_IRQHandler+0x264>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d101      	bne.n	800236c <HAL_ADC_IRQHandler+0x34>
 8002368:	4b8d      	ldr	r3, [pc, #564]	; (80025a0 <HAL_ADC_IRQHandler+0x268>)
 800236a:	e000      	b.n	800236e <HAL_ADC_IRQHandler+0x36>
 800236c:	4b8d      	ldr	r3, [pc, #564]	; (80025a4 <HAL_ADC_IRQHandler+0x26c>)
 800236e:	4618      	mov	r0, r3
 8002370:	f7ff fbc4 	bl	8001afc <LL_ADC_GetMultimode>
 8002374:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	f003 0302 	and.w	r3, r3, #2
 800237c:	2b00      	cmp	r3, #0
 800237e:	d017      	beq.n	80023b0 <HAL_ADC_IRQHandler+0x78>
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	f003 0302 	and.w	r3, r3, #2
 8002386:	2b00      	cmp	r3, #0
 8002388:	d012      	beq.n	80023b0 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800238e:	f003 0310 	and.w	r3, r3, #16
 8002392:	2b00      	cmp	r3, #0
 8002394:	d105      	bne.n	80023a2 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800239a:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f001 f81a 	bl	80033dc <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	2202      	movs	r2, #2
 80023ae:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	f003 0304 	and.w	r3, r3, #4
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d004      	beq.n	80023c4 <HAL_ADC_IRQHandler+0x8c>
 80023ba:	69bb      	ldr	r3, [r7, #24]
 80023bc:	f003 0304 	and.w	r3, r3, #4
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d10b      	bne.n	80023dc <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	f000 8094 	beq.w	80024f8 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	f003 0308 	and.w	r3, r3, #8
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	f000 808e 	beq.w	80024f8 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023e0:	f003 0310 	and.w	r3, r3, #16
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d105      	bne.n	80023f4 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ec:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4618      	mov	r0, r3
 80023fa:	f7ff fad9 	bl	80019b0 <LL_ADC_REG_IsTriggerSourceSWStart>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d072      	beq.n	80024ea <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a64      	ldr	r2, [pc, #400]	; (800259c <HAL_ADC_IRQHandler+0x264>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d009      	beq.n	8002422 <HAL_ADC_IRQHandler+0xea>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a65      	ldr	r2, [pc, #404]	; (80025a8 <HAL_ADC_IRQHandler+0x270>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d002      	beq.n	800241e <HAL_ADC_IRQHandler+0xe6>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	e003      	b.n	8002426 <HAL_ADC_IRQHandler+0xee>
 800241e:	4b63      	ldr	r3, [pc, #396]	; (80025ac <HAL_ADC_IRQHandler+0x274>)
 8002420:	e001      	b.n	8002426 <HAL_ADC_IRQHandler+0xee>
 8002422:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	6812      	ldr	r2, [r2, #0]
 800242a:	4293      	cmp	r3, r2
 800242c:	d008      	beq.n	8002440 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d005      	beq.n	8002440 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	2b05      	cmp	r3, #5
 8002438:	d002      	beq.n	8002440 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	2b09      	cmp	r3, #9
 800243e:	d104      	bne.n	800244a <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	623b      	str	r3, [r7, #32]
 8002448:	e014      	b.n	8002474 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a53      	ldr	r2, [pc, #332]	; (800259c <HAL_ADC_IRQHandler+0x264>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d009      	beq.n	8002468 <HAL_ADC_IRQHandler+0x130>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a53      	ldr	r2, [pc, #332]	; (80025a8 <HAL_ADC_IRQHandler+0x270>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d002      	beq.n	8002464 <HAL_ADC_IRQHandler+0x12c>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	e003      	b.n	800246c <HAL_ADC_IRQHandler+0x134>
 8002464:	4b51      	ldr	r3, [pc, #324]	; (80025ac <HAL_ADC_IRQHandler+0x274>)
 8002466:	e001      	b.n	800246c <HAL_ADC_IRQHandler+0x134>
 8002468:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800246c:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002474:	6a3b      	ldr	r3, [r7, #32]
 8002476:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d135      	bne.n	80024ea <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0308 	and.w	r3, r3, #8
 8002488:	2b08      	cmp	r3, #8
 800248a:	d12e      	bne.n	80024ea <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4618      	mov	r0, r3
 8002492:	f7ff fbff 	bl	8001c94 <LL_ADC_REG_IsConversionOngoing>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d11a      	bne.n	80024d2 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	685a      	ldr	r2, [r3, #4]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f022 020c 	bic.w	r2, r2, #12
 80024aa:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d112      	bne.n	80024ea <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024c8:	f043 0201 	orr.w	r2, r3, #1
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	65da      	str	r2, [r3, #92]	; 0x5c
 80024d0:	e00b      	b.n	80024ea <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024d6:	f043 0210 	orr.w	r2, r3, #16
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024e2:	f043 0201 	orr.w	r2, r3, #1
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f7fe fe14 	bl	8001118 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	220c      	movs	r2, #12
 80024f6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	f003 0320 	and.w	r3, r3, #32
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d004      	beq.n	800250c <HAL_ADC_IRQHandler+0x1d4>
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	f003 0320 	and.w	r3, r3, #32
 8002508:	2b00      	cmp	r3, #0
 800250a:	d10b      	bne.n	8002524 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002512:	2b00      	cmp	r3, #0
 8002514:	f000 80b3 	beq.w	800267e <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800251e:	2b00      	cmp	r3, #0
 8002520:	f000 80ad 	beq.w	800267e <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002528:	f003 0310 	and.w	r3, r3, #16
 800252c:	2b00      	cmp	r3, #0
 800252e:	d105      	bne.n	800253c <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002534:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4618      	mov	r0, r3
 8002542:	f7ff fa74 	bl	8001a2e <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002546:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4618      	mov	r0, r3
 800254e:	f7ff fa2f 	bl	80019b0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002552:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a10      	ldr	r2, [pc, #64]	; (800259c <HAL_ADC_IRQHandler+0x264>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d009      	beq.n	8002572 <HAL_ADC_IRQHandler+0x23a>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a11      	ldr	r2, [pc, #68]	; (80025a8 <HAL_ADC_IRQHandler+0x270>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d002      	beq.n	800256e <HAL_ADC_IRQHandler+0x236>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	e003      	b.n	8002576 <HAL_ADC_IRQHandler+0x23e>
 800256e:	4b0f      	ldr	r3, [pc, #60]	; (80025ac <HAL_ADC_IRQHandler+0x274>)
 8002570:	e001      	b.n	8002576 <HAL_ADC_IRQHandler+0x23e>
 8002572:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	6812      	ldr	r2, [r2, #0]
 800257a:	4293      	cmp	r3, r2
 800257c:	d008      	beq.n	8002590 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d005      	beq.n	8002590 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	2b06      	cmp	r3, #6
 8002588:	d002      	beq.n	8002590 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	2b07      	cmp	r3, #7
 800258e:	d10f      	bne.n	80025b0 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	623b      	str	r3, [r7, #32]
 8002598:	e01f      	b.n	80025da <HAL_ADC_IRQHandler+0x2a2>
 800259a:	bf00      	nop
 800259c:	50000100 	.word	0x50000100
 80025a0:	50000300 	.word	0x50000300
 80025a4:	50000700 	.word	0x50000700
 80025a8:	50000500 	.word	0x50000500
 80025ac:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a8b      	ldr	r2, [pc, #556]	; (80027e4 <HAL_ADC_IRQHandler+0x4ac>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d009      	beq.n	80025ce <HAL_ADC_IRQHandler+0x296>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a8a      	ldr	r2, [pc, #552]	; (80027e8 <HAL_ADC_IRQHandler+0x4b0>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d002      	beq.n	80025ca <HAL_ADC_IRQHandler+0x292>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	e003      	b.n	80025d2 <HAL_ADC_IRQHandler+0x29a>
 80025ca:	4b88      	ldr	r3, [pc, #544]	; (80027ec <HAL_ADC_IRQHandler+0x4b4>)
 80025cc:	e001      	b.n	80025d2 <HAL_ADC_IRQHandler+0x29a>
 80025ce:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80025d2:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d047      	beq.n	8002670 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80025e0:	6a3b      	ldr	r3, [r7, #32]
 80025e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d007      	beq.n	80025fa <HAL_ADC_IRQHandler+0x2c2>
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d03f      	beq.n	8002670 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80025f0:	6a3b      	ldr	r3, [r7, #32]
 80025f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d13a      	bne.n	8002670 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002604:	2b40      	cmp	r3, #64	; 0x40
 8002606:	d133      	bne.n	8002670 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002608:	6a3b      	ldr	r3, [r7, #32]
 800260a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d12e      	bne.n	8002670 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4618      	mov	r0, r3
 8002618:	f7ff fb4f 	bl	8001cba <LL_ADC_INJ_IsConversionOngoing>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d11a      	bne.n	8002658 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	685a      	ldr	r2, [r3, #4]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002630:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002636:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002646:	2b00      	cmp	r3, #0
 8002648:	d112      	bne.n	8002670 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800264e:	f043 0201 	orr.w	r2, r3, #1
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	65da      	str	r2, [r3, #92]	; 0x5c
 8002656:	e00b      	b.n	8002670 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800265c:	f043 0210 	orr.w	r2, r3, #16
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002668:	f043 0201 	orr.w	r2, r3, #1
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f000 fe8b 	bl	800338c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	2260      	movs	r2, #96	; 0x60
 800267c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002684:	2b00      	cmp	r3, #0
 8002686:	d011      	beq.n	80026ac <HAL_ADC_IRQHandler+0x374>
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800268e:	2b00      	cmp	r3, #0
 8002690:	d00c      	beq.n	80026ac <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002696:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f000 f8aa 	bl	80027f8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	2280      	movs	r2, #128	; 0x80
 80026aa:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d012      	beq.n	80026dc <HAL_ADC_IRQHandler+0x3a4>
 80026b6:	69bb      	ldr	r3, [r7, #24]
 80026b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d00d      	beq.n	80026dc <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026c4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f000 fe71 	bl	80033b4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026da:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d012      	beq.n	800270c <HAL_ADC_IRQHandler+0x3d4>
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d00d      	beq.n	800270c <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026f4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f000 fe63 	bl	80033c8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f44f 7200 	mov.w	r2, #512	; 0x200
 800270a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	f003 0310 	and.w	r3, r3, #16
 8002712:	2b00      	cmp	r3, #0
 8002714:	d043      	beq.n	800279e <HAL_ADC_IRQHandler+0x466>
 8002716:	69bb      	ldr	r3, [r7, #24]
 8002718:	f003 0310 	and.w	r3, r3, #16
 800271c:	2b00      	cmp	r3, #0
 800271e:	d03e      	beq.n	800279e <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002724:	2b00      	cmp	r3, #0
 8002726:	d102      	bne.n	800272e <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8002728:	2301      	movs	r3, #1
 800272a:	627b      	str	r3, [r7, #36]	; 0x24
 800272c:	e021      	b.n	8002772 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d015      	beq.n	8002760 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800273c:	d004      	beq.n	8002748 <HAL_ADC_IRQHandler+0x410>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a28      	ldr	r2, [pc, #160]	; (80027e4 <HAL_ADC_IRQHandler+0x4ac>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d101      	bne.n	800274c <HAL_ADC_IRQHandler+0x414>
 8002748:	4b29      	ldr	r3, [pc, #164]	; (80027f0 <HAL_ADC_IRQHandler+0x4b8>)
 800274a:	e000      	b.n	800274e <HAL_ADC_IRQHandler+0x416>
 800274c:	4b29      	ldr	r3, [pc, #164]	; (80027f4 <HAL_ADC_IRQHandler+0x4bc>)
 800274e:	4618      	mov	r0, r3
 8002750:	f7ff f9e2 	bl	8001b18 <LL_ADC_GetMultiDMATransfer>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d00b      	beq.n	8002772 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 800275a:	2301      	movs	r3, #1
 800275c:	627b      	str	r3, [r7, #36]	; 0x24
 800275e:	e008      	b.n	8002772 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	f003 0301 	and.w	r3, r3, #1
 800276a:	2b00      	cmp	r3, #0
 800276c:	d001      	beq.n	8002772 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 800276e:	2301      	movs	r3, #1
 8002770:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002774:	2b01      	cmp	r3, #1
 8002776:	d10e      	bne.n	8002796 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800277c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002788:	f043 0202 	orr.w	r2, r3, #2
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f000 f83b 	bl	800280c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	2210      	movs	r2, #16
 800279c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d018      	beq.n	80027da <HAL_ADC_IRQHandler+0x4a2>
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d013      	beq.n	80027da <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027b6:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027c2:	f043 0208 	orr.w	r2, r3, #8
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027d2:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f000 fde3 	bl	80033a0 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80027da:	bf00      	nop
 80027dc:	3728      	adds	r7, #40	; 0x28
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	50000100 	.word	0x50000100
 80027e8:	50000500 	.word	0x50000500
 80027ec:	50000400 	.word	0x50000400
 80027f0:	50000300 	.word	0x50000300
 80027f4:	50000700 	.word	0x50000700

080027f8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002800:	bf00      	nop
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002814:	bf00      	nop
 8002816:	370c      	adds	r7, #12
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr

08002820 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b0b6      	sub	sp, #216	; 0xd8
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800282a:	2300      	movs	r3, #0
 800282c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002830:	2300      	movs	r3, #0
 8002832:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800283a:	2b01      	cmp	r3, #1
 800283c:	d102      	bne.n	8002844 <HAL_ADC_ConfigChannel+0x24>
 800283e:	2302      	movs	r3, #2
 8002840:	f000 bc13 	b.w	800306a <HAL_ADC_ConfigChannel+0x84a>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2201      	movs	r2, #1
 8002848:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4618      	mov	r0, r3
 8002852:	f7ff fa1f 	bl	8001c94 <LL_ADC_REG_IsConversionOngoing>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	f040 83f3 	bne.w	8003044 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6818      	ldr	r0, [r3, #0]
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	6859      	ldr	r1, [r3, #4]
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	461a      	mov	r2, r3
 800286c:	f7ff f8b3 	bl	80019d6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4618      	mov	r0, r3
 8002876:	f7ff fa0d 	bl	8001c94 <LL_ADC_REG_IsConversionOngoing>
 800287a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4618      	mov	r0, r3
 8002884:	f7ff fa19 	bl	8001cba <LL_ADC_INJ_IsConversionOngoing>
 8002888:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800288c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002890:	2b00      	cmp	r3, #0
 8002892:	f040 81d9 	bne.w	8002c48 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002896:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800289a:	2b00      	cmp	r3, #0
 800289c:	f040 81d4 	bne.w	8002c48 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80028a8:	d10f      	bne.n	80028ca <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6818      	ldr	r0, [r3, #0]
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	2200      	movs	r2, #0
 80028b4:	4619      	mov	r1, r3
 80028b6:	f7ff f8cd 	bl	8001a54 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80028c2:	4618      	mov	r0, r3
 80028c4:	f7ff f861 	bl	800198a <LL_ADC_SetSamplingTimeCommonConfig>
 80028c8:	e00e      	b.n	80028e8 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6818      	ldr	r0, [r3, #0]
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	6819      	ldr	r1, [r3, #0]
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	461a      	mov	r2, r3
 80028d8:	f7ff f8bc 	bl	8001a54 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	2100      	movs	r1, #0
 80028e2:	4618      	mov	r0, r3
 80028e4:	f7ff f851 	bl	800198a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	695a      	ldr	r2, [r3, #20]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	08db      	lsrs	r3, r3, #3
 80028f4:	f003 0303 	and.w	r3, r3, #3
 80028f8:	005b      	lsls	r3, r3, #1
 80028fa:	fa02 f303 	lsl.w	r3, r2, r3
 80028fe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	691b      	ldr	r3, [r3, #16]
 8002906:	2b04      	cmp	r3, #4
 8002908:	d022      	beq.n	8002950 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6818      	ldr	r0, [r3, #0]
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	6919      	ldr	r1, [r3, #16]
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800291a:	f7fe ffab 	bl	8001874 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6818      	ldr	r0, [r3, #0]
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	6919      	ldr	r1, [r3, #16]
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	699b      	ldr	r3, [r3, #24]
 800292a:	461a      	mov	r2, r3
 800292c:	f7fe fff7 	bl	800191e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6818      	ldr	r0, [r3, #0]
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	6919      	ldr	r1, [r3, #16]
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	7f1b      	ldrb	r3, [r3, #28]
 800293c:	2b01      	cmp	r3, #1
 800293e:	d102      	bne.n	8002946 <HAL_ADC_ConfigChannel+0x126>
 8002940:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002944:	e000      	b.n	8002948 <HAL_ADC_ConfigChannel+0x128>
 8002946:	2300      	movs	r3, #0
 8002948:	461a      	mov	r2, r3
 800294a:	f7ff f803 	bl	8001954 <LL_ADC_SetOffsetSaturation>
 800294e:	e17b      	b.n	8002c48 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2100      	movs	r1, #0
 8002956:	4618      	mov	r0, r3
 8002958:	f7fe ffb0 	bl	80018bc <LL_ADC_GetOffsetChannel>
 800295c:	4603      	mov	r3, r0
 800295e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002962:	2b00      	cmp	r3, #0
 8002964:	d10a      	bne.n	800297c <HAL_ADC_ConfigChannel+0x15c>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2100      	movs	r1, #0
 800296c:	4618      	mov	r0, r3
 800296e:	f7fe ffa5 	bl	80018bc <LL_ADC_GetOffsetChannel>
 8002972:	4603      	mov	r3, r0
 8002974:	0e9b      	lsrs	r3, r3, #26
 8002976:	f003 021f 	and.w	r2, r3, #31
 800297a:	e01e      	b.n	80029ba <HAL_ADC_ConfigChannel+0x19a>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2100      	movs	r1, #0
 8002982:	4618      	mov	r0, r3
 8002984:	f7fe ff9a 	bl	80018bc <LL_ADC_GetOffsetChannel>
 8002988:	4603      	mov	r3, r0
 800298a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800298e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002992:	fa93 f3a3 	rbit	r3, r3
 8002996:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800299a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800299e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80029a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d101      	bne.n	80029ae <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80029aa:	2320      	movs	r3, #32
 80029ac:	e004      	b.n	80029b8 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80029ae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80029b2:	fab3 f383 	clz	r3, r3
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d105      	bne.n	80029d2 <HAL_ADC_ConfigChannel+0x1b2>
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	0e9b      	lsrs	r3, r3, #26
 80029cc:	f003 031f 	and.w	r3, r3, #31
 80029d0:	e018      	b.n	8002a04 <HAL_ADC_ConfigChannel+0x1e4>
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029da:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80029de:	fa93 f3a3 	rbit	r3, r3
 80029e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80029e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80029ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80029ee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d101      	bne.n	80029fa <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80029f6:	2320      	movs	r3, #32
 80029f8:	e004      	b.n	8002a04 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80029fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80029fe:	fab3 f383 	clz	r3, r3
 8002a02:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d106      	bne.n	8002a16 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	2100      	movs	r1, #0
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7fe ff69 	bl	80018e8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	2101      	movs	r1, #1
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f7fe ff4d 	bl	80018bc <LL_ADC_GetOffsetChannel>
 8002a22:	4603      	mov	r3, r0
 8002a24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d10a      	bne.n	8002a42 <HAL_ADC_ConfigChannel+0x222>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2101      	movs	r1, #1
 8002a32:	4618      	mov	r0, r3
 8002a34:	f7fe ff42 	bl	80018bc <LL_ADC_GetOffsetChannel>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	0e9b      	lsrs	r3, r3, #26
 8002a3c:	f003 021f 	and.w	r2, r3, #31
 8002a40:	e01e      	b.n	8002a80 <HAL_ADC_ConfigChannel+0x260>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	2101      	movs	r1, #1
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f7fe ff37 	bl	80018bc <LL_ADC_GetOffsetChannel>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a54:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002a58:	fa93 f3a3 	rbit	r3, r3
 8002a5c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002a60:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002a64:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002a68:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d101      	bne.n	8002a74 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002a70:	2320      	movs	r3, #32
 8002a72:	e004      	b.n	8002a7e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002a74:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002a78:	fab3 f383 	clz	r3, r3
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d105      	bne.n	8002a98 <HAL_ADC_ConfigChannel+0x278>
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	0e9b      	lsrs	r3, r3, #26
 8002a92:	f003 031f 	and.w	r3, r3, #31
 8002a96:	e018      	b.n	8002aca <HAL_ADC_ConfigChannel+0x2aa>
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002aa4:	fa93 f3a3 	rbit	r3, r3
 8002aa8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002aac:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002ab0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002ab4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d101      	bne.n	8002ac0 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002abc:	2320      	movs	r3, #32
 8002abe:	e004      	b.n	8002aca <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002ac0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002ac4:	fab3 f383 	clz	r3, r3
 8002ac8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d106      	bne.n	8002adc <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	2101      	movs	r1, #1
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7fe ff06 	bl	80018e8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2102      	movs	r1, #2
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7fe feea 	bl	80018bc <LL_ADC_GetOffsetChannel>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d10a      	bne.n	8002b08 <HAL_ADC_ConfigChannel+0x2e8>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	2102      	movs	r1, #2
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7fe fedf 	bl	80018bc <LL_ADC_GetOffsetChannel>
 8002afe:	4603      	mov	r3, r0
 8002b00:	0e9b      	lsrs	r3, r3, #26
 8002b02:	f003 021f 	and.w	r2, r3, #31
 8002b06:	e01e      	b.n	8002b46 <HAL_ADC_ConfigChannel+0x326>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	2102      	movs	r1, #2
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f7fe fed4 	bl	80018bc <LL_ADC_GetOffsetChannel>
 8002b14:	4603      	mov	r3, r0
 8002b16:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b1e:	fa93 f3a3 	rbit	r3, r3
 8002b22:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002b26:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002b2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002b2e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d101      	bne.n	8002b3a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002b36:	2320      	movs	r3, #32
 8002b38:	e004      	b.n	8002b44 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002b3a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002b3e:	fab3 f383 	clz	r3, r3
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d105      	bne.n	8002b5e <HAL_ADC_ConfigChannel+0x33e>
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	0e9b      	lsrs	r3, r3, #26
 8002b58:	f003 031f 	and.w	r3, r3, #31
 8002b5c:	e016      	b.n	8002b8c <HAL_ADC_ConfigChannel+0x36c>
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b66:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b6a:	fa93 f3a3 	rbit	r3, r3
 8002b6e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002b70:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b72:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002b76:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d101      	bne.n	8002b82 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002b7e:	2320      	movs	r3, #32
 8002b80:	e004      	b.n	8002b8c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002b82:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b86:	fab3 f383 	clz	r3, r3
 8002b8a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d106      	bne.n	8002b9e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	2200      	movs	r2, #0
 8002b96:	2102      	movs	r1, #2
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7fe fea5 	bl	80018e8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	2103      	movs	r1, #3
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f7fe fe89 	bl	80018bc <LL_ADC_GetOffsetChannel>
 8002baa:	4603      	mov	r3, r0
 8002bac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d10a      	bne.n	8002bca <HAL_ADC_ConfigChannel+0x3aa>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2103      	movs	r1, #3
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f7fe fe7e 	bl	80018bc <LL_ADC_GetOffsetChannel>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	0e9b      	lsrs	r3, r3, #26
 8002bc4:	f003 021f 	and.w	r2, r3, #31
 8002bc8:	e017      	b.n	8002bfa <HAL_ADC_ConfigChannel+0x3da>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	2103      	movs	r1, #3
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f7fe fe73 	bl	80018bc <LL_ADC_GetOffsetChannel>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bdc:	fa93 f3a3 	rbit	r3, r3
 8002be0:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002be2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002be4:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002be6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d101      	bne.n	8002bf0 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002bec:	2320      	movs	r3, #32
 8002bee:	e003      	b.n	8002bf8 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002bf0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002bf2:	fab3 f383 	clz	r3, r3
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d105      	bne.n	8002c12 <HAL_ADC_ConfigChannel+0x3f2>
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	0e9b      	lsrs	r3, r3, #26
 8002c0c:	f003 031f 	and.w	r3, r3, #31
 8002c10:	e011      	b.n	8002c36 <HAL_ADC_ConfigChannel+0x416>
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c1a:	fa93 f3a3 	rbit	r3, r3
 8002c1e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002c20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c22:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002c24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d101      	bne.n	8002c2e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002c2a:	2320      	movs	r3, #32
 8002c2c:	e003      	b.n	8002c36 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002c2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c30:	fab3 f383 	clz	r3, r3
 8002c34:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d106      	bne.n	8002c48 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	2103      	movs	r1, #3
 8002c42:	4618      	mov	r0, r3
 8002c44:	f7fe fe50 	bl	80018e8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f7fe ffe7 	bl	8001c20 <LL_ADC_IsEnabled>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	f040 813d 	bne.w	8002ed4 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6818      	ldr	r0, [r3, #0]
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	6819      	ldr	r1, [r3, #0]
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	461a      	mov	r2, r3
 8002c68:	f7fe ff20 	bl	8001aac <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	4aa2      	ldr	r2, [pc, #648]	; (8002efc <HAL_ADC_ConfigChannel+0x6dc>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	f040 812e 	bne.w	8002ed4 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d10b      	bne.n	8002ca0 <HAL_ADC_ConfigChannel+0x480>
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	0e9b      	lsrs	r3, r3, #26
 8002c8e:	3301      	adds	r3, #1
 8002c90:	f003 031f 	and.w	r3, r3, #31
 8002c94:	2b09      	cmp	r3, #9
 8002c96:	bf94      	ite	ls
 8002c98:	2301      	movls	r3, #1
 8002c9a:	2300      	movhi	r3, #0
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	e019      	b.n	8002cd4 <HAL_ADC_ConfigChannel+0x4b4>
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ca8:	fa93 f3a3 	rbit	r3, r3
 8002cac:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002cae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cb0:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002cb2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d101      	bne.n	8002cbc <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002cb8:	2320      	movs	r3, #32
 8002cba:	e003      	b.n	8002cc4 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002cbc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002cbe:	fab3 f383 	clz	r3, r3
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	f003 031f 	and.w	r3, r3, #31
 8002cca:	2b09      	cmp	r3, #9
 8002ccc:	bf94      	ite	ls
 8002cce:	2301      	movls	r3, #1
 8002cd0:	2300      	movhi	r3, #0
 8002cd2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d079      	beq.n	8002dcc <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d107      	bne.n	8002cf4 <HAL_ADC_ConfigChannel+0x4d4>
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	0e9b      	lsrs	r3, r3, #26
 8002cea:	3301      	adds	r3, #1
 8002cec:	069b      	lsls	r3, r3, #26
 8002cee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002cf2:	e015      	b.n	8002d20 <HAL_ADC_ConfigChannel+0x500>
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cfc:	fa93 f3a3 	rbit	r3, r3
 8002d00:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002d02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d04:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002d06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d101      	bne.n	8002d10 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002d0c:	2320      	movs	r3, #32
 8002d0e:	e003      	b.n	8002d18 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002d10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d12:	fab3 f383 	clz	r3, r3
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	3301      	adds	r3, #1
 8002d1a:	069b      	lsls	r3, r3, #26
 8002d1c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d109      	bne.n	8002d40 <HAL_ADC_ConfigChannel+0x520>
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	0e9b      	lsrs	r3, r3, #26
 8002d32:	3301      	adds	r3, #1
 8002d34:	f003 031f 	and.w	r3, r3, #31
 8002d38:	2101      	movs	r1, #1
 8002d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d3e:	e017      	b.n	8002d70 <HAL_ADC_ConfigChannel+0x550>
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d48:	fa93 f3a3 	rbit	r3, r3
 8002d4c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002d4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d50:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002d52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d101      	bne.n	8002d5c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002d58:	2320      	movs	r3, #32
 8002d5a:	e003      	b.n	8002d64 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002d5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d5e:	fab3 f383 	clz	r3, r3
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	3301      	adds	r3, #1
 8002d66:	f003 031f 	and.w	r3, r3, #31
 8002d6a:	2101      	movs	r1, #1
 8002d6c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d70:	ea42 0103 	orr.w	r1, r2, r3
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d10a      	bne.n	8002d96 <HAL_ADC_ConfigChannel+0x576>
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	0e9b      	lsrs	r3, r3, #26
 8002d86:	3301      	adds	r3, #1
 8002d88:	f003 021f 	and.w	r2, r3, #31
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	005b      	lsls	r3, r3, #1
 8002d90:	4413      	add	r3, r2
 8002d92:	051b      	lsls	r3, r3, #20
 8002d94:	e018      	b.n	8002dc8 <HAL_ADC_ConfigChannel+0x5a8>
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d9e:	fa93 f3a3 	rbit	r3, r3
 8002da2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002da6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002da8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d101      	bne.n	8002db2 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002dae:	2320      	movs	r3, #32
 8002db0:	e003      	b.n	8002dba <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002db2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002db4:	fab3 f383 	clz	r3, r3
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	3301      	adds	r3, #1
 8002dbc:	f003 021f 	and.w	r2, r3, #31
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	005b      	lsls	r3, r3, #1
 8002dc4:	4413      	add	r3, r2
 8002dc6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002dc8:	430b      	orrs	r3, r1
 8002dca:	e07e      	b.n	8002eca <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d107      	bne.n	8002de8 <HAL_ADC_ConfigChannel+0x5c8>
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	0e9b      	lsrs	r3, r3, #26
 8002dde:	3301      	adds	r3, #1
 8002de0:	069b      	lsls	r3, r3, #26
 8002de2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002de6:	e015      	b.n	8002e14 <HAL_ADC_ConfigChannel+0x5f4>
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002df0:	fa93 f3a3 	rbit	r3, r3
 8002df4:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002df8:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d101      	bne.n	8002e04 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002e00:	2320      	movs	r3, #32
 8002e02:	e003      	b.n	8002e0c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e06:	fab3 f383 	clz	r3, r3
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	3301      	adds	r3, #1
 8002e0e:	069b      	lsls	r3, r3, #26
 8002e10:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d109      	bne.n	8002e34 <HAL_ADC_ConfigChannel+0x614>
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	0e9b      	lsrs	r3, r3, #26
 8002e26:	3301      	adds	r3, #1
 8002e28:	f003 031f 	and.w	r3, r3, #31
 8002e2c:	2101      	movs	r1, #1
 8002e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e32:	e017      	b.n	8002e64 <HAL_ADC_ConfigChannel+0x644>
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e3a:	6a3b      	ldr	r3, [r7, #32]
 8002e3c:	fa93 f3a3 	rbit	r3, r3
 8002e40:	61fb      	str	r3, [r7, #28]
  return result;
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d101      	bne.n	8002e50 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002e4c:	2320      	movs	r3, #32
 8002e4e:	e003      	b.n	8002e58 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e52:	fab3 f383 	clz	r3, r3
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	3301      	adds	r3, #1
 8002e5a:	f003 031f 	and.w	r3, r3, #31
 8002e5e:	2101      	movs	r1, #1
 8002e60:	fa01 f303 	lsl.w	r3, r1, r3
 8002e64:	ea42 0103 	orr.w	r1, r2, r3
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d10d      	bne.n	8002e90 <HAL_ADC_ConfigChannel+0x670>
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	0e9b      	lsrs	r3, r3, #26
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	f003 021f 	and.w	r2, r3, #31
 8002e80:	4613      	mov	r3, r2
 8002e82:	005b      	lsls	r3, r3, #1
 8002e84:	4413      	add	r3, r2
 8002e86:	3b1e      	subs	r3, #30
 8002e88:	051b      	lsls	r3, r3, #20
 8002e8a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002e8e:	e01b      	b.n	8002ec8 <HAL_ADC_ConfigChannel+0x6a8>
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	fa93 f3a3 	rbit	r3, r3
 8002e9c:	613b      	str	r3, [r7, #16]
  return result;
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d101      	bne.n	8002eac <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002ea8:	2320      	movs	r3, #32
 8002eaa:	e003      	b.n	8002eb4 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	fab3 f383 	clz	r3, r3
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	f003 021f 	and.w	r2, r3, #31
 8002eba:	4613      	mov	r3, r2
 8002ebc:	005b      	lsls	r3, r3, #1
 8002ebe:	4413      	add	r3, r2
 8002ec0:	3b1e      	subs	r3, #30
 8002ec2:	051b      	lsls	r3, r3, #20
 8002ec4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ec8:	430b      	orrs	r3, r1
 8002eca:	683a      	ldr	r2, [r7, #0]
 8002ecc:	6892      	ldr	r2, [r2, #8]
 8002ece:	4619      	mov	r1, r3
 8002ed0:	f7fe fdc0 	bl	8001a54 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	4b09      	ldr	r3, [pc, #36]	; (8002f00 <HAL_ADC_ConfigChannel+0x6e0>)
 8002eda:	4013      	ands	r3, r2
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	f000 80be 	beq.w	800305e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002eea:	d004      	beq.n	8002ef6 <HAL_ADC_ConfigChannel+0x6d6>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a04      	ldr	r2, [pc, #16]	; (8002f04 <HAL_ADC_ConfigChannel+0x6e4>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d10a      	bne.n	8002f0c <HAL_ADC_ConfigChannel+0x6ec>
 8002ef6:	4b04      	ldr	r3, [pc, #16]	; (8002f08 <HAL_ADC_ConfigChannel+0x6e8>)
 8002ef8:	e009      	b.n	8002f0e <HAL_ADC_ConfigChannel+0x6ee>
 8002efa:	bf00      	nop
 8002efc:	407f0000 	.word	0x407f0000
 8002f00:	80080000 	.word	0x80080000
 8002f04:	50000100 	.word	0x50000100
 8002f08:	50000300 	.word	0x50000300
 8002f0c:	4b59      	ldr	r3, [pc, #356]	; (8003074 <HAL_ADC_ConfigChannel+0x854>)
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f7fe fca2 	bl	8001858 <LL_ADC_GetCommonPathInternalCh>
 8002f14:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a56      	ldr	r2, [pc, #344]	; (8003078 <HAL_ADC_ConfigChannel+0x858>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d004      	beq.n	8002f2c <HAL_ADC_ConfigChannel+0x70c>
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a55      	ldr	r2, [pc, #340]	; (800307c <HAL_ADC_ConfigChannel+0x85c>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d13a      	bne.n	8002fa2 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002f2c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f30:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d134      	bne.n	8002fa2 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f40:	d005      	beq.n	8002f4e <HAL_ADC_ConfigChannel+0x72e>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a4e      	ldr	r2, [pc, #312]	; (8003080 <HAL_ADC_ConfigChannel+0x860>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	f040 8085 	bne.w	8003058 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f56:	d004      	beq.n	8002f62 <HAL_ADC_ConfigChannel+0x742>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a49      	ldr	r2, [pc, #292]	; (8003084 <HAL_ADC_ConfigChannel+0x864>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d101      	bne.n	8002f66 <HAL_ADC_ConfigChannel+0x746>
 8002f62:	4a49      	ldr	r2, [pc, #292]	; (8003088 <HAL_ADC_ConfigChannel+0x868>)
 8002f64:	e000      	b.n	8002f68 <HAL_ADC_ConfigChannel+0x748>
 8002f66:	4a43      	ldr	r2, [pc, #268]	; (8003074 <HAL_ADC_ConfigChannel+0x854>)
 8002f68:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f6c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002f70:	4619      	mov	r1, r3
 8002f72:	4610      	mov	r0, r2
 8002f74:	f7fe fc5d 	bl	8001832 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f78:	4b44      	ldr	r3, [pc, #272]	; (800308c <HAL_ADC_ConfigChannel+0x86c>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	099b      	lsrs	r3, r3, #6
 8002f7e:	4a44      	ldr	r2, [pc, #272]	; (8003090 <HAL_ADC_ConfigChannel+0x870>)
 8002f80:	fba2 2303 	umull	r2, r3, r2, r3
 8002f84:	099b      	lsrs	r3, r3, #6
 8002f86:	1c5a      	adds	r2, r3, #1
 8002f88:	4613      	mov	r3, r2
 8002f8a:	005b      	lsls	r3, r3, #1
 8002f8c:	4413      	add	r3, r2
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002f92:	e002      	b.n	8002f9a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	3b01      	subs	r3, #1
 8002f98:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d1f9      	bne.n	8002f94 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002fa0:	e05a      	b.n	8003058 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a3b      	ldr	r2, [pc, #236]	; (8003094 <HAL_ADC_ConfigChannel+0x874>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d125      	bne.n	8002ff8 <HAL_ADC_ConfigChannel+0x7d8>
 8002fac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002fb0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d11f      	bne.n	8002ff8 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a31      	ldr	r2, [pc, #196]	; (8003084 <HAL_ADC_ConfigChannel+0x864>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d104      	bne.n	8002fcc <HAL_ADC_ConfigChannel+0x7ac>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a34      	ldr	r2, [pc, #208]	; (8003098 <HAL_ADC_ConfigChannel+0x878>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d047      	beq.n	800305c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fd4:	d004      	beq.n	8002fe0 <HAL_ADC_ConfigChannel+0x7c0>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a2a      	ldr	r2, [pc, #168]	; (8003084 <HAL_ADC_ConfigChannel+0x864>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d101      	bne.n	8002fe4 <HAL_ADC_ConfigChannel+0x7c4>
 8002fe0:	4a29      	ldr	r2, [pc, #164]	; (8003088 <HAL_ADC_ConfigChannel+0x868>)
 8002fe2:	e000      	b.n	8002fe6 <HAL_ADC_ConfigChannel+0x7c6>
 8002fe4:	4a23      	ldr	r2, [pc, #140]	; (8003074 <HAL_ADC_ConfigChannel+0x854>)
 8002fe6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002fea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fee:	4619      	mov	r1, r3
 8002ff0:	4610      	mov	r0, r2
 8002ff2:	f7fe fc1e 	bl	8001832 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ff6:	e031      	b.n	800305c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a27      	ldr	r2, [pc, #156]	; (800309c <HAL_ADC_ConfigChannel+0x87c>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d12d      	bne.n	800305e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003002:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003006:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d127      	bne.n	800305e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a1c      	ldr	r2, [pc, #112]	; (8003084 <HAL_ADC_ConfigChannel+0x864>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d022      	beq.n	800305e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003020:	d004      	beq.n	800302c <HAL_ADC_ConfigChannel+0x80c>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a17      	ldr	r2, [pc, #92]	; (8003084 <HAL_ADC_ConfigChannel+0x864>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d101      	bne.n	8003030 <HAL_ADC_ConfigChannel+0x810>
 800302c:	4a16      	ldr	r2, [pc, #88]	; (8003088 <HAL_ADC_ConfigChannel+0x868>)
 800302e:	e000      	b.n	8003032 <HAL_ADC_ConfigChannel+0x812>
 8003030:	4a10      	ldr	r2, [pc, #64]	; (8003074 <HAL_ADC_ConfigChannel+0x854>)
 8003032:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003036:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800303a:	4619      	mov	r1, r3
 800303c:	4610      	mov	r0, r2
 800303e:	f7fe fbf8 	bl	8001832 <LL_ADC_SetCommonPathInternalCh>
 8003042:	e00c      	b.n	800305e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003048:	f043 0220 	orr.w	r2, r3, #32
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003056:	e002      	b.n	800305e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003058:	bf00      	nop
 800305a:	e000      	b.n	800305e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800305c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003066:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800306a:	4618      	mov	r0, r3
 800306c:	37d8      	adds	r7, #216	; 0xd8
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	50000700 	.word	0x50000700
 8003078:	c3210000 	.word	0xc3210000
 800307c:	90c00010 	.word	0x90c00010
 8003080:	50000600 	.word	0x50000600
 8003084:	50000100 	.word	0x50000100
 8003088:	50000300 	.word	0x50000300
 800308c:	2000009c 	.word	0x2000009c
 8003090:	053e2d63 	.word	0x053e2d63
 8003094:	c7520000 	.word	0xc7520000
 8003098:	50000500 	.word	0x50000500
 800309c:	cb840000 	.word	0xcb840000

080030a0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4618      	mov	r0, r3
 80030ae:	f7fe fdb7 	bl	8001c20 <LL_ADC_IsEnabled>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d14d      	bne.n	8003154 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	689a      	ldr	r2, [r3, #8]
 80030be:	4b28      	ldr	r3, [pc, #160]	; (8003160 <ADC_Enable+0xc0>)
 80030c0:	4013      	ands	r3, r2
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d00d      	beq.n	80030e2 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ca:	f043 0210 	orr.w	r2, r3, #16
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030d6:	f043 0201 	orr.w	r2, r3, #1
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e039      	b.n	8003156 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4618      	mov	r0, r3
 80030e8:	f7fe fd72 	bl	8001bd0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80030ec:	f7fe fb60 	bl	80017b0 <HAL_GetTick>
 80030f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80030f2:	e028      	b.n	8003146 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4618      	mov	r0, r3
 80030fa:	f7fe fd91 	bl	8001c20 <LL_ADC_IsEnabled>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d104      	bne.n	800310e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4618      	mov	r0, r3
 800310a:	f7fe fd61 	bl	8001bd0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800310e:	f7fe fb4f 	bl	80017b0 <HAL_GetTick>
 8003112:	4602      	mov	r2, r0
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	2b02      	cmp	r3, #2
 800311a:	d914      	bls.n	8003146 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0301 	and.w	r3, r3, #1
 8003126:	2b01      	cmp	r3, #1
 8003128:	d00d      	beq.n	8003146 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800312e:	f043 0210 	orr.w	r2, r3, #16
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800313a:	f043 0201 	orr.w	r2, r3, #1
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e007      	b.n	8003156 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0301 	and.w	r3, r3, #1
 8003150:	2b01      	cmp	r3, #1
 8003152:	d1cf      	bne.n	80030f4 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003154:	2300      	movs	r3, #0
}
 8003156:	4618      	mov	r0, r3
 8003158:	3710      	adds	r7, #16
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	8000003f 	.word	0x8000003f

08003164 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b084      	sub	sp, #16
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4618      	mov	r0, r3
 8003172:	f7fe fd68 	bl	8001c46 <LL_ADC_IsDisableOngoing>
 8003176:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4618      	mov	r0, r3
 800317e:	f7fe fd4f 	bl	8001c20 <LL_ADC_IsEnabled>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d047      	beq.n	8003218 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d144      	bne.n	8003218 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	f003 030d 	and.w	r3, r3, #13
 8003198:	2b01      	cmp	r3, #1
 800319a:	d10c      	bne.n	80031b6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4618      	mov	r0, r3
 80031a2:	f7fe fd29 	bl	8001bf8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	2203      	movs	r2, #3
 80031ac:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80031ae:	f7fe faff 	bl	80017b0 <HAL_GetTick>
 80031b2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80031b4:	e029      	b.n	800320a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ba:	f043 0210 	orr.w	r2, r3, #16
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031c6:	f043 0201 	orr.w	r2, r3, #1
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e023      	b.n	800321a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80031d2:	f7fe faed 	bl	80017b0 <HAL_GetTick>
 80031d6:	4602      	mov	r2, r0
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	2b02      	cmp	r3, #2
 80031de:	d914      	bls.n	800320a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	f003 0301 	and.w	r3, r3, #1
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d00d      	beq.n	800320a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031f2:	f043 0210 	orr.w	r2, r3, #16
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031fe:	f043 0201 	orr.w	r2, r3, #1
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e007      	b.n	800321a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f003 0301 	and.w	r3, r3, #1
 8003214:	2b00      	cmp	r3, #0
 8003216:	d1dc      	bne.n	80031d2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003218:	2300      	movs	r3, #0
}
 800321a:	4618      	mov	r0, r3
 800321c:	3710      	adds	r7, #16
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}

08003222 <LL_ADC_IsEnabled>:
{
 8003222:	b480      	push	{r7}
 8003224:	b083      	sub	sp, #12
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	f003 0301 	and.w	r3, r3, #1
 8003232:	2b01      	cmp	r3, #1
 8003234:	d101      	bne.n	800323a <LL_ADC_IsEnabled+0x18>
 8003236:	2301      	movs	r3, #1
 8003238:	e000      	b.n	800323c <LL_ADC_IsEnabled+0x1a>
 800323a:	2300      	movs	r3, #0
}
 800323c:	4618      	mov	r0, r3
 800323e:	370c      	adds	r7, #12
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr

08003248 <LL_ADC_StartCalibration>:
{
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800325a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800325e:	683a      	ldr	r2, [r7, #0]
 8003260:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003264:	4313      	orrs	r3, r2
 8003266:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	609a      	str	r2, [r3, #8]
}
 800326e:	bf00      	nop
 8003270:	370c      	adds	r7, #12
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr

0800327a <LL_ADC_IsCalibrationOnGoing>:
{
 800327a:	b480      	push	{r7}
 800327c:	b083      	sub	sp, #12
 800327e:	af00      	add	r7, sp, #0
 8003280:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800328a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800328e:	d101      	bne.n	8003294 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003290:	2301      	movs	r3, #1
 8003292:	e000      	b.n	8003296 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	370c      	adds	r7, #12
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr

080032a2 <LL_ADC_REG_IsConversionOngoing>:
{
 80032a2:	b480      	push	{r7}
 80032a4:	b083      	sub	sp, #12
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f003 0304 	and.w	r3, r3, #4
 80032b2:	2b04      	cmp	r3, #4
 80032b4:	d101      	bne.n	80032ba <LL_ADC_REG_IsConversionOngoing+0x18>
 80032b6:	2301      	movs	r3, #1
 80032b8:	e000      	b.n	80032bc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80032ba:	2300      	movs	r3, #0
}
 80032bc:	4618      	mov	r0, r3
 80032be:	370c      	adds	r7, #12
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr

080032c8 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b084      	sub	sp, #16
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80032d2:	2300      	movs	r3, #0
 80032d4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d101      	bne.n	80032e4 <HAL_ADCEx_Calibration_Start+0x1c>
 80032e0:	2302      	movs	r3, #2
 80032e2:	e04d      	b.n	8003380 <HAL_ADCEx_Calibration_Start+0xb8>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f7ff ff39 	bl	8003164 <ADC_Disable>
 80032f2:	4603      	mov	r3, r0
 80032f4:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80032f6:	7bfb      	ldrb	r3, [r7, #15]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d136      	bne.n	800336a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003300:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003304:	f023 0302 	bic.w	r3, r3, #2
 8003308:	f043 0202 	orr.w	r2, r3, #2
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	6839      	ldr	r1, [r7, #0]
 8003316:	4618      	mov	r0, r3
 8003318:	f7ff ff96 	bl	8003248 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800331c:	e014      	b.n	8003348 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	3301      	adds	r3, #1
 8003322:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	4a18      	ldr	r2, [pc, #96]	; (8003388 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d90d      	bls.n	8003348 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003330:	f023 0312 	bic.w	r3, r3, #18
 8003334:	f043 0210 	orr.w	r2, r3, #16
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e01b      	b.n	8003380 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4618      	mov	r0, r3
 800334e:	f7ff ff94 	bl	800327a <LL_ADC_IsCalibrationOnGoing>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d1e2      	bne.n	800331e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800335c:	f023 0303 	bic.w	r3, r3, #3
 8003360:	f043 0201 	orr.w	r2, r3, #1
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	65da      	str	r2, [r3, #92]	; 0x5c
 8003368:	e005      	b.n	8003376 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800336e:	f043 0210 	orr.w	r2, r3, #16
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800337e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003380:	4618      	mov	r0, r3
 8003382:	3710      	adds	r7, #16
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}
 8003388:	0004de01 	.word	0x0004de01

0800338c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003394:	bf00      	nop
 8003396:	370c      	adds	r7, #12
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr

080033a0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80033a8:	bf00      	nop
 80033aa:	370c      	adds	r7, #12
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80033bc:	bf00      	nop
 80033be:	370c      	adds	r7, #12
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr

080033c8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80033d0:	bf00      	nop
 80033d2:	370c      	adds	r7, #12
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr

080033dc <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80033e4:	bf00      	nop
 80033e6:	370c      	adds	r7, #12
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr

080033f0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80033f0:	b590      	push	{r4, r7, lr}
 80033f2:	b0a1      	sub	sp, #132	; 0x84
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033fa:	2300      	movs	r3, #0
 80033fc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003406:	2b01      	cmp	r3, #1
 8003408:	d101      	bne.n	800340e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800340a:	2302      	movs	r3, #2
 800340c:	e0e7      	b.n	80035de <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2201      	movs	r2, #1
 8003412:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003416:	2300      	movs	r3, #0
 8003418:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800341a:	2300      	movs	r3, #0
 800341c:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003426:	d102      	bne.n	800342e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003428:	4b6f      	ldr	r3, [pc, #444]	; (80035e8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800342a:	60bb      	str	r3, [r7, #8]
 800342c:	e009      	b.n	8003442 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a6e      	ldr	r2, [pc, #440]	; (80035ec <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d102      	bne.n	800343e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003438:	4b6d      	ldr	r3, [pc, #436]	; (80035f0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800343a:	60bb      	str	r3, [r7, #8]
 800343c:	e001      	b.n	8003442 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800343e:	2300      	movs	r3, #0
 8003440:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d10b      	bne.n	8003460 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800344c:	f043 0220 	orr.w	r2, r3, #32
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e0be      	b.n	80035de <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	4618      	mov	r0, r3
 8003464:	f7ff ff1d 	bl	80032a2 <LL_ADC_REG_IsConversionOngoing>
 8003468:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4618      	mov	r0, r3
 8003470:	f7ff ff17 	bl	80032a2 <LL_ADC_REG_IsConversionOngoing>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	f040 80a0 	bne.w	80035bc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800347c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800347e:	2b00      	cmp	r3, #0
 8003480:	f040 809c 	bne.w	80035bc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800348c:	d004      	beq.n	8003498 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a55      	ldr	r2, [pc, #340]	; (80035e8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d101      	bne.n	800349c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003498:	4b56      	ldr	r3, [pc, #344]	; (80035f4 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800349a:	e000      	b.n	800349e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800349c:	4b56      	ldr	r3, [pc, #344]	; (80035f8 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800349e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d04b      	beq.n	8003540 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80034a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	6859      	ldr	r1, [r3, #4]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80034ba:	035b      	lsls	r3, r3, #13
 80034bc:	430b      	orrs	r3, r1
 80034be:	431a      	orrs	r2, r3
 80034c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034c2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034cc:	d004      	beq.n	80034d8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a45      	ldr	r2, [pc, #276]	; (80035e8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d10f      	bne.n	80034f8 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80034d8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80034dc:	f7ff fea1 	bl	8003222 <LL_ADC_IsEnabled>
 80034e0:	4604      	mov	r4, r0
 80034e2:	4841      	ldr	r0, [pc, #260]	; (80035e8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80034e4:	f7ff fe9d 	bl	8003222 <LL_ADC_IsEnabled>
 80034e8:	4603      	mov	r3, r0
 80034ea:	4323      	orrs	r3, r4
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	bf0c      	ite	eq
 80034f0:	2301      	moveq	r3, #1
 80034f2:	2300      	movne	r3, #0
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	e012      	b.n	800351e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80034f8:	483c      	ldr	r0, [pc, #240]	; (80035ec <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80034fa:	f7ff fe92 	bl	8003222 <LL_ADC_IsEnabled>
 80034fe:	4604      	mov	r4, r0
 8003500:	483b      	ldr	r0, [pc, #236]	; (80035f0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003502:	f7ff fe8e 	bl	8003222 <LL_ADC_IsEnabled>
 8003506:	4603      	mov	r3, r0
 8003508:	431c      	orrs	r4, r3
 800350a:	483c      	ldr	r0, [pc, #240]	; (80035fc <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800350c:	f7ff fe89 	bl	8003222 <LL_ADC_IsEnabled>
 8003510:	4603      	mov	r3, r0
 8003512:	4323      	orrs	r3, r4
 8003514:	2b00      	cmp	r3, #0
 8003516:	bf0c      	ite	eq
 8003518:	2301      	moveq	r3, #1
 800351a:	2300      	movne	r3, #0
 800351c:	b2db      	uxtb	r3, r3
 800351e:	2b00      	cmp	r3, #0
 8003520:	d056      	beq.n	80035d0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003522:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800352a:	f023 030f 	bic.w	r3, r3, #15
 800352e:	683a      	ldr	r2, [r7, #0]
 8003530:	6811      	ldr	r1, [r2, #0]
 8003532:	683a      	ldr	r2, [r7, #0]
 8003534:	6892      	ldr	r2, [r2, #8]
 8003536:	430a      	orrs	r2, r1
 8003538:	431a      	orrs	r2, r3
 800353a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800353c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800353e:	e047      	b.n	80035d0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003540:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003548:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800354a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003554:	d004      	beq.n	8003560 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a23      	ldr	r2, [pc, #140]	; (80035e8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d10f      	bne.n	8003580 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003560:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003564:	f7ff fe5d 	bl	8003222 <LL_ADC_IsEnabled>
 8003568:	4604      	mov	r4, r0
 800356a:	481f      	ldr	r0, [pc, #124]	; (80035e8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800356c:	f7ff fe59 	bl	8003222 <LL_ADC_IsEnabled>
 8003570:	4603      	mov	r3, r0
 8003572:	4323      	orrs	r3, r4
 8003574:	2b00      	cmp	r3, #0
 8003576:	bf0c      	ite	eq
 8003578:	2301      	moveq	r3, #1
 800357a:	2300      	movne	r3, #0
 800357c:	b2db      	uxtb	r3, r3
 800357e:	e012      	b.n	80035a6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003580:	481a      	ldr	r0, [pc, #104]	; (80035ec <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003582:	f7ff fe4e 	bl	8003222 <LL_ADC_IsEnabled>
 8003586:	4604      	mov	r4, r0
 8003588:	4819      	ldr	r0, [pc, #100]	; (80035f0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800358a:	f7ff fe4a 	bl	8003222 <LL_ADC_IsEnabled>
 800358e:	4603      	mov	r3, r0
 8003590:	431c      	orrs	r4, r3
 8003592:	481a      	ldr	r0, [pc, #104]	; (80035fc <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003594:	f7ff fe45 	bl	8003222 <LL_ADC_IsEnabled>
 8003598:	4603      	mov	r3, r0
 800359a:	4323      	orrs	r3, r4
 800359c:	2b00      	cmp	r3, #0
 800359e:	bf0c      	ite	eq
 80035a0:	2301      	moveq	r3, #1
 80035a2:	2300      	movne	r3, #0
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d012      	beq.n	80035d0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80035aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80035b2:	f023 030f 	bic.w	r3, r3, #15
 80035b6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80035b8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80035ba:	e009      	b.n	80035d0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035c0:	f043 0220 	orr.w	r2, r3, #32
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80035ce:	e000      	b.n	80035d2 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80035d0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80035da:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3784      	adds	r7, #132	; 0x84
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd90      	pop	{r4, r7, pc}
 80035e6:	bf00      	nop
 80035e8:	50000100 	.word	0x50000100
 80035ec:	50000400 	.word	0x50000400
 80035f0:	50000500 	.word	0x50000500
 80035f4:	50000300 	.word	0x50000300
 80035f8:	50000700 	.word	0x50000700
 80035fc:	50000600 	.word	0x50000600

08003600 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003600:	b480      	push	{r7}
 8003602:	b085      	sub	sp, #20
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f003 0307 	and.w	r3, r3, #7
 800360e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003610:	4b0c      	ldr	r3, [pc, #48]	; (8003644 <__NVIC_SetPriorityGrouping+0x44>)
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003616:	68ba      	ldr	r2, [r7, #8]
 8003618:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800361c:	4013      	ands	r3, r2
 800361e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003628:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800362c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003630:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003632:	4a04      	ldr	r2, [pc, #16]	; (8003644 <__NVIC_SetPriorityGrouping+0x44>)
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	60d3      	str	r3, [r2, #12]
}
 8003638:	bf00      	nop
 800363a:	3714      	adds	r7, #20
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr
 8003644:	e000ed00 	.word	0xe000ed00

08003648 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003648:	b480      	push	{r7}
 800364a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800364c:	4b04      	ldr	r3, [pc, #16]	; (8003660 <__NVIC_GetPriorityGrouping+0x18>)
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	0a1b      	lsrs	r3, r3, #8
 8003652:	f003 0307 	and.w	r3, r3, #7
}
 8003656:	4618      	mov	r0, r3
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr
 8003660:	e000ed00 	.word	0xe000ed00

08003664 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003664:	b480      	push	{r7}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
 800366a:	4603      	mov	r3, r0
 800366c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800366e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003672:	2b00      	cmp	r3, #0
 8003674:	db0b      	blt.n	800368e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003676:	79fb      	ldrb	r3, [r7, #7]
 8003678:	f003 021f 	and.w	r2, r3, #31
 800367c:	4907      	ldr	r1, [pc, #28]	; (800369c <__NVIC_EnableIRQ+0x38>)
 800367e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003682:	095b      	lsrs	r3, r3, #5
 8003684:	2001      	movs	r0, #1
 8003686:	fa00 f202 	lsl.w	r2, r0, r2
 800368a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800368e:	bf00      	nop
 8003690:	370c      	adds	r7, #12
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr
 800369a:	bf00      	nop
 800369c:	e000e100 	.word	0xe000e100

080036a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	4603      	mov	r3, r0
 80036a8:	6039      	str	r1, [r7, #0]
 80036aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	db0a      	blt.n	80036ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	b2da      	uxtb	r2, r3
 80036b8:	490c      	ldr	r1, [pc, #48]	; (80036ec <__NVIC_SetPriority+0x4c>)
 80036ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036be:	0112      	lsls	r2, r2, #4
 80036c0:	b2d2      	uxtb	r2, r2
 80036c2:	440b      	add	r3, r1
 80036c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036c8:	e00a      	b.n	80036e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	b2da      	uxtb	r2, r3
 80036ce:	4908      	ldr	r1, [pc, #32]	; (80036f0 <__NVIC_SetPriority+0x50>)
 80036d0:	79fb      	ldrb	r3, [r7, #7]
 80036d2:	f003 030f 	and.w	r3, r3, #15
 80036d6:	3b04      	subs	r3, #4
 80036d8:	0112      	lsls	r2, r2, #4
 80036da:	b2d2      	uxtb	r2, r2
 80036dc:	440b      	add	r3, r1
 80036de:	761a      	strb	r2, [r3, #24]
}
 80036e0:	bf00      	nop
 80036e2:	370c      	adds	r7, #12
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr
 80036ec:	e000e100 	.word	0xe000e100
 80036f0:	e000ed00 	.word	0xe000ed00

080036f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b089      	sub	sp, #36	; 0x24
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	60f8      	str	r0, [r7, #12]
 80036fc:	60b9      	str	r1, [r7, #8]
 80036fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f003 0307 	and.w	r3, r3, #7
 8003706:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	f1c3 0307 	rsb	r3, r3, #7
 800370e:	2b04      	cmp	r3, #4
 8003710:	bf28      	it	cs
 8003712:	2304      	movcs	r3, #4
 8003714:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	3304      	adds	r3, #4
 800371a:	2b06      	cmp	r3, #6
 800371c:	d902      	bls.n	8003724 <NVIC_EncodePriority+0x30>
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	3b03      	subs	r3, #3
 8003722:	e000      	b.n	8003726 <NVIC_EncodePriority+0x32>
 8003724:	2300      	movs	r3, #0
 8003726:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003728:	f04f 32ff 	mov.w	r2, #4294967295
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	fa02 f303 	lsl.w	r3, r2, r3
 8003732:	43da      	mvns	r2, r3
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	401a      	ands	r2, r3
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800373c:	f04f 31ff 	mov.w	r1, #4294967295
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	fa01 f303 	lsl.w	r3, r1, r3
 8003746:	43d9      	mvns	r1, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800374c:	4313      	orrs	r3, r2
         );
}
 800374e:	4618      	mov	r0, r3
 8003750:	3724      	adds	r7, #36	; 0x24
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr
	...

0800375c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	3b01      	subs	r3, #1
 8003768:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800376c:	d301      	bcc.n	8003772 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800376e:	2301      	movs	r3, #1
 8003770:	e00f      	b.n	8003792 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003772:	4a0a      	ldr	r2, [pc, #40]	; (800379c <SysTick_Config+0x40>)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	3b01      	subs	r3, #1
 8003778:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800377a:	210f      	movs	r1, #15
 800377c:	f04f 30ff 	mov.w	r0, #4294967295
 8003780:	f7ff ff8e 	bl	80036a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003784:	4b05      	ldr	r3, [pc, #20]	; (800379c <SysTick_Config+0x40>)
 8003786:	2200      	movs	r2, #0
 8003788:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800378a:	4b04      	ldr	r3, [pc, #16]	; (800379c <SysTick_Config+0x40>)
 800378c:	2207      	movs	r2, #7
 800378e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003790:	2300      	movs	r3, #0
}
 8003792:	4618      	mov	r0, r3
 8003794:	3708      	adds	r7, #8
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	e000e010 	.word	0xe000e010

080037a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b082      	sub	sp, #8
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f7ff ff29 	bl	8003600 <__NVIC_SetPriorityGrouping>
}
 80037ae:	bf00      	nop
 80037b0:	3708      	adds	r7, #8
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}

080037b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037b6:	b580      	push	{r7, lr}
 80037b8:	b086      	sub	sp, #24
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	4603      	mov	r3, r0
 80037be:	60b9      	str	r1, [r7, #8]
 80037c0:	607a      	str	r2, [r7, #4]
 80037c2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80037c4:	f7ff ff40 	bl	8003648 <__NVIC_GetPriorityGrouping>
 80037c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	68b9      	ldr	r1, [r7, #8]
 80037ce:	6978      	ldr	r0, [r7, #20]
 80037d0:	f7ff ff90 	bl	80036f4 <NVIC_EncodePriority>
 80037d4:	4602      	mov	r2, r0
 80037d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037da:	4611      	mov	r1, r2
 80037dc:	4618      	mov	r0, r3
 80037de:	f7ff ff5f 	bl	80036a0 <__NVIC_SetPriority>
}
 80037e2:	bf00      	nop
 80037e4:	3718      	adds	r7, #24
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}

080037ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037ea:	b580      	push	{r7, lr}
 80037ec:	b082      	sub	sp, #8
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	4603      	mov	r3, r0
 80037f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037f8:	4618      	mov	r0, r3
 80037fa:	f7ff ff33 	bl	8003664 <__NVIC_EnableIRQ>
}
 80037fe:	bf00      	nop
 8003800:	3708      	adds	r7, #8
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}

08003806 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003806:	b580      	push	{r7, lr}
 8003808:	b082      	sub	sp, #8
 800380a:	af00      	add	r7, sp, #0
 800380c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f7ff ffa4 	bl	800375c <SysTick_Config>
 8003814:	4603      	mov	r3, r0
}
 8003816:	4618      	mov	r0, r3
 8003818:	3708      	adds	r7, #8
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}

0800381e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800381e:	b480      	push	{r7}
 8003820:	b085      	sub	sp, #20
 8003822:	af00      	add	r7, sp, #0
 8003824:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003826:	2300      	movs	r3, #0
 8003828:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003830:	b2db      	uxtb	r3, r3
 8003832:	2b02      	cmp	r3, #2
 8003834:	d005      	beq.n	8003842 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2204      	movs	r2, #4
 800383a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	73fb      	strb	r3, [r7, #15]
 8003840:	e037      	b.n	80038b2 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f022 020e 	bic.w	r2, r2, #14
 8003850:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800385c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003860:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f022 0201 	bic.w	r2, r2, #1
 8003870:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003876:	f003 021f 	and.w	r2, r3, #31
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387e:	2101      	movs	r1, #1
 8003880:	fa01 f202 	lsl.w	r2, r1, r2
 8003884:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800388e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003894:	2b00      	cmp	r3, #0
 8003896:	d00c      	beq.n	80038b2 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038a2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038a6:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80038b0:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2201      	movs	r2, #1
 80038b6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80038c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3714      	adds	r7, #20
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr

080038d0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038d8:	2300      	movs	r3, #0
 80038da:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	2b02      	cmp	r3, #2
 80038e6:	d00d      	beq.n	8003904 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2204      	movs	r2, #4
 80038ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2201      	movs	r2, #1
 80038f2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	73fb      	strb	r3, [r7, #15]
 8003902:	e047      	b.n	8003994 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f022 020e 	bic.w	r2, r2, #14
 8003912:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f022 0201 	bic.w	r2, r2, #1
 8003922:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800392e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003932:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003938:	f003 021f 	and.w	r2, r3, #31
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003940:	2101      	movs	r1, #1
 8003942:	fa01 f202 	lsl.w	r2, r1, r2
 8003946:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003950:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003956:	2b00      	cmp	r3, #0
 8003958:	d00c      	beq.n	8003974 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003964:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003968:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003972:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003988:	2b00      	cmp	r3, #0
 800398a:	d003      	beq.n	8003994 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	4798      	blx	r3
    }
  }
  return status;
 8003994:	7bfb      	ldrb	r3, [r7, #15]
}
 8003996:	4618      	mov	r0, r3
 8003998:	3710      	adds	r7, #16
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
	...

080039a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b087      	sub	sp, #28
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80039aa:	2300      	movs	r3, #0
 80039ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80039ae:	e15a      	b.n	8003c66 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	2101      	movs	r1, #1
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	fa01 f303 	lsl.w	r3, r1, r3
 80039bc:	4013      	ands	r3, r2
 80039be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	f000 814c 	beq.w	8003c60 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f003 0303 	and.w	r3, r3, #3
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d005      	beq.n	80039e0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80039dc:	2b02      	cmp	r3, #2
 80039de:	d130      	bne.n	8003a42 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	005b      	lsls	r3, r3, #1
 80039ea:	2203      	movs	r2, #3
 80039ec:	fa02 f303 	lsl.w	r3, r2, r3
 80039f0:	43db      	mvns	r3, r3
 80039f2:	693a      	ldr	r2, [r7, #16]
 80039f4:	4013      	ands	r3, r2
 80039f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	68da      	ldr	r2, [r3, #12]
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	005b      	lsls	r3, r3, #1
 8003a00:	fa02 f303 	lsl.w	r3, r2, r3
 8003a04:	693a      	ldr	r2, [r7, #16]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	693a      	ldr	r2, [r7, #16]
 8003a0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a16:	2201      	movs	r2, #1
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1e:	43db      	mvns	r3, r3
 8003a20:	693a      	ldr	r2, [r7, #16]
 8003a22:	4013      	ands	r3, r2
 8003a24:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	091b      	lsrs	r3, r3, #4
 8003a2c:	f003 0201 	and.w	r2, r3, #1
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	fa02 f303 	lsl.w	r3, r2, r3
 8003a36:	693a      	ldr	r2, [r7, #16]
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	693a      	ldr	r2, [r7, #16]
 8003a40:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	f003 0303 	and.w	r3, r3, #3
 8003a4a:	2b03      	cmp	r3, #3
 8003a4c:	d017      	beq.n	8003a7e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	005b      	lsls	r3, r3, #1
 8003a58:	2203      	movs	r2, #3
 8003a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5e:	43db      	mvns	r3, r3
 8003a60:	693a      	ldr	r2, [r7, #16]
 8003a62:	4013      	ands	r3, r2
 8003a64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	689a      	ldr	r2, [r3, #8]
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	005b      	lsls	r3, r3, #1
 8003a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a72:	693a      	ldr	r2, [r7, #16]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	693a      	ldr	r2, [r7, #16]
 8003a7c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f003 0303 	and.w	r3, r3, #3
 8003a86:	2b02      	cmp	r3, #2
 8003a88:	d123      	bne.n	8003ad2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	08da      	lsrs	r2, r3, #3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	3208      	adds	r2, #8
 8003a92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a96:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	f003 0307 	and.w	r3, r3, #7
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	220f      	movs	r2, #15
 8003aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa6:	43db      	mvns	r3, r3
 8003aa8:	693a      	ldr	r2, [r7, #16]
 8003aaa:	4013      	ands	r3, r2
 8003aac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	691a      	ldr	r2, [r3, #16]
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	f003 0307 	and.w	r3, r3, #7
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	fa02 f303 	lsl.w	r3, r2, r3
 8003abe:	693a      	ldr	r2, [r7, #16]
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	08da      	lsrs	r2, r3, #3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	3208      	adds	r2, #8
 8003acc:	6939      	ldr	r1, [r7, #16]
 8003ace:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	005b      	lsls	r3, r3, #1
 8003adc:	2203      	movs	r2, #3
 8003ade:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae2:	43db      	mvns	r3, r3
 8003ae4:	693a      	ldr	r2, [r7, #16]
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	f003 0203 	and.w	r2, r3, #3
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	005b      	lsls	r3, r3, #1
 8003af6:	fa02 f303 	lsl.w	r3, r2, r3
 8003afa:	693a      	ldr	r2, [r7, #16]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	693a      	ldr	r2, [r7, #16]
 8003b04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	f000 80a6 	beq.w	8003c60 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b14:	4b5b      	ldr	r3, [pc, #364]	; (8003c84 <HAL_GPIO_Init+0x2e4>)
 8003b16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b18:	4a5a      	ldr	r2, [pc, #360]	; (8003c84 <HAL_GPIO_Init+0x2e4>)
 8003b1a:	f043 0301 	orr.w	r3, r3, #1
 8003b1e:	6613      	str	r3, [r2, #96]	; 0x60
 8003b20:	4b58      	ldr	r3, [pc, #352]	; (8003c84 <HAL_GPIO_Init+0x2e4>)
 8003b22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b24:	f003 0301 	and.w	r3, r3, #1
 8003b28:	60bb      	str	r3, [r7, #8]
 8003b2a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b2c:	4a56      	ldr	r2, [pc, #344]	; (8003c88 <HAL_GPIO_Init+0x2e8>)
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	089b      	lsrs	r3, r3, #2
 8003b32:	3302      	adds	r3, #2
 8003b34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b38:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	f003 0303 	and.w	r3, r3, #3
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	220f      	movs	r2, #15
 8003b44:	fa02 f303 	lsl.w	r3, r2, r3
 8003b48:	43db      	mvns	r3, r3
 8003b4a:	693a      	ldr	r2, [r7, #16]
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003b56:	d01f      	beq.n	8003b98 <HAL_GPIO_Init+0x1f8>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	4a4c      	ldr	r2, [pc, #304]	; (8003c8c <HAL_GPIO_Init+0x2ec>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d019      	beq.n	8003b94 <HAL_GPIO_Init+0x1f4>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	4a4b      	ldr	r2, [pc, #300]	; (8003c90 <HAL_GPIO_Init+0x2f0>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d013      	beq.n	8003b90 <HAL_GPIO_Init+0x1f0>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	4a4a      	ldr	r2, [pc, #296]	; (8003c94 <HAL_GPIO_Init+0x2f4>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d00d      	beq.n	8003b8c <HAL_GPIO_Init+0x1ec>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	4a49      	ldr	r2, [pc, #292]	; (8003c98 <HAL_GPIO_Init+0x2f8>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d007      	beq.n	8003b88 <HAL_GPIO_Init+0x1e8>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	4a48      	ldr	r2, [pc, #288]	; (8003c9c <HAL_GPIO_Init+0x2fc>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d101      	bne.n	8003b84 <HAL_GPIO_Init+0x1e4>
 8003b80:	2305      	movs	r3, #5
 8003b82:	e00a      	b.n	8003b9a <HAL_GPIO_Init+0x1fa>
 8003b84:	2306      	movs	r3, #6
 8003b86:	e008      	b.n	8003b9a <HAL_GPIO_Init+0x1fa>
 8003b88:	2304      	movs	r3, #4
 8003b8a:	e006      	b.n	8003b9a <HAL_GPIO_Init+0x1fa>
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	e004      	b.n	8003b9a <HAL_GPIO_Init+0x1fa>
 8003b90:	2302      	movs	r3, #2
 8003b92:	e002      	b.n	8003b9a <HAL_GPIO_Init+0x1fa>
 8003b94:	2301      	movs	r3, #1
 8003b96:	e000      	b.n	8003b9a <HAL_GPIO_Init+0x1fa>
 8003b98:	2300      	movs	r3, #0
 8003b9a:	697a      	ldr	r2, [r7, #20]
 8003b9c:	f002 0203 	and.w	r2, r2, #3
 8003ba0:	0092      	lsls	r2, r2, #2
 8003ba2:	4093      	lsls	r3, r2
 8003ba4:	693a      	ldr	r2, [r7, #16]
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003baa:	4937      	ldr	r1, [pc, #220]	; (8003c88 <HAL_GPIO_Init+0x2e8>)
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	089b      	lsrs	r3, r3, #2
 8003bb0:	3302      	adds	r3, #2
 8003bb2:	693a      	ldr	r2, [r7, #16]
 8003bb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003bb8:	4b39      	ldr	r3, [pc, #228]	; (8003ca0 <HAL_GPIO_Init+0x300>)
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	43db      	mvns	r3, r3
 8003bc2:	693a      	ldr	r2, [r7, #16]
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d003      	beq.n	8003bdc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003bd4:	693a      	ldr	r2, [r7, #16]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003bdc:	4a30      	ldr	r2, [pc, #192]	; (8003ca0 <HAL_GPIO_Init+0x300>)
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003be2:	4b2f      	ldr	r3, [pc, #188]	; (8003ca0 <HAL_GPIO_Init+0x300>)
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	43db      	mvns	r3, r3
 8003bec:	693a      	ldr	r2, [r7, #16]
 8003bee:	4013      	ands	r3, r2
 8003bf0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d003      	beq.n	8003c06 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003bfe:	693a      	ldr	r2, [r7, #16]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003c06:	4a26      	ldr	r2, [pc, #152]	; (8003ca0 <HAL_GPIO_Init+0x300>)
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003c0c:	4b24      	ldr	r3, [pc, #144]	; (8003ca0 <HAL_GPIO_Init+0x300>)
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	43db      	mvns	r3, r3
 8003c16:	693a      	ldr	r2, [r7, #16]
 8003c18:	4013      	ands	r3, r2
 8003c1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d003      	beq.n	8003c30 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003c28:	693a      	ldr	r2, [r7, #16]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003c30:	4a1b      	ldr	r2, [pc, #108]	; (8003ca0 <HAL_GPIO_Init+0x300>)
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003c36:	4b1a      	ldr	r3, [pc, #104]	; (8003ca0 <HAL_GPIO_Init+0x300>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	43db      	mvns	r3, r3
 8003c40:	693a      	ldr	r2, [r7, #16]
 8003c42:	4013      	ands	r3, r2
 8003c44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d003      	beq.n	8003c5a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003c52:	693a      	ldr	r2, [r7, #16]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003c5a:	4a11      	ldr	r2, [pc, #68]	; (8003ca0 <HAL_GPIO_Init+0x300>)
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	3301      	adds	r3, #1
 8003c64:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	fa22 f303 	lsr.w	r3, r2, r3
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	f47f ae9d 	bne.w	80039b0 <HAL_GPIO_Init+0x10>
  }
}
 8003c76:	bf00      	nop
 8003c78:	bf00      	nop
 8003c7a:	371c      	adds	r7, #28
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr
 8003c84:	40021000 	.word	0x40021000
 8003c88:	40010000 	.word	0x40010000
 8003c8c:	48000400 	.word	0x48000400
 8003c90:	48000800 	.word	0x48000800
 8003c94:	48000c00 	.word	0x48000c00
 8003c98:	48001000 	.word	0x48001000
 8003c9c:	48001400 	.word	0x48001400
 8003ca0:	40010400 	.word	0x40010400

08003ca4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	460b      	mov	r3, r1
 8003cae:	807b      	strh	r3, [r7, #2]
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003cb4:	787b      	ldrb	r3, [r7, #1]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d003      	beq.n	8003cc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003cba:	887a      	ldrh	r2, [r7, #2]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003cc0:	e002      	b.n	8003cc8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003cc2:	887a      	ldrh	r2, [r7, #2]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003cc8:	bf00      	nop
 8003cca:	370c      	adds	r7, #12
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr

08003cd4 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b085      	sub	sp, #20
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
 8003cdc:	460b      	mov	r3, r1
 8003cde:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	695b      	ldr	r3, [r3, #20]
 8003ce4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003ce6:	887a      	ldrh	r2, [r7, #2]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	4013      	ands	r3, r2
 8003cec:	041a      	lsls	r2, r3, #16
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	43d9      	mvns	r1, r3
 8003cf2:	887b      	ldrh	r3, [r7, #2]
 8003cf4:	400b      	ands	r3, r1
 8003cf6:	431a      	orrs	r2, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	619a      	str	r2, [r3, #24]
}
 8003cfc:	bf00      	nop
 8003cfe:	3714      	adds	r7, #20
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr

08003d08 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b082      	sub	sp, #8
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	4603      	mov	r3, r0
 8003d10:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003d12:	4b08      	ldr	r3, [pc, #32]	; (8003d34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d14:	695a      	ldr	r2, [r3, #20]
 8003d16:	88fb      	ldrh	r3, [r7, #6]
 8003d18:	4013      	ands	r3, r2
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d006      	beq.n	8003d2c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003d1e:	4a05      	ldr	r2, [pc, #20]	; (8003d34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d20:	88fb      	ldrh	r3, [r7, #6]
 8003d22:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003d24:	88fb      	ldrh	r3, [r7, #6]
 8003d26:	4618      	mov	r0, r3
 8003d28:	f7fc fc90 	bl	800064c <HAL_GPIO_EXTI_Callback>
  }
}
 8003d2c:	bf00      	nop
 8003d2e:	3708      	adds	r7, #8
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	40010400 	.word	0x40010400

08003d38 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b085      	sub	sp, #20
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d141      	bne.n	8003dca <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d46:	4b4b      	ldr	r3, [pc, #300]	; (8003e74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d52:	d131      	bne.n	8003db8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d54:	4b47      	ldr	r3, [pc, #284]	; (8003e74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d5a:	4a46      	ldr	r2, [pc, #280]	; (8003e74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d60:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d64:	4b43      	ldr	r3, [pc, #268]	; (8003e74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d6c:	4a41      	ldr	r2, [pc, #260]	; (8003e74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d72:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003d74:	4b40      	ldr	r3, [pc, #256]	; (8003e78 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	2232      	movs	r2, #50	; 0x32
 8003d7a:	fb02 f303 	mul.w	r3, r2, r3
 8003d7e:	4a3f      	ldr	r2, [pc, #252]	; (8003e7c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003d80:	fba2 2303 	umull	r2, r3, r2, r3
 8003d84:	0c9b      	lsrs	r3, r3, #18
 8003d86:	3301      	adds	r3, #1
 8003d88:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d8a:	e002      	b.n	8003d92 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	3b01      	subs	r3, #1
 8003d90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d92:	4b38      	ldr	r3, [pc, #224]	; (8003e74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d94:	695b      	ldr	r3, [r3, #20]
 8003d96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d9e:	d102      	bne.n	8003da6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d1f2      	bne.n	8003d8c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003da6:	4b33      	ldr	r3, [pc, #204]	; (8003e74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003da8:	695b      	ldr	r3, [r3, #20]
 8003daa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003db2:	d158      	bne.n	8003e66 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003db4:	2303      	movs	r3, #3
 8003db6:	e057      	b.n	8003e68 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003db8:	4b2e      	ldr	r3, [pc, #184]	; (8003e74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003dbe:	4a2d      	ldr	r2, [pc, #180]	; (8003e74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003dc4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003dc8:	e04d      	b.n	8003e66 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dd0:	d141      	bne.n	8003e56 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003dd2:	4b28      	ldr	r3, [pc, #160]	; (8003e74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003dda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dde:	d131      	bne.n	8003e44 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003de0:	4b24      	ldr	r3, [pc, #144]	; (8003e74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003de2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003de6:	4a23      	ldr	r2, [pc, #140]	; (8003e74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003de8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003df0:	4b20      	ldr	r3, [pc, #128]	; (8003e74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003df8:	4a1e      	ldr	r2, [pc, #120]	; (8003e74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dfa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003dfe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003e00:	4b1d      	ldr	r3, [pc, #116]	; (8003e78 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	2232      	movs	r2, #50	; 0x32
 8003e06:	fb02 f303 	mul.w	r3, r2, r3
 8003e0a:	4a1c      	ldr	r2, [pc, #112]	; (8003e7c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e10:	0c9b      	lsrs	r3, r3, #18
 8003e12:	3301      	adds	r3, #1
 8003e14:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e16:	e002      	b.n	8003e1e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	3b01      	subs	r3, #1
 8003e1c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e1e:	4b15      	ldr	r3, [pc, #84]	; (8003e74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e20:	695b      	ldr	r3, [r3, #20]
 8003e22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e2a:	d102      	bne.n	8003e32 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d1f2      	bne.n	8003e18 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e32:	4b10      	ldr	r3, [pc, #64]	; (8003e74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e34:	695b      	ldr	r3, [r3, #20]
 8003e36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e3e:	d112      	bne.n	8003e66 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003e40:	2303      	movs	r3, #3
 8003e42:	e011      	b.n	8003e68 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e44:	4b0b      	ldr	r3, [pc, #44]	; (8003e74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e4a:	4a0a      	ldr	r2, [pc, #40]	; (8003e74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e50:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003e54:	e007      	b.n	8003e66 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003e56:	4b07      	ldr	r3, [pc, #28]	; (8003e74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003e5e:	4a05      	ldr	r2, [pc, #20]	; (8003e74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e60:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e64:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003e66:	2300      	movs	r3, #0
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3714      	adds	r7, #20
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr
 8003e74:	40007000 	.word	0x40007000
 8003e78:	2000009c 	.word	0x2000009c
 8003e7c:	431bde83 	.word	0x431bde83

08003e80 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003e80:	b480      	push	{r7}
 8003e82:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003e84:	4b05      	ldr	r3, [pc, #20]	; (8003e9c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	4a04      	ldr	r2, [pc, #16]	; (8003e9c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003e8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e8e:	6093      	str	r3, [r2, #8]
}
 8003e90:	bf00      	nop
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr
 8003e9a:	bf00      	nop
 8003e9c:	40007000 	.word	0x40007000

08003ea0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b088      	sub	sp, #32
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d101      	bne.n	8003eb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e306      	b.n	80044c0 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 0301 	and.w	r3, r3, #1
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d075      	beq.n	8003faa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ebe:	4b97      	ldr	r3, [pc, #604]	; (800411c <HAL_RCC_OscConfig+0x27c>)
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	f003 030c 	and.w	r3, r3, #12
 8003ec6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ec8:	4b94      	ldr	r3, [pc, #592]	; (800411c <HAL_RCC_OscConfig+0x27c>)
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	f003 0303 	and.w	r3, r3, #3
 8003ed0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003ed2:	69bb      	ldr	r3, [r7, #24]
 8003ed4:	2b0c      	cmp	r3, #12
 8003ed6:	d102      	bne.n	8003ede <HAL_RCC_OscConfig+0x3e>
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	2b03      	cmp	r3, #3
 8003edc:	d002      	beq.n	8003ee4 <HAL_RCC_OscConfig+0x44>
 8003ede:	69bb      	ldr	r3, [r7, #24]
 8003ee0:	2b08      	cmp	r3, #8
 8003ee2:	d10b      	bne.n	8003efc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ee4:	4b8d      	ldr	r3, [pc, #564]	; (800411c <HAL_RCC_OscConfig+0x27c>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d05b      	beq.n	8003fa8 <HAL_RCC_OscConfig+0x108>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d157      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e2e1      	b.n	80044c0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f04:	d106      	bne.n	8003f14 <HAL_RCC_OscConfig+0x74>
 8003f06:	4b85      	ldr	r3, [pc, #532]	; (800411c <HAL_RCC_OscConfig+0x27c>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a84      	ldr	r2, [pc, #528]	; (800411c <HAL_RCC_OscConfig+0x27c>)
 8003f0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f10:	6013      	str	r3, [r2, #0]
 8003f12:	e01d      	b.n	8003f50 <HAL_RCC_OscConfig+0xb0>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f1c:	d10c      	bne.n	8003f38 <HAL_RCC_OscConfig+0x98>
 8003f1e:	4b7f      	ldr	r3, [pc, #508]	; (800411c <HAL_RCC_OscConfig+0x27c>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a7e      	ldr	r2, [pc, #504]	; (800411c <HAL_RCC_OscConfig+0x27c>)
 8003f24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f28:	6013      	str	r3, [r2, #0]
 8003f2a:	4b7c      	ldr	r3, [pc, #496]	; (800411c <HAL_RCC_OscConfig+0x27c>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a7b      	ldr	r2, [pc, #492]	; (800411c <HAL_RCC_OscConfig+0x27c>)
 8003f30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f34:	6013      	str	r3, [r2, #0]
 8003f36:	e00b      	b.n	8003f50 <HAL_RCC_OscConfig+0xb0>
 8003f38:	4b78      	ldr	r3, [pc, #480]	; (800411c <HAL_RCC_OscConfig+0x27c>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a77      	ldr	r2, [pc, #476]	; (800411c <HAL_RCC_OscConfig+0x27c>)
 8003f3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f42:	6013      	str	r3, [r2, #0]
 8003f44:	4b75      	ldr	r3, [pc, #468]	; (800411c <HAL_RCC_OscConfig+0x27c>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a74      	ldr	r2, [pc, #464]	; (800411c <HAL_RCC_OscConfig+0x27c>)
 8003f4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d013      	beq.n	8003f80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f58:	f7fd fc2a 	bl	80017b0 <HAL_GetTick>
 8003f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f5e:	e008      	b.n	8003f72 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f60:	f7fd fc26 	bl	80017b0 <HAL_GetTick>
 8003f64:	4602      	mov	r2, r0
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	2b64      	cmp	r3, #100	; 0x64
 8003f6c:	d901      	bls.n	8003f72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	e2a6      	b.n	80044c0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f72:	4b6a      	ldr	r3, [pc, #424]	; (800411c <HAL_RCC_OscConfig+0x27c>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d0f0      	beq.n	8003f60 <HAL_RCC_OscConfig+0xc0>
 8003f7e:	e014      	b.n	8003faa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f80:	f7fd fc16 	bl	80017b0 <HAL_GetTick>
 8003f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f86:	e008      	b.n	8003f9a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f88:	f7fd fc12 	bl	80017b0 <HAL_GetTick>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	2b64      	cmp	r3, #100	; 0x64
 8003f94:	d901      	bls.n	8003f9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e292      	b.n	80044c0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f9a:	4b60      	ldr	r3, [pc, #384]	; (800411c <HAL_RCC_OscConfig+0x27c>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d1f0      	bne.n	8003f88 <HAL_RCC_OscConfig+0xe8>
 8003fa6:	e000      	b.n	8003faa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fa8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 0302 	and.w	r3, r3, #2
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d075      	beq.n	80040a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fb6:	4b59      	ldr	r3, [pc, #356]	; (800411c <HAL_RCC_OscConfig+0x27c>)
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	f003 030c 	and.w	r3, r3, #12
 8003fbe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003fc0:	4b56      	ldr	r3, [pc, #344]	; (800411c <HAL_RCC_OscConfig+0x27c>)
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	f003 0303 	and.w	r3, r3, #3
 8003fc8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003fca:	69bb      	ldr	r3, [r7, #24]
 8003fcc:	2b0c      	cmp	r3, #12
 8003fce:	d102      	bne.n	8003fd6 <HAL_RCC_OscConfig+0x136>
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	d002      	beq.n	8003fdc <HAL_RCC_OscConfig+0x13c>
 8003fd6:	69bb      	ldr	r3, [r7, #24]
 8003fd8:	2b04      	cmp	r3, #4
 8003fda:	d11f      	bne.n	800401c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003fdc:	4b4f      	ldr	r3, [pc, #316]	; (800411c <HAL_RCC_OscConfig+0x27c>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d005      	beq.n	8003ff4 <HAL_RCC_OscConfig+0x154>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d101      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e265      	b.n	80044c0 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ff4:	4b49      	ldr	r3, [pc, #292]	; (800411c <HAL_RCC_OscConfig+0x27c>)
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	691b      	ldr	r3, [r3, #16]
 8004000:	061b      	lsls	r3, r3, #24
 8004002:	4946      	ldr	r1, [pc, #280]	; (800411c <HAL_RCC_OscConfig+0x27c>)
 8004004:	4313      	orrs	r3, r2
 8004006:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004008:	4b45      	ldr	r3, [pc, #276]	; (8004120 <HAL_RCC_OscConfig+0x280>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4618      	mov	r0, r3
 800400e:	f7fd fb83 	bl	8001718 <HAL_InitTick>
 8004012:	4603      	mov	r3, r0
 8004014:	2b00      	cmp	r3, #0
 8004016:	d043      	beq.n	80040a0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e251      	b.n	80044c0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d023      	beq.n	800406c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004024:	4b3d      	ldr	r3, [pc, #244]	; (800411c <HAL_RCC_OscConfig+0x27c>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a3c      	ldr	r2, [pc, #240]	; (800411c <HAL_RCC_OscConfig+0x27c>)
 800402a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800402e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004030:	f7fd fbbe 	bl	80017b0 <HAL_GetTick>
 8004034:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004036:	e008      	b.n	800404a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004038:	f7fd fbba 	bl	80017b0 <HAL_GetTick>
 800403c:	4602      	mov	r2, r0
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	2b02      	cmp	r3, #2
 8004044:	d901      	bls.n	800404a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	e23a      	b.n	80044c0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800404a:	4b34      	ldr	r3, [pc, #208]	; (800411c <HAL_RCC_OscConfig+0x27c>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004052:	2b00      	cmp	r3, #0
 8004054:	d0f0      	beq.n	8004038 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004056:	4b31      	ldr	r3, [pc, #196]	; (800411c <HAL_RCC_OscConfig+0x27c>)
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	691b      	ldr	r3, [r3, #16]
 8004062:	061b      	lsls	r3, r3, #24
 8004064:	492d      	ldr	r1, [pc, #180]	; (800411c <HAL_RCC_OscConfig+0x27c>)
 8004066:	4313      	orrs	r3, r2
 8004068:	604b      	str	r3, [r1, #4]
 800406a:	e01a      	b.n	80040a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800406c:	4b2b      	ldr	r3, [pc, #172]	; (800411c <HAL_RCC_OscConfig+0x27c>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a2a      	ldr	r2, [pc, #168]	; (800411c <HAL_RCC_OscConfig+0x27c>)
 8004072:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004076:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004078:	f7fd fb9a 	bl	80017b0 <HAL_GetTick>
 800407c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800407e:	e008      	b.n	8004092 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004080:	f7fd fb96 	bl	80017b0 <HAL_GetTick>
 8004084:	4602      	mov	r2, r0
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	2b02      	cmp	r3, #2
 800408c:	d901      	bls.n	8004092 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e216      	b.n	80044c0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004092:	4b22      	ldr	r3, [pc, #136]	; (800411c <HAL_RCC_OscConfig+0x27c>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800409a:	2b00      	cmp	r3, #0
 800409c:	d1f0      	bne.n	8004080 <HAL_RCC_OscConfig+0x1e0>
 800409e:	e000      	b.n	80040a2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040a0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0308 	and.w	r3, r3, #8
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d041      	beq.n	8004132 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	695b      	ldr	r3, [r3, #20]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d01c      	beq.n	80040f0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040b6:	4b19      	ldr	r3, [pc, #100]	; (800411c <HAL_RCC_OscConfig+0x27c>)
 80040b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040bc:	4a17      	ldr	r2, [pc, #92]	; (800411c <HAL_RCC_OscConfig+0x27c>)
 80040be:	f043 0301 	orr.w	r3, r3, #1
 80040c2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040c6:	f7fd fb73 	bl	80017b0 <HAL_GetTick>
 80040ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80040cc:	e008      	b.n	80040e0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040ce:	f7fd fb6f 	bl	80017b0 <HAL_GetTick>
 80040d2:	4602      	mov	r2, r0
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	2b02      	cmp	r3, #2
 80040da:	d901      	bls.n	80040e0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80040dc:	2303      	movs	r3, #3
 80040de:	e1ef      	b.n	80044c0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80040e0:	4b0e      	ldr	r3, [pc, #56]	; (800411c <HAL_RCC_OscConfig+0x27c>)
 80040e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040e6:	f003 0302 	and.w	r3, r3, #2
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d0ef      	beq.n	80040ce <HAL_RCC_OscConfig+0x22e>
 80040ee:	e020      	b.n	8004132 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040f0:	4b0a      	ldr	r3, [pc, #40]	; (800411c <HAL_RCC_OscConfig+0x27c>)
 80040f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040f6:	4a09      	ldr	r2, [pc, #36]	; (800411c <HAL_RCC_OscConfig+0x27c>)
 80040f8:	f023 0301 	bic.w	r3, r3, #1
 80040fc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004100:	f7fd fb56 	bl	80017b0 <HAL_GetTick>
 8004104:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004106:	e00d      	b.n	8004124 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004108:	f7fd fb52 	bl	80017b0 <HAL_GetTick>
 800410c:	4602      	mov	r2, r0
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	2b02      	cmp	r3, #2
 8004114:	d906      	bls.n	8004124 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	e1d2      	b.n	80044c0 <HAL_RCC_OscConfig+0x620>
 800411a:	bf00      	nop
 800411c:	40021000 	.word	0x40021000
 8004120:	200000a0 	.word	0x200000a0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004124:	4b8c      	ldr	r3, [pc, #560]	; (8004358 <HAL_RCC_OscConfig+0x4b8>)
 8004126:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800412a:	f003 0302 	and.w	r3, r3, #2
 800412e:	2b00      	cmp	r3, #0
 8004130:	d1ea      	bne.n	8004108 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0304 	and.w	r3, r3, #4
 800413a:	2b00      	cmp	r3, #0
 800413c:	f000 80a6 	beq.w	800428c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004140:	2300      	movs	r3, #0
 8004142:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004144:	4b84      	ldr	r3, [pc, #528]	; (8004358 <HAL_RCC_OscConfig+0x4b8>)
 8004146:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004148:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800414c:	2b00      	cmp	r3, #0
 800414e:	d101      	bne.n	8004154 <HAL_RCC_OscConfig+0x2b4>
 8004150:	2301      	movs	r3, #1
 8004152:	e000      	b.n	8004156 <HAL_RCC_OscConfig+0x2b6>
 8004154:	2300      	movs	r3, #0
 8004156:	2b00      	cmp	r3, #0
 8004158:	d00d      	beq.n	8004176 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800415a:	4b7f      	ldr	r3, [pc, #508]	; (8004358 <HAL_RCC_OscConfig+0x4b8>)
 800415c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800415e:	4a7e      	ldr	r2, [pc, #504]	; (8004358 <HAL_RCC_OscConfig+0x4b8>)
 8004160:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004164:	6593      	str	r3, [r2, #88]	; 0x58
 8004166:	4b7c      	ldr	r3, [pc, #496]	; (8004358 <HAL_RCC_OscConfig+0x4b8>)
 8004168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800416a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800416e:	60fb      	str	r3, [r7, #12]
 8004170:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004172:	2301      	movs	r3, #1
 8004174:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004176:	4b79      	ldr	r3, [pc, #484]	; (800435c <HAL_RCC_OscConfig+0x4bc>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800417e:	2b00      	cmp	r3, #0
 8004180:	d118      	bne.n	80041b4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004182:	4b76      	ldr	r3, [pc, #472]	; (800435c <HAL_RCC_OscConfig+0x4bc>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a75      	ldr	r2, [pc, #468]	; (800435c <HAL_RCC_OscConfig+0x4bc>)
 8004188:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800418c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800418e:	f7fd fb0f 	bl	80017b0 <HAL_GetTick>
 8004192:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004194:	e008      	b.n	80041a8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004196:	f7fd fb0b 	bl	80017b0 <HAL_GetTick>
 800419a:	4602      	mov	r2, r0
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	1ad3      	subs	r3, r2, r3
 80041a0:	2b02      	cmp	r3, #2
 80041a2:	d901      	bls.n	80041a8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80041a4:	2303      	movs	r3, #3
 80041a6:	e18b      	b.n	80044c0 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041a8:	4b6c      	ldr	r3, [pc, #432]	; (800435c <HAL_RCC_OscConfig+0x4bc>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d0f0      	beq.n	8004196 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d108      	bne.n	80041ce <HAL_RCC_OscConfig+0x32e>
 80041bc:	4b66      	ldr	r3, [pc, #408]	; (8004358 <HAL_RCC_OscConfig+0x4b8>)
 80041be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041c2:	4a65      	ldr	r2, [pc, #404]	; (8004358 <HAL_RCC_OscConfig+0x4b8>)
 80041c4:	f043 0301 	orr.w	r3, r3, #1
 80041c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041cc:	e024      	b.n	8004218 <HAL_RCC_OscConfig+0x378>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	2b05      	cmp	r3, #5
 80041d4:	d110      	bne.n	80041f8 <HAL_RCC_OscConfig+0x358>
 80041d6:	4b60      	ldr	r3, [pc, #384]	; (8004358 <HAL_RCC_OscConfig+0x4b8>)
 80041d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041dc:	4a5e      	ldr	r2, [pc, #376]	; (8004358 <HAL_RCC_OscConfig+0x4b8>)
 80041de:	f043 0304 	orr.w	r3, r3, #4
 80041e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041e6:	4b5c      	ldr	r3, [pc, #368]	; (8004358 <HAL_RCC_OscConfig+0x4b8>)
 80041e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ec:	4a5a      	ldr	r2, [pc, #360]	; (8004358 <HAL_RCC_OscConfig+0x4b8>)
 80041ee:	f043 0301 	orr.w	r3, r3, #1
 80041f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041f6:	e00f      	b.n	8004218 <HAL_RCC_OscConfig+0x378>
 80041f8:	4b57      	ldr	r3, [pc, #348]	; (8004358 <HAL_RCC_OscConfig+0x4b8>)
 80041fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041fe:	4a56      	ldr	r2, [pc, #344]	; (8004358 <HAL_RCC_OscConfig+0x4b8>)
 8004200:	f023 0301 	bic.w	r3, r3, #1
 8004204:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004208:	4b53      	ldr	r3, [pc, #332]	; (8004358 <HAL_RCC_OscConfig+0x4b8>)
 800420a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800420e:	4a52      	ldr	r2, [pc, #328]	; (8004358 <HAL_RCC_OscConfig+0x4b8>)
 8004210:	f023 0304 	bic.w	r3, r3, #4
 8004214:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d016      	beq.n	800424e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004220:	f7fd fac6 	bl	80017b0 <HAL_GetTick>
 8004224:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004226:	e00a      	b.n	800423e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004228:	f7fd fac2 	bl	80017b0 <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	f241 3288 	movw	r2, #5000	; 0x1388
 8004236:	4293      	cmp	r3, r2
 8004238:	d901      	bls.n	800423e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	e140      	b.n	80044c0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800423e:	4b46      	ldr	r3, [pc, #280]	; (8004358 <HAL_RCC_OscConfig+0x4b8>)
 8004240:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004244:	f003 0302 	and.w	r3, r3, #2
 8004248:	2b00      	cmp	r3, #0
 800424a:	d0ed      	beq.n	8004228 <HAL_RCC_OscConfig+0x388>
 800424c:	e015      	b.n	800427a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800424e:	f7fd faaf 	bl	80017b0 <HAL_GetTick>
 8004252:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004254:	e00a      	b.n	800426c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004256:	f7fd faab 	bl	80017b0 <HAL_GetTick>
 800425a:	4602      	mov	r2, r0
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	1ad3      	subs	r3, r2, r3
 8004260:	f241 3288 	movw	r2, #5000	; 0x1388
 8004264:	4293      	cmp	r3, r2
 8004266:	d901      	bls.n	800426c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004268:	2303      	movs	r3, #3
 800426a:	e129      	b.n	80044c0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800426c:	4b3a      	ldr	r3, [pc, #232]	; (8004358 <HAL_RCC_OscConfig+0x4b8>)
 800426e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004272:	f003 0302 	and.w	r3, r3, #2
 8004276:	2b00      	cmp	r3, #0
 8004278:	d1ed      	bne.n	8004256 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800427a:	7ffb      	ldrb	r3, [r7, #31]
 800427c:	2b01      	cmp	r3, #1
 800427e:	d105      	bne.n	800428c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004280:	4b35      	ldr	r3, [pc, #212]	; (8004358 <HAL_RCC_OscConfig+0x4b8>)
 8004282:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004284:	4a34      	ldr	r2, [pc, #208]	; (8004358 <HAL_RCC_OscConfig+0x4b8>)
 8004286:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800428a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 0320 	and.w	r3, r3, #32
 8004294:	2b00      	cmp	r3, #0
 8004296:	d03c      	beq.n	8004312 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	699b      	ldr	r3, [r3, #24]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d01c      	beq.n	80042da <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80042a0:	4b2d      	ldr	r3, [pc, #180]	; (8004358 <HAL_RCC_OscConfig+0x4b8>)
 80042a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042a6:	4a2c      	ldr	r2, [pc, #176]	; (8004358 <HAL_RCC_OscConfig+0x4b8>)
 80042a8:	f043 0301 	orr.w	r3, r3, #1
 80042ac:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042b0:	f7fd fa7e 	bl	80017b0 <HAL_GetTick>
 80042b4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80042b6:	e008      	b.n	80042ca <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80042b8:	f7fd fa7a 	bl	80017b0 <HAL_GetTick>
 80042bc:	4602      	mov	r2, r0
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	2b02      	cmp	r3, #2
 80042c4:	d901      	bls.n	80042ca <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80042c6:	2303      	movs	r3, #3
 80042c8:	e0fa      	b.n	80044c0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80042ca:	4b23      	ldr	r3, [pc, #140]	; (8004358 <HAL_RCC_OscConfig+0x4b8>)
 80042cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042d0:	f003 0302 	and.w	r3, r3, #2
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d0ef      	beq.n	80042b8 <HAL_RCC_OscConfig+0x418>
 80042d8:	e01b      	b.n	8004312 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80042da:	4b1f      	ldr	r3, [pc, #124]	; (8004358 <HAL_RCC_OscConfig+0x4b8>)
 80042dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042e0:	4a1d      	ldr	r2, [pc, #116]	; (8004358 <HAL_RCC_OscConfig+0x4b8>)
 80042e2:	f023 0301 	bic.w	r3, r3, #1
 80042e6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042ea:	f7fd fa61 	bl	80017b0 <HAL_GetTick>
 80042ee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80042f0:	e008      	b.n	8004304 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80042f2:	f7fd fa5d 	bl	80017b0 <HAL_GetTick>
 80042f6:	4602      	mov	r2, r0
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	1ad3      	subs	r3, r2, r3
 80042fc:	2b02      	cmp	r3, #2
 80042fe:	d901      	bls.n	8004304 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004300:	2303      	movs	r3, #3
 8004302:	e0dd      	b.n	80044c0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004304:	4b14      	ldr	r3, [pc, #80]	; (8004358 <HAL_RCC_OscConfig+0x4b8>)
 8004306:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800430a:	f003 0302 	and.w	r3, r3, #2
 800430e:	2b00      	cmp	r3, #0
 8004310:	d1ef      	bne.n	80042f2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	69db      	ldr	r3, [r3, #28]
 8004316:	2b00      	cmp	r3, #0
 8004318:	f000 80d1 	beq.w	80044be <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800431c:	4b0e      	ldr	r3, [pc, #56]	; (8004358 <HAL_RCC_OscConfig+0x4b8>)
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	f003 030c 	and.w	r3, r3, #12
 8004324:	2b0c      	cmp	r3, #12
 8004326:	f000 808b 	beq.w	8004440 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	69db      	ldr	r3, [r3, #28]
 800432e:	2b02      	cmp	r3, #2
 8004330:	d15e      	bne.n	80043f0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004332:	4b09      	ldr	r3, [pc, #36]	; (8004358 <HAL_RCC_OscConfig+0x4b8>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a08      	ldr	r2, [pc, #32]	; (8004358 <HAL_RCC_OscConfig+0x4b8>)
 8004338:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800433c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800433e:	f7fd fa37 	bl	80017b0 <HAL_GetTick>
 8004342:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004344:	e00c      	b.n	8004360 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004346:	f7fd fa33 	bl	80017b0 <HAL_GetTick>
 800434a:	4602      	mov	r2, r0
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	2b02      	cmp	r3, #2
 8004352:	d905      	bls.n	8004360 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004354:	2303      	movs	r3, #3
 8004356:	e0b3      	b.n	80044c0 <HAL_RCC_OscConfig+0x620>
 8004358:	40021000 	.word	0x40021000
 800435c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004360:	4b59      	ldr	r3, [pc, #356]	; (80044c8 <HAL_RCC_OscConfig+0x628>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004368:	2b00      	cmp	r3, #0
 800436a:	d1ec      	bne.n	8004346 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800436c:	4b56      	ldr	r3, [pc, #344]	; (80044c8 <HAL_RCC_OscConfig+0x628>)
 800436e:	68da      	ldr	r2, [r3, #12]
 8004370:	4b56      	ldr	r3, [pc, #344]	; (80044cc <HAL_RCC_OscConfig+0x62c>)
 8004372:	4013      	ands	r3, r2
 8004374:	687a      	ldr	r2, [r7, #4]
 8004376:	6a11      	ldr	r1, [r2, #32]
 8004378:	687a      	ldr	r2, [r7, #4]
 800437a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800437c:	3a01      	subs	r2, #1
 800437e:	0112      	lsls	r2, r2, #4
 8004380:	4311      	orrs	r1, r2
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004386:	0212      	lsls	r2, r2, #8
 8004388:	4311      	orrs	r1, r2
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800438e:	0852      	lsrs	r2, r2, #1
 8004390:	3a01      	subs	r2, #1
 8004392:	0552      	lsls	r2, r2, #21
 8004394:	4311      	orrs	r1, r2
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800439a:	0852      	lsrs	r2, r2, #1
 800439c:	3a01      	subs	r2, #1
 800439e:	0652      	lsls	r2, r2, #25
 80043a0:	4311      	orrs	r1, r2
 80043a2:	687a      	ldr	r2, [r7, #4]
 80043a4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80043a6:	06d2      	lsls	r2, r2, #27
 80043a8:	430a      	orrs	r2, r1
 80043aa:	4947      	ldr	r1, [pc, #284]	; (80044c8 <HAL_RCC_OscConfig+0x628>)
 80043ac:	4313      	orrs	r3, r2
 80043ae:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043b0:	4b45      	ldr	r3, [pc, #276]	; (80044c8 <HAL_RCC_OscConfig+0x628>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a44      	ldr	r2, [pc, #272]	; (80044c8 <HAL_RCC_OscConfig+0x628>)
 80043b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043ba:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80043bc:	4b42      	ldr	r3, [pc, #264]	; (80044c8 <HAL_RCC_OscConfig+0x628>)
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	4a41      	ldr	r2, [pc, #260]	; (80044c8 <HAL_RCC_OscConfig+0x628>)
 80043c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043c6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043c8:	f7fd f9f2 	bl	80017b0 <HAL_GetTick>
 80043cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043ce:	e008      	b.n	80043e2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043d0:	f7fd f9ee 	bl	80017b0 <HAL_GetTick>
 80043d4:	4602      	mov	r2, r0
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	2b02      	cmp	r3, #2
 80043dc:	d901      	bls.n	80043e2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80043de:	2303      	movs	r3, #3
 80043e0:	e06e      	b.n	80044c0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043e2:	4b39      	ldr	r3, [pc, #228]	; (80044c8 <HAL_RCC_OscConfig+0x628>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d0f0      	beq.n	80043d0 <HAL_RCC_OscConfig+0x530>
 80043ee:	e066      	b.n	80044be <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043f0:	4b35      	ldr	r3, [pc, #212]	; (80044c8 <HAL_RCC_OscConfig+0x628>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a34      	ldr	r2, [pc, #208]	; (80044c8 <HAL_RCC_OscConfig+0x628>)
 80043f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043fa:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80043fc:	4b32      	ldr	r3, [pc, #200]	; (80044c8 <HAL_RCC_OscConfig+0x628>)
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	4a31      	ldr	r2, [pc, #196]	; (80044c8 <HAL_RCC_OscConfig+0x628>)
 8004402:	f023 0303 	bic.w	r3, r3, #3
 8004406:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004408:	4b2f      	ldr	r3, [pc, #188]	; (80044c8 <HAL_RCC_OscConfig+0x628>)
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	4a2e      	ldr	r2, [pc, #184]	; (80044c8 <HAL_RCC_OscConfig+0x628>)
 800440e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004412:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004416:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004418:	f7fd f9ca 	bl	80017b0 <HAL_GetTick>
 800441c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800441e:	e008      	b.n	8004432 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004420:	f7fd f9c6 	bl	80017b0 <HAL_GetTick>
 8004424:	4602      	mov	r2, r0
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	2b02      	cmp	r3, #2
 800442c:	d901      	bls.n	8004432 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800442e:	2303      	movs	r3, #3
 8004430:	e046      	b.n	80044c0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004432:	4b25      	ldr	r3, [pc, #148]	; (80044c8 <HAL_RCC_OscConfig+0x628>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800443a:	2b00      	cmp	r3, #0
 800443c:	d1f0      	bne.n	8004420 <HAL_RCC_OscConfig+0x580>
 800443e:	e03e      	b.n	80044be <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	69db      	ldr	r3, [r3, #28]
 8004444:	2b01      	cmp	r3, #1
 8004446:	d101      	bne.n	800444c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	e039      	b.n	80044c0 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800444c:	4b1e      	ldr	r3, [pc, #120]	; (80044c8 <HAL_RCC_OscConfig+0x628>)
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	f003 0203 	and.w	r2, r3, #3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6a1b      	ldr	r3, [r3, #32]
 800445c:	429a      	cmp	r2, r3
 800445e:	d12c      	bne.n	80044ba <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446a:	3b01      	subs	r3, #1
 800446c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800446e:	429a      	cmp	r2, r3
 8004470:	d123      	bne.n	80044ba <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800447c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800447e:	429a      	cmp	r2, r3
 8004480:	d11b      	bne.n	80044ba <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800448c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800448e:	429a      	cmp	r2, r3
 8004490:	d113      	bne.n	80044ba <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800449c:	085b      	lsrs	r3, r3, #1
 800449e:	3b01      	subs	r3, #1
 80044a0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d109      	bne.n	80044ba <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044b0:	085b      	lsrs	r3, r3, #1
 80044b2:	3b01      	subs	r3, #1
 80044b4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d001      	beq.n	80044be <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e000      	b.n	80044c0 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80044be:	2300      	movs	r3, #0
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3720      	adds	r7, #32
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	40021000 	.word	0x40021000
 80044cc:	019f800c 	.word	0x019f800c

080044d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b086      	sub	sp, #24
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80044da:	2300      	movs	r3, #0
 80044dc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d101      	bne.n	80044e8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e11e      	b.n	8004726 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044e8:	4b91      	ldr	r3, [pc, #580]	; (8004730 <HAL_RCC_ClockConfig+0x260>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 030f 	and.w	r3, r3, #15
 80044f0:	683a      	ldr	r2, [r7, #0]
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d910      	bls.n	8004518 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044f6:	4b8e      	ldr	r3, [pc, #568]	; (8004730 <HAL_RCC_ClockConfig+0x260>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f023 020f 	bic.w	r2, r3, #15
 80044fe:	498c      	ldr	r1, [pc, #560]	; (8004730 <HAL_RCC_ClockConfig+0x260>)
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	4313      	orrs	r3, r2
 8004504:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004506:	4b8a      	ldr	r3, [pc, #552]	; (8004730 <HAL_RCC_ClockConfig+0x260>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 030f 	and.w	r3, r3, #15
 800450e:	683a      	ldr	r2, [r7, #0]
 8004510:	429a      	cmp	r2, r3
 8004512:	d001      	beq.n	8004518 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e106      	b.n	8004726 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 0301 	and.w	r3, r3, #1
 8004520:	2b00      	cmp	r3, #0
 8004522:	d073      	beq.n	800460c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	2b03      	cmp	r3, #3
 800452a:	d129      	bne.n	8004580 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800452c:	4b81      	ldr	r3, [pc, #516]	; (8004734 <HAL_RCC_ClockConfig+0x264>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004534:	2b00      	cmp	r3, #0
 8004536:	d101      	bne.n	800453c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	e0f4      	b.n	8004726 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800453c:	f000 f99e 	bl	800487c <RCC_GetSysClockFreqFromPLLSource>
 8004540:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	4a7c      	ldr	r2, [pc, #496]	; (8004738 <HAL_RCC_ClockConfig+0x268>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d93f      	bls.n	80045ca <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800454a:	4b7a      	ldr	r3, [pc, #488]	; (8004734 <HAL_RCC_ClockConfig+0x264>)
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004552:	2b00      	cmp	r3, #0
 8004554:	d009      	beq.n	800456a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800455e:	2b00      	cmp	r3, #0
 8004560:	d033      	beq.n	80045ca <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004566:	2b00      	cmp	r3, #0
 8004568:	d12f      	bne.n	80045ca <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800456a:	4b72      	ldr	r3, [pc, #456]	; (8004734 <HAL_RCC_ClockConfig+0x264>)
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004572:	4a70      	ldr	r2, [pc, #448]	; (8004734 <HAL_RCC_ClockConfig+0x264>)
 8004574:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004578:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800457a:	2380      	movs	r3, #128	; 0x80
 800457c:	617b      	str	r3, [r7, #20]
 800457e:	e024      	b.n	80045ca <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	2b02      	cmp	r3, #2
 8004586:	d107      	bne.n	8004598 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004588:	4b6a      	ldr	r3, [pc, #424]	; (8004734 <HAL_RCC_ClockConfig+0x264>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004590:	2b00      	cmp	r3, #0
 8004592:	d109      	bne.n	80045a8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	e0c6      	b.n	8004726 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004598:	4b66      	ldr	r3, [pc, #408]	; (8004734 <HAL_RCC_ClockConfig+0x264>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d101      	bne.n	80045a8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	e0be      	b.n	8004726 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80045a8:	f000 f8ce 	bl	8004748 <HAL_RCC_GetSysClockFreq>
 80045ac:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	4a61      	ldr	r2, [pc, #388]	; (8004738 <HAL_RCC_ClockConfig+0x268>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d909      	bls.n	80045ca <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80045b6:	4b5f      	ldr	r3, [pc, #380]	; (8004734 <HAL_RCC_ClockConfig+0x264>)
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045be:	4a5d      	ldr	r2, [pc, #372]	; (8004734 <HAL_RCC_ClockConfig+0x264>)
 80045c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045c4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80045c6:	2380      	movs	r3, #128	; 0x80
 80045c8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80045ca:	4b5a      	ldr	r3, [pc, #360]	; (8004734 <HAL_RCC_ClockConfig+0x264>)
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	f023 0203 	bic.w	r2, r3, #3
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	4957      	ldr	r1, [pc, #348]	; (8004734 <HAL_RCC_ClockConfig+0x264>)
 80045d8:	4313      	orrs	r3, r2
 80045da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045dc:	f7fd f8e8 	bl	80017b0 <HAL_GetTick>
 80045e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045e2:	e00a      	b.n	80045fa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045e4:	f7fd f8e4 	bl	80017b0 <HAL_GetTick>
 80045e8:	4602      	mov	r2, r0
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d901      	bls.n	80045fa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80045f6:	2303      	movs	r3, #3
 80045f8:	e095      	b.n	8004726 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045fa:	4b4e      	ldr	r3, [pc, #312]	; (8004734 <HAL_RCC_ClockConfig+0x264>)
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	f003 020c 	and.w	r2, r3, #12
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	429a      	cmp	r2, r3
 800460a:	d1eb      	bne.n	80045e4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 0302 	and.w	r3, r3, #2
 8004614:	2b00      	cmp	r3, #0
 8004616:	d023      	beq.n	8004660 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 0304 	and.w	r3, r3, #4
 8004620:	2b00      	cmp	r3, #0
 8004622:	d005      	beq.n	8004630 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004624:	4b43      	ldr	r3, [pc, #268]	; (8004734 <HAL_RCC_ClockConfig+0x264>)
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	4a42      	ldr	r2, [pc, #264]	; (8004734 <HAL_RCC_ClockConfig+0x264>)
 800462a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800462e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 0308 	and.w	r3, r3, #8
 8004638:	2b00      	cmp	r3, #0
 800463a:	d007      	beq.n	800464c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800463c:	4b3d      	ldr	r3, [pc, #244]	; (8004734 <HAL_RCC_ClockConfig+0x264>)
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004644:	4a3b      	ldr	r2, [pc, #236]	; (8004734 <HAL_RCC_ClockConfig+0x264>)
 8004646:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800464a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800464c:	4b39      	ldr	r3, [pc, #228]	; (8004734 <HAL_RCC_ClockConfig+0x264>)
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	4936      	ldr	r1, [pc, #216]	; (8004734 <HAL_RCC_ClockConfig+0x264>)
 800465a:	4313      	orrs	r3, r2
 800465c:	608b      	str	r3, [r1, #8]
 800465e:	e008      	b.n	8004672 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	2b80      	cmp	r3, #128	; 0x80
 8004664:	d105      	bne.n	8004672 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004666:	4b33      	ldr	r3, [pc, #204]	; (8004734 <HAL_RCC_ClockConfig+0x264>)
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	4a32      	ldr	r2, [pc, #200]	; (8004734 <HAL_RCC_ClockConfig+0x264>)
 800466c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004670:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004672:	4b2f      	ldr	r3, [pc, #188]	; (8004730 <HAL_RCC_ClockConfig+0x260>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 030f 	and.w	r3, r3, #15
 800467a:	683a      	ldr	r2, [r7, #0]
 800467c:	429a      	cmp	r2, r3
 800467e:	d21d      	bcs.n	80046bc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004680:	4b2b      	ldr	r3, [pc, #172]	; (8004730 <HAL_RCC_ClockConfig+0x260>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f023 020f 	bic.w	r2, r3, #15
 8004688:	4929      	ldr	r1, [pc, #164]	; (8004730 <HAL_RCC_ClockConfig+0x260>)
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	4313      	orrs	r3, r2
 800468e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004690:	f7fd f88e 	bl	80017b0 <HAL_GetTick>
 8004694:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004696:	e00a      	b.n	80046ae <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004698:	f7fd f88a 	bl	80017b0 <HAL_GetTick>
 800469c:	4602      	mov	r2, r0
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d901      	bls.n	80046ae <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80046aa:	2303      	movs	r3, #3
 80046ac:	e03b      	b.n	8004726 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046ae:	4b20      	ldr	r3, [pc, #128]	; (8004730 <HAL_RCC_ClockConfig+0x260>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 030f 	and.w	r3, r3, #15
 80046b6:	683a      	ldr	r2, [r7, #0]
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d1ed      	bne.n	8004698 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 0304 	and.w	r3, r3, #4
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d008      	beq.n	80046da <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046c8:	4b1a      	ldr	r3, [pc, #104]	; (8004734 <HAL_RCC_ClockConfig+0x264>)
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	4917      	ldr	r1, [pc, #92]	; (8004734 <HAL_RCC_ClockConfig+0x264>)
 80046d6:	4313      	orrs	r3, r2
 80046d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 0308 	and.w	r3, r3, #8
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d009      	beq.n	80046fa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046e6:	4b13      	ldr	r3, [pc, #76]	; (8004734 <HAL_RCC_ClockConfig+0x264>)
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	691b      	ldr	r3, [r3, #16]
 80046f2:	00db      	lsls	r3, r3, #3
 80046f4:	490f      	ldr	r1, [pc, #60]	; (8004734 <HAL_RCC_ClockConfig+0x264>)
 80046f6:	4313      	orrs	r3, r2
 80046f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80046fa:	f000 f825 	bl	8004748 <HAL_RCC_GetSysClockFreq>
 80046fe:	4602      	mov	r2, r0
 8004700:	4b0c      	ldr	r3, [pc, #48]	; (8004734 <HAL_RCC_ClockConfig+0x264>)
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	091b      	lsrs	r3, r3, #4
 8004706:	f003 030f 	and.w	r3, r3, #15
 800470a:	490c      	ldr	r1, [pc, #48]	; (800473c <HAL_RCC_ClockConfig+0x26c>)
 800470c:	5ccb      	ldrb	r3, [r1, r3]
 800470e:	f003 031f 	and.w	r3, r3, #31
 8004712:	fa22 f303 	lsr.w	r3, r2, r3
 8004716:	4a0a      	ldr	r2, [pc, #40]	; (8004740 <HAL_RCC_ClockConfig+0x270>)
 8004718:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800471a:	4b0a      	ldr	r3, [pc, #40]	; (8004744 <HAL_RCC_ClockConfig+0x274>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4618      	mov	r0, r3
 8004720:	f7fc fffa 	bl	8001718 <HAL_InitTick>
 8004724:	4603      	mov	r3, r0
}
 8004726:	4618      	mov	r0, r3
 8004728:	3718      	adds	r7, #24
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}
 800472e:	bf00      	nop
 8004730:	40022000 	.word	0x40022000
 8004734:	40021000 	.word	0x40021000
 8004738:	04c4b400 	.word	0x04c4b400
 800473c:	08009bac 	.word	0x08009bac
 8004740:	2000009c 	.word	0x2000009c
 8004744:	200000a0 	.word	0x200000a0

08004748 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004748:	b480      	push	{r7}
 800474a:	b087      	sub	sp, #28
 800474c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800474e:	4b2c      	ldr	r3, [pc, #176]	; (8004800 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	f003 030c 	and.w	r3, r3, #12
 8004756:	2b04      	cmp	r3, #4
 8004758:	d102      	bne.n	8004760 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800475a:	4b2a      	ldr	r3, [pc, #168]	; (8004804 <HAL_RCC_GetSysClockFreq+0xbc>)
 800475c:	613b      	str	r3, [r7, #16]
 800475e:	e047      	b.n	80047f0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004760:	4b27      	ldr	r3, [pc, #156]	; (8004800 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	f003 030c 	and.w	r3, r3, #12
 8004768:	2b08      	cmp	r3, #8
 800476a:	d102      	bne.n	8004772 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800476c:	4b26      	ldr	r3, [pc, #152]	; (8004808 <HAL_RCC_GetSysClockFreq+0xc0>)
 800476e:	613b      	str	r3, [r7, #16]
 8004770:	e03e      	b.n	80047f0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004772:	4b23      	ldr	r3, [pc, #140]	; (8004800 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	f003 030c 	and.w	r3, r3, #12
 800477a:	2b0c      	cmp	r3, #12
 800477c:	d136      	bne.n	80047ec <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800477e:	4b20      	ldr	r3, [pc, #128]	; (8004800 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	f003 0303 	and.w	r3, r3, #3
 8004786:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004788:	4b1d      	ldr	r3, [pc, #116]	; (8004800 <HAL_RCC_GetSysClockFreq+0xb8>)
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	091b      	lsrs	r3, r3, #4
 800478e:	f003 030f 	and.w	r3, r3, #15
 8004792:	3301      	adds	r3, #1
 8004794:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2b03      	cmp	r3, #3
 800479a:	d10c      	bne.n	80047b6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800479c:	4a1a      	ldr	r2, [pc, #104]	; (8004808 <HAL_RCC_GetSysClockFreq+0xc0>)
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80047a4:	4a16      	ldr	r2, [pc, #88]	; (8004800 <HAL_RCC_GetSysClockFreq+0xb8>)
 80047a6:	68d2      	ldr	r2, [r2, #12]
 80047a8:	0a12      	lsrs	r2, r2, #8
 80047aa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80047ae:	fb02 f303 	mul.w	r3, r2, r3
 80047b2:	617b      	str	r3, [r7, #20]
      break;
 80047b4:	e00c      	b.n	80047d0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80047b6:	4a13      	ldr	r2, [pc, #76]	; (8004804 <HAL_RCC_GetSysClockFreq+0xbc>)
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80047be:	4a10      	ldr	r2, [pc, #64]	; (8004800 <HAL_RCC_GetSysClockFreq+0xb8>)
 80047c0:	68d2      	ldr	r2, [r2, #12]
 80047c2:	0a12      	lsrs	r2, r2, #8
 80047c4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80047c8:	fb02 f303 	mul.w	r3, r2, r3
 80047cc:	617b      	str	r3, [r7, #20]
      break;
 80047ce:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80047d0:	4b0b      	ldr	r3, [pc, #44]	; (8004800 <HAL_RCC_GetSysClockFreq+0xb8>)
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	0e5b      	lsrs	r3, r3, #25
 80047d6:	f003 0303 	and.w	r3, r3, #3
 80047da:	3301      	adds	r3, #1
 80047dc:	005b      	lsls	r3, r3, #1
 80047de:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80047e0:	697a      	ldr	r2, [r7, #20]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047e8:	613b      	str	r3, [r7, #16]
 80047ea:	e001      	b.n	80047f0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80047ec:	2300      	movs	r3, #0
 80047ee:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80047f0:	693b      	ldr	r3, [r7, #16]
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	371c      	adds	r7, #28
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr
 80047fe:	bf00      	nop
 8004800:	40021000 	.word	0x40021000
 8004804:	00f42400 	.word	0x00f42400
 8004808:	016e3600 	.word	0x016e3600

0800480c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800480c:	b480      	push	{r7}
 800480e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004810:	4b03      	ldr	r3, [pc, #12]	; (8004820 <HAL_RCC_GetHCLKFreq+0x14>)
 8004812:	681b      	ldr	r3, [r3, #0]
}
 8004814:	4618      	mov	r0, r3
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr
 800481e:	bf00      	nop
 8004820:	2000009c 	.word	0x2000009c

08004824 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004828:	f7ff fff0 	bl	800480c <HAL_RCC_GetHCLKFreq>
 800482c:	4602      	mov	r2, r0
 800482e:	4b06      	ldr	r3, [pc, #24]	; (8004848 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	0a1b      	lsrs	r3, r3, #8
 8004834:	f003 0307 	and.w	r3, r3, #7
 8004838:	4904      	ldr	r1, [pc, #16]	; (800484c <HAL_RCC_GetPCLK1Freq+0x28>)
 800483a:	5ccb      	ldrb	r3, [r1, r3]
 800483c:	f003 031f 	and.w	r3, r3, #31
 8004840:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004844:	4618      	mov	r0, r3
 8004846:	bd80      	pop	{r7, pc}
 8004848:	40021000 	.word	0x40021000
 800484c:	08009bbc 	.word	0x08009bbc

08004850 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004854:	f7ff ffda 	bl	800480c <HAL_RCC_GetHCLKFreq>
 8004858:	4602      	mov	r2, r0
 800485a:	4b06      	ldr	r3, [pc, #24]	; (8004874 <HAL_RCC_GetPCLK2Freq+0x24>)
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	0adb      	lsrs	r3, r3, #11
 8004860:	f003 0307 	and.w	r3, r3, #7
 8004864:	4904      	ldr	r1, [pc, #16]	; (8004878 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004866:	5ccb      	ldrb	r3, [r1, r3]
 8004868:	f003 031f 	and.w	r3, r3, #31
 800486c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004870:	4618      	mov	r0, r3
 8004872:	bd80      	pop	{r7, pc}
 8004874:	40021000 	.word	0x40021000
 8004878:	08009bbc 	.word	0x08009bbc

0800487c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800487c:	b480      	push	{r7}
 800487e:	b087      	sub	sp, #28
 8004880:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004882:	4b1e      	ldr	r3, [pc, #120]	; (80048fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004884:	68db      	ldr	r3, [r3, #12]
 8004886:	f003 0303 	and.w	r3, r3, #3
 800488a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800488c:	4b1b      	ldr	r3, [pc, #108]	; (80048fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	091b      	lsrs	r3, r3, #4
 8004892:	f003 030f 	and.w	r3, r3, #15
 8004896:	3301      	adds	r3, #1
 8004898:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	2b03      	cmp	r3, #3
 800489e:	d10c      	bne.n	80048ba <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80048a0:	4a17      	ldr	r2, [pc, #92]	; (8004900 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80048a8:	4a14      	ldr	r2, [pc, #80]	; (80048fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80048aa:	68d2      	ldr	r2, [r2, #12]
 80048ac:	0a12      	lsrs	r2, r2, #8
 80048ae:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80048b2:	fb02 f303 	mul.w	r3, r2, r3
 80048b6:	617b      	str	r3, [r7, #20]
    break;
 80048b8:	e00c      	b.n	80048d4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80048ba:	4a12      	ldr	r2, [pc, #72]	; (8004904 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	fbb2 f3f3 	udiv	r3, r2, r3
 80048c2:	4a0e      	ldr	r2, [pc, #56]	; (80048fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80048c4:	68d2      	ldr	r2, [r2, #12]
 80048c6:	0a12      	lsrs	r2, r2, #8
 80048c8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80048cc:	fb02 f303 	mul.w	r3, r2, r3
 80048d0:	617b      	str	r3, [r7, #20]
    break;
 80048d2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80048d4:	4b09      	ldr	r3, [pc, #36]	; (80048fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80048d6:	68db      	ldr	r3, [r3, #12]
 80048d8:	0e5b      	lsrs	r3, r3, #25
 80048da:	f003 0303 	and.w	r3, r3, #3
 80048de:	3301      	adds	r3, #1
 80048e0:	005b      	lsls	r3, r3, #1
 80048e2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80048e4:	697a      	ldr	r2, [r7, #20]
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80048ec:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80048ee:	687b      	ldr	r3, [r7, #4]
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	371c      	adds	r7, #28
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr
 80048fc:	40021000 	.word	0x40021000
 8004900:	016e3600 	.word	0x016e3600
 8004904:	00f42400 	.word	0x00f42400

08004908 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b086      	sub	sp, #24
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004910:	2300      	movs	r3, #0
 8004912:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004914:	2300      	movs	r3, #0
 8004916:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004920:	2b00      	cmp	r3, #0
 8004922:	f000 8098 	beq.w	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004926:	2300      	movs	r3, #0
 8004928:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800492a:	4b43      	ldr	r3, [pc, #268]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800492c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800492e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004932:	2b00      	cmp	r3, #0
 8004934:	d10d      	bne.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004936:	4b40      	ldr	r3, [pc, #256]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800493a:	4a3f      	ldr	r2, [pc, #252]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800493c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004940:	6593      	str	r3, [r2, #88]	; 0x58
 8004942:	4b3d      	ldr	r3, [pc, #244]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004946:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800494a:	60bb      	str	r3, [r7, #8]
 800494c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800494e:	2301      	movs	r3, #1
 8004950:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004952:	4b3a      	ldr	r3, [pc, #232]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a39      	ldr	r2, [pc, #228]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004958:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800495c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800495e:	f7fc ff27 	bl	80017b0 <HAL_GetTick>
 8004962:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004964:	e009      	b.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004966:	f7fc ff23 	bl	80017b0 <HAL_GetTick>
 800496a:	4602      	mov	r2, r0
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	1ad3      	subs	r3, r2, r3
 8004970:	2b02      	cmp	r3, #2
 8004972:	d902      	bls.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004974:	2303      	movs	r3, #3
 8004976:	74fb      	strb	r3, [r7, #19]
        break;
 8004978:	e005      	b.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800497a:	4b30      	ldr	r3, [pc, #192]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004982:	2b00      	cmp	r3, #0
 8004984:	d0ef      	beq.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004986:	7cfb      	ldrb	r3, [r7, #19]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d159      	bne.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800498c:	4b2a      	ldr	r3, [pc, #168]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800498e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004992:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004996:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d01e      	beq.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049a2:	697a      	ldr	r2, [r7, #20]
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d019      	beq.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80049a8:	4b23      	ldr	r3, [pc, #140]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049b2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80049b4:	4b20      	ldr	r3, [pc, #128]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ba:	4a1f      	ldr	r2, [pc, #124]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80049c4:	4b1c      	ldr	r3, [pc, #112]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ca:	4a1b      	ldr	r2, [pc, #108]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80049d4:	4a18      	ldr	r2, [pc, #96]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	f003 0301 	and.w	r3, r3, #1
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d016      	beq.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049e6:	f7fc fee3 	bl	80017b0 <HAL_GetTick>
 80049ea:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049ec:	e00b      	b.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049ee:	f7fc fedf 	bl	80017b0 <HAL_GetTick>
 80049f2:	4602      	mov	r2, r0
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	1ad3      	subs	r3, r2, r3
 80049f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d902      	bls.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004a00:	2303      	movs	r3, #3
 8004a02:	74fb      	strb	r3, [r7, #19]
            break;
 8004a04:	e006      	b.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a06:	4b0c      	ldr	r3, [pc, #48]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a0c:	f003 0302 	and.w	r3, r3, #2
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d0ec      	beq.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004a14:	7cfb      	ldrb	r3, [r7, #19]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d10b      	bne.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a1a:	4b07      	ldr	r3, [pc, #28]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a28:	4903      	ldr	r1, [pc, #12]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004a30:	e008      	b.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004a32:	7cfb      	ldrb	r3, [r7, #19]
 8004a34:	74bb      	strb	r3, [r7, #18]
 8004a36:	e005      	b.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004a38:	40021000 	.word	0x40021000
 8004a3c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a40:	7cfb      	ldrb	r3, [r7, #19]
 8004a42:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a44:	7c7b      	ldrb	r3, [r7, #17]
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d105      	bne.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a4a:	4ba7      	ldr	r3, [pc, #668]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a4e:	4aa6      	ldr	r2, [pc, #664]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a54:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 0301 	and.w	r3, r3, #1
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d00a      	beq.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a62:	4ba1      	ldr	r3, [pc, #644]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a68:	f023 0203 	bic.w	r2, r3, #3
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	499d      	ldr	r1, [pc, #628]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a72:	4313      	orrs	r3, r2
 8004a74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 0302 	and.w	r3, r3, #2
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d00a      	beq.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a84:	4b98      	ldr	r3, [pc, #608]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a8a:	f023 020c 	bic.w	r2, r3, #12
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	4995      	ldr	r1, [pc, #596]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a94:	4313      	orrs	r3, r2
 8004a96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 0304 	and.w	r3, r3, #4
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d00a      	beq.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004aa6:	4b90      	ldr	r3, [pc, #576]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004aa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aac:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	498c      	ldr	r1, [pc, #560]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 0308 	and.w	r3, r3, #8
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d00a      	beq.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004ac8:	4b87      	ldr	r3, [pc, #540]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ace:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	691b      	ldr	r3, [r3, #16]
 8004ad6:	4984      	ldr	r1, [pc, #528]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 0310 	and.w	r3, r3, #16
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d00a      	beq.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004aea:	4b7f      	ldr	r3, [pc, #508]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004af0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	695b      	ldr	r3, [r3, #20]
 8004af8:	497b      	ldr	r1, [pc, #492]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004afa:	4313      	orrs	r3, r2
 8004afc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 0320 	and.w	r3, r3, #32
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d00a      	beq.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b0c:	4b76      	ldr	r3, [pc, #472]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b12:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	699b      	ldr	r3, [r3, #24]
 8004b1a:	4973      	ldr	r1, [pc, #460]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d00a      	beq.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b2e:	4b6e      	ldr	r3, [pc, #440]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b34:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	69db      	ldr	r3, [r3, #28]
 8004b3c:	496a      	ldr	r1, [pc, #424]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d00a      	beq.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004b50:	4b65      	ldr	r3, [pc, #404]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b56:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6a1b      	ldr	r3, [r3, #32]
 8004b5e:	4962      	ldr	r1, [pc, #392]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b60:	4313      	orrs	r3, r2
 8004b62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d00a      	beq.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004b72:	4b5d      	ldr	r3, [pc, #372]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b78:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b80:	4959      	ldr	r1, [pc, #356]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b82:	4313      	orrs	r3, r2
 8004b84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d00a      	beq.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004b94:	4b54      	ldr	r3, [pc, #336]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b96:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b9a:	f023 0203 	bic.w	r2, r3, #3
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba2:	4951      	ldr	r1, [pc, #324]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d00a      	beq.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004bb6:	4b4c      	ldr	r3, [pc, #304]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bbc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc4:	4948      	ldr	r1, [pc, #288]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d015      	beq.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004bd8:	4b43      	ldr	r3, [pc, #268]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bde:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004be6:	4940      	ldr	r1, [pc, #256]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004be8:	4313      	orrs	r3, r2
 8004bea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bf6:	d105      	bne.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bf8:	4b3b      	ldr	r3, [pc, #236]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bfa:	68db      	ldr	r3, [r3, #12]
 8004bfc:	4a3a      	ldr	r2, [pc, #232]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bfe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c02:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d015      	beq.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004c10:	4b35      	ldr	r3, [pc, #212]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c16:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c1e:	4932      	ldr	r1, [pc, #200]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c20:	4313      	orrs	r3, r2
 8004c22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c2e:	d105      	bne.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c30:	4b2d      	ldr	r3, [pc, #180]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	4a2c      	ldr	r2, [pc, #176]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c3a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d015      	beq.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004c48:	4b27      	ldr	r3, [pc, #156]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c4e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c56:	4924      	ldr	r1, [pc, #144]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c62:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c66:	d105      	bne.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c68:	4b1f      	ldr	r3, [pc, #124]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	4a1e      	ldr	r2, [pc, #120]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c72:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d015      	beq.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c80:	4b19      	ldr	r3, [pc, #100]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c86:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c8e:	4916      	ldr	r1, [pc, #88]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c90:	4313      	orrs	r3, r2
 8004c92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c9a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c9e:	d105      	bne.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ca0:	4b11      	ldr	r3, [pc, #68]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ca2:	68db      	ldr	r3, [r3, #12]
 8004ca4:	4a10      	ldr	r2, [pc, #64]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ca6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004caa:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d019      	beq.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004cb8:	4b0b      	ldr	r3, [pc, #44]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cbe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc6:	4908      	ldr	r1, [pc, #32]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004cd6:	d109      	bne.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cd8:	4b03      	ldr	r3, [pc, #12]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cda:	68db      	ldr	r3, [r3, #12]
 8004cdc:	4a02      	ldr	r2, [pc, #8]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cde:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ce2:	60d3      	str	r3, [r2, #12]
 8004ce4:	e002      	b.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004ce6:	bf00      	nop
 8004ce8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d015      	beq.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004cf8:	4b29      	ldr	r3, [pc, #164]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cfe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d06:	4926      	ldr	r1, [pc, #152]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d16:	d105      	bne.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004d18:	4b21      	ldr	r3, [pc, #132]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	4a20      	ldr	r2, [pc, #128]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d22:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d015      	beq.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004d30:	4b1b      	ldr	r3, [pc, #108]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d36:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d3e:	4918      	ldr	r1, [pc, #96]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d40:	4313      	orrs	r3, r2
 8004d42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d4e:	d105      	bne.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004d50:	4b13      	ldr	r3, [pc, #76]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	4a12      	ldr	r2, [pc, #72]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d5a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d015      	beq.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004d68:	4b0d      	ldr	r3, [pc, #52]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d6e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d76:	490a      	ldr	r1, [pc, #40]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d82:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d86:	d105      	bne.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d88:	4b05      	ldr	r3, [pc, #20]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	4a04      	ldr	r2, [pc, #16]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d92:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004d94:	7cbb      	ldrb	r3, [r7, #18]
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3718      	adds	r7, #24
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop
 8004da0:	40021000 	.word	0x40021000

08004da4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b082      	sub	sp, #8
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d101      	bne.n	8004db6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e049      	b.n	8004e4a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d106      	bne.n	8004dd0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f7fc fa56 	bl	800127c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2202      	movs	r2, #2
 8004dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	3304      	adds	r3, #4
 8004de0:	4619      	mov	r1, r3
 8004de2:	4610      	mov	r0, r2
 8004de4:	f000 fbd2 	bl	800558c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2201      	movs	r2, #1
 8004e34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2201      	movs	r2, #1
 8004e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e48:	2300      	movs	r3, #0
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3708      	adds	r7, #8
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}

08004e52 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004e52:	b580      	push	{r7, lr}
 8004e54:	b082      	sub	sp, #8
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d101      	bne.n	8004e64 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	e049      	b.n	8004ef8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d106      	bne.n	8004e7e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	f000 f841 	bl	8004f00 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2202      	movs	r2, #2
 8004e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	3304      	adds	r3, #4
 8004e8e:	4619      	mov	r1, r3
 8004e90:	4610      	mov	r0, r2
 8004e92:	f000 fb7b 	bl	800558c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2201      	movs	r2, #1
 8004e9a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2201      	movs	r2, #1
 8004eba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2201      	movs	r2, #1
 8004eca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2201      	movs	r2, #1
 8004eda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2201      	movs	r2, #1
 8004eea:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ef6:	2300      	movs	r3, #0
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3708      	adds	r7, #8
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b083      	sub	sp, #12
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004f08:	bf00      	nop
 8004f0a:	370c      	adds	r7, #12
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr

08004f14 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b084      	sub	sp, #16
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d109      	bne.n	8004f38 <HAL_TIM_PWM_Start+0x24>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f2a:	b2db      	uxtb	r3, r3
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	bf14      	ite	ne
 8004f30:	2301      	movne	r3, #1
 8004f32:	2300      	moveq	r3, #0
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	e03c      	b.n	8004fb2 <HAL_TIM_PWM_Start+0x9e>
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	2b04      	cmp	r3, #4
 8004f3c:	d109      	bne.n	8004f52 <HAL_TIM_PWM_Start+0x3e>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	bf14      	ite	ne
 8004f4a:	2301      	movne	r3, #1
 8004f4c:	2300      	moveq	r3, #0
 8004f4e:	b2db      	uxtb	r3, r3
 8004f50:	e02f      	b.n	8004fb2 <HAL_TIM_PWM_Start+0x9e>
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	2b08      	cmp	r3, #8
 8004f56:	d109      	bne.n	8004f6c <HAL_TIM_PWM_Start+0x58>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f5e:	b2db      	uxtb	r3, r3
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	bf14      	ite	ne
 8004f64:	2301      	movne	r3, #1
 8004f66:	2300      	moveq	r3, #0
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	e022      	b.n	8004fb2 <HAL_TIM_PWM_Start+0x9e>
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	2b0c      	cmp	r3, #12
 8004f70:	d109      	bne.n	8004f86 <HAL_TIM_PWM_Start+0x72>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	bf14      	ite	ne
 8004f7e:	2301      	movne	r3, #1
 8004f80:	2300      	moveq	r3, #0
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	e015      	b.n	8004fb2 <HAL_TIM_PWM_Start+0x9e>
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	2b10      	cmp	r3, #16
 8004f8a:	d109      	bne.n	8004fa0 <HAL_TIM_PWM_Start+0x8c>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	bf14      	ite	ne
 8004f98:	2301      	movne	r3, #1
 8004f9a:	2300      	moveq	r3, #0
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	e008      	b.n	8004fb2 <HAL_TIM_PWM_Start+0x9e>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004fa6:	b2db      	uxtb	r3, r3
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	bf14      	ite	ne
 8004fac:	2301      	movne	r3, #1
 8004fae:	2300      	moveq	r3, #0
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d001      	beq.n	8004fba <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e0a6      	b.n	8005108 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d104      	bne.n	8004fca <HAL_TIM_PWM_Start+0xb6>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2202      	movs	r2, #2
 8004fc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fc8:	e023      	b.n	8005012 <HAL_TIM_PWM_Start+0xfe>
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	2b04      	cmp	r3, #4
 8004fce:	d104      	bne.n	8004fda <HAL_TIM_PWM_Start+0xc6>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2202      	movs	r2, #2
 8004fd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fd8:	e01b      	b.n	8005012 <HAL_TIM_PWM_Start+0xfe>
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	2b08      	cmp	r3, #8
 8004fde:	d104      	bne.n	8004fea <HAL_TIM_PWM_Start+0xd6>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2202      	movs	r2, #2
 8004fe4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fe8:	e013      	b.n	8005012 <HAL_TIM_PWM_Start+0xfe>
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	2b0c      	cmp	r3, #12
 8004fee:	d104      	bne.n	8004ffa <HAL_TIM_PWM_Start+0xe6>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2202      	movs	r2, #2
 8004ff4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ff8:	e00b      	b.n	8005012 <HAL_TIM_PWM_Start+0xfe>
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	2b10      	cmp	r3, #16
 8004ffe:	d104      	bne.n	800500a <HAL_TIM_PWM_Start+0xf6>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2202      	movs	r2, #2
 8005004:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005008:	e003      	b.n	8005012 <HAL_TIM_PWM_Start+0xfe>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2202      	movs	r2, #2
 800500e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	2201      	movs	r2, #1
 8005018:	6839      	ldr	r1, [r7, #0]
 800501a:	4618      	mov	r0, r3
 800501c:	f000 ff24 	bl	8005e68 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a3a      	ldr	r2, [pc, #232]	; (8005110 <HAL_TIM_PWM_Start+0x1fc>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d018      	beq.n	800505c <HAL_TIM_PWM_Start+0x148>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a39      	ldr	r2, [pc, #228]	; (8005114 <HAL_TIM_PWM_Start+0x200>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d013      	beq.n	800505c <HAL_TIM_PWM_Start+0x148>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a37      	ldr	r2, [pc, #220]	; (8005118 <HAL_TIM_PWM_Start+0x204>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d00e      	beq.n	800505c <HAL_TIM_PWM_Start+0x148>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a36      	ldr	r2, [pc, #216]	; (800511c <HAL_TIM_PWM_Start+0x208>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d009      	beq.n	800505c <HAL_TIM_PWM_Start+0x148>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a34      	ldr	r2, [pc, #208]	; (8005120 <HAL_TIM_PWM_Start+0x20c>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d004      	beq.n	800505c <HAL_TIM_PWM_Start+0x148>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a33      	ldr	r2, [pc, #204]	; (8005124 <HAL_TIM_PWM_Start+0x210>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d101      	bne.n	8005060 <HAL_TIM_PWM_Start+0x14c>
 800505c:	2301      	movs	r3, #1
 800505e:	e000      	b.n	8005062 <HAL_TIM_PWM_Start+0x14e>
 8005060:	2300      	movs	r3, #0
 8005062:	2b00      	cmp	r3, #0
 8005064:	d007      	beq.n	8005076 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005074:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a25      	ldr	r2, [pc, #148]	; (8005110 <HAL_TIM_PWM_Start+0x1fc>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d022      	beq.n	80050c6 <HAL_TIM_PWM_Start+0x1b2>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005088:	d01d      	beq.n	80050c6 <HAL_TIM_PWM_Start+0x1b2>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a26      	ldr	r2, [pc, #152]	; (8005128 <HAL_TIM_PWM_Start+0x214>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d018      	beq.n	80050c6 <HAL_TIM_PWM_Start+0x1b2>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a24      	ldr	r2, [pc, #144]	; (800512c <HAL_TIM_PWM_Start+0x218>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d013      	beq.n	80050c6 <HAL_TIM_PWM_Start+0x1b2>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a23      	ldr	r2, [pc, #140]	; (8005130 <HAL_TIM_PWM_Start+0x21c>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d00e      	beq.n	80050c6 <HAL_TIM_PWM_Start+0x1b2>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a19      	ldr	r2, [pc, #100]	; (8005114 <HAL_TIM_PWM_Start+0x200>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d009      	beq.n	80050c6 <HAL_TIM_PWM_Start+0x1b2>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a18      	ldr	r2, [pc, #96]	; (8005118 <HAL_TIM_PWM_Start+0x204>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d004      	beq.n	80050c6 <HAL_TIM_PWM_Start+0x1b2>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a18      	ldr	r2, [pc, #96]	; (8005124 <HAL_TIM_PWM_Start+0x210>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d115      	bne.n	80050f2 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	689a      	ldr	r2, [r3, #8]
 80050cc:	4b19      	ldr	r3, [pc, #100]	; (8005134 <HAL_TIM_PWM_Start+0x220>)
 80050ce:	4013      	ands	r3, r2
 80050d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2b06      	cmp	r3, #6
 80050d6:	d015      	beq.n	8005104 <HAL_TIM_PWM_Start+0x1f0>
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050de:	d011      	beq.n	8005104 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f042 0201 	orr.w	r2, r2, #1
 80050ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050f0:	e008      	b.n	8005104 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f042 0201 	orr.w	r2, r2, #1
 8005100:	601a      	str	r2, [r3, #0]
 8005102:	e000      	b.n	8005106 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005104:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005106:	2300      	movs	r3, #0
}
 8005108:	4618      	mov	r0, r3
 800510a:	3710      	adds	r7, #16
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}
 8005110:	40012c00 	.word	0x40012c00
 8005114:	40013400 	.word	0x40013400
 8005118:	40014000 	.word	0x40014000
 800511c:	40014400 	.word	0x40014400
 8005120:	40014800 	.word	0x40014800
 8005124:	40015000 	.word	0x40015000
 8005128:	40000400 	.word	0x40000400
 800512c:	40000800 	.word	0x40000800
 8005130:	40000c00 	.word	0x40000c00
 8005134:	00010007 	.word	0x00010007

08005138 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b086      	sub	sp, #24
 800513c:	af00      	add	r7, sp, #0
 800513e:	60f8      	str	r0, [r7, #12]
 8005140:	60b9      	str	r1, [r7, #8]
 8005142:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005144:	2300      	movs	r3, #0
 8005146:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800514e:	2b01      	cmp	r3, #1
 8005150:	d101      	bne.n	8005156 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005152:	2302      	movs	r3, #2
 8005154:	e0ff      	b.n	8005356 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2201      	movs	r2, #1
 800515a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2b14      	cmp	r3, #20
 8005162:	f200 80f0 	bhi.w	8005346 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005166:	a201      	add	r2, pc, #4	; (adr r2, 800516c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800516c:	080051c1 	.word	0x080051c1
 8005170:	08005347 	.word	0x08005347
 8005174:	08005347 	.word	0x08005347
 8005178:	08005347 	.word	0x08005347
 800517c:	08005201 	.word	0x08005201
 8005180:	08005347 	.word	0x08005347
 8005184:	08005347 	.word	0x08005347
 8005188:	08005347 	.word	0x08005347
 800518c:	08005243 	.word	0x08005243
 8005190:	08005347 	.word	0x08005347
 8005194:	08005347 	.word	0x08005347
 8005198:	08005347 	.word	0x08005347
 800519c:	08005283 	.word	0x08005283
 80051a0:	08005347 	.word	0x08005347
 80051a4:	08005347 	.word	0x08005347
 80051a8:	08005347 	.word	0x08005347
 80051ac:	080052c5 	.word	0x080052c5
 80051b0:	08005347 	.word	0x08005347
 80051b4:	08005347 	.word	0x08005347
 80051b8:	08005347 	.word	0x08005347
 80051bc:	08005305 	.word	0x08005305
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	68b9      	ldr	r1, [r7, #8]
 80051c6:	4618      	mov	r0, r3
 80051c8:	f000 fa88 	bl	80056dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	699a      	ldr	r2, [r3, #24]
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f042 0208 	orr.w	r2, r2, #8
 80051da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	699a      	ldr	r2, [r3, #24]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f022 0204 	bic.w	r2, r2, #4
 80051ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	6999      	ldr	r1, [r3, #24]
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	691a      	ldr	r2, [r3, #16]
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	430a      	orrs	r2, r1
 80051fc:	619a      	str	r2, [r3, #24]
      break;
 80051fe:	e0a5      	b.n	800534c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	68b9      	ldr	r1, [r7, #8]
 8005206:	4618      	mov	r0, r3
 8005208:	f000 fb02 	bl	8005810 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	699a      	ldr	r2, [r3, #24]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800521a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	699a      	ldr	r2, [r3, #24]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800522a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	6999      	ldr	r1, [r3, #24]
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	691b      	ldr	r3, [r3, #16]
 8005236:	021a      	lsls	r2, r3, #8
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	430a      	orrs	r2, r1
 800523e:	619a      	str	r2, [r3, #24]
      break;
 8005240:	e084      	b.n	800534c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	68b9      	ldr	r1, [r7, #8]
 8005248:	4618      	mov	r0, r3
 800524a:	f000 fb75 	bl	8005938 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	69da      	ldr	r2, [r3, #28]
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f042 0208 	orr.w	r2, r2, #8
 800525c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	69da      	ldr	r2, [r3, #28]
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f022 0204 	bic.w	r2, r2, #4
 800526c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	69d9      	ldr	r1, [r3, #28]
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	691a      	ldr	r2, [r3, #16]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	430a      	orrs	r2, r1
 800527e:	61da      	str	r2, [r3, #28]
      break;
 8005280:	e064      	b.n	800534c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	68b9      	ldr	r1, [r7, #8]
 8005288:	4618      	mov	r0, r3
 800528a:	f000 fbe7 	bl	8005a5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	69da      	ldr	r2, [r3, #28]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800529c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	69da      	ldr	r2, [r3, #28]
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	69d9      	ldr	r1, [r3, #28]
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	691b      	ldr	r3, [r3, #16]
 80052b8:	021a      	lsls	r2, r3, #8
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	430a      	orrs	r2, r1
 80052c0:	61da      	str	r2, [r3, #28]
      break;
 80052c2:	e043      	b.n	800534c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	68b9      	ldr	r1, [r7, #8]
 80052ca:	4618      	mov	r0, r3
 80052cc:	f000 fc5a 	bl	8005b84 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f042 0208 	orr.w	r2, r2, #8
 80052de:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f022 0204 	bic.w	r2, r2, #4
 80052ee:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	691a      	ldr	r2, [r3, #16]
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	430a      	orrs	r2, r1
 8005300:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005302:	e023      	b.n	800534c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	68b9      	ldr	r1, [r7, #8]
 800530a:	4618      	mov	r0, r3
 800530c:	f000 fca4 	bl	8005c58 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800531e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800532e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	691b      	ldr	r3, [r3, #16]
 800533a:	021a      	lsls	r2, r3, #8
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	430a      	orrs	r2, r1
 8005342:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005344:	e002      	b.n	800534c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	75fb      	strb	r3, [r7, #23]
      break;
 800534a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2200      	movs	r2, #0
 8005350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005354:	7dfb      	ldrb	r3, [r7, #23]
}
 8005356:	4618      	mov	r0, r3
 8005358:	3718      	adds	r7, #24
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}
 800535e:	bf00      	nop

08005360 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b084      	sub	sp, #16
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800536a:	2300      	movs	r3, #0
 800536c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005374:	2b01      	cmp	r3, #1
 8005376:	d101      	bne.n	800537c <HAL_TIM_ConfigClockSource+0x1c>
 8005378:	2302      	movs	r3, #2
 800537a:	e0f6      	b.n	800556a <HAL_TIM_ConfigClockSource+0x20a>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2201      	movs	r2, #1
 8005380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2202      	movs	r2, #2
 8005388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800539a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800539e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	68ba      	ldr	r2, [r7, #8]
 80053ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a6f      	ldr	r2, [pc, #444]	; (8005574 <HAL_TIM_ConfigClockSource+0x214>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	f000 80c1 	beq.w	800553e <HAL_TIM_ConfigClockSource+0x1de>
 80053bc:	4a6d      	ldr	r2, [pc, #436]	; (8005574 <HAL_TIM_ConfigClockSource+0x214>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	f200 80c6 	bhi.w	8005550 <HAL_TIM_ConfigClockSource+0x1f0>
 80053c4:	4a6c      	ldr	r2, [pc, #432]	; (8005578 <HAL_TIM_ConfigClockSource+0x218>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	f000 80b9 	beq.w	800553e <HAL_TIM_ConfigClockSource+0x1de>
 80053cc:	4a6a      	ldr	r2, [pc, #424]	; (8005578 <HAL_TIM_ConfigClockSource+0x218>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	f200 80be 	bhi.w	8005550 <HAL_TIM_ConfigClockSource+0x1f0>
 80053d4:	4a69      	ldr	r2, [pc, #420]	; (800557c <HAL_TIM_ConfigClockSource+0x21c>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	f000 80b1 	beq.w	800553e <HAL_TIM_ConfigClockSource+0x1de>
 80053dc:	4a67      	ldr	r2, [pc, #412]	; (800557c <HAL_TIM_ConfigClockSource+0x21c>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	f200 80b6 	bhi.w	8005550 <HAL_TIM_ConfigClockSource+0x1f0>
 80053e4:	4a66      	ldr	r2, [pc, #408]	; (8005580 <HAL_TIM_ConfigClockSource+0x220>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	f000 80a9 	beq.w	800553e <HAL_TIM_ConfigClockSource+0x1de>
 80053ec:	4a64      	ldr	r2, [pc, #400]	; (8005580 <HAL_TIM_ConfigClockSource+0x220>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	f200 80ae 	bhi.w	8005550 <HAL_TIM_ConfigClockSource+0x1f0>
 80053f4:	4a63      	ldr	r2, [pc, #396]	; (8005584 <HAL_TIM_ConfigClockSource+0x224>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	f000 80a1 	beq.w	800553e <HAL_TIM_ConfigClockSource+0x1de>
 80053fc:	4a61      	ldr	r2, [pc, #388]	; (8005584 <HAL_TIM_ConfigClockSource+0x224>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	f200 80a6 	bhi.w	8005550 <HAL_TIM_ConfigClockSource+0x1f0>
 8005404:	4a60      	ldr	r2, [pc, #384]	; (8005588 <HAL_TIM_ConfigClockSource+0x228>)
 8005406:	4293      	cmp	r3, r2
 8005408:	f000 8099 	beq.w	800553e <HAL_TIM_ConfigClockSource+0x1de>
 800540c:	4a5e      	ldr	r2, [pc, #376]	; (8005588 <HAL_TIM_ConfigClockSource+0x228>)
 800540e:	4293      	cmp	r3, r2
 8005410:	f200 809e 	bhi.w	8005550 <HAL_TIM_ConfigClockSource+0x1f0>
 8005414:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005418:	f000 8091 	beq.w	800553e <HAL_TIM_ConfigClockSource+0x1de>
 800541c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005420:	f200 8096 	bhi.w	8005550 <HAL_TIM_ConfigClockSource+0x1f0>
 8005424:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005428:	f000 8089 	beq.w	800553e <HAL_TIM_ConfigClockSource+0x1de>
 800542c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005430:	f200 808e 	bhi.w	8005550 <HAL_TIM_ConfigClockSource+0x1f0>
 8005434:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005438:	d03e      	beq.n	80054b8 <HAL_TIM_ConfigClockSource+0x158>
 800543a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800543e:	f200 8087 	bhi.w	8005550 <HAL_TIM_ConfigClockSource+0x1f0>
 8005442:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005446:	f000 8086 	beq.w	8005556 <HAL_TIM_ConfigClockSource+0x1f6>
 800544a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800544e:	d87f      	bhi.n	8005550 <HAL_TIM_ConfigClockSource+0x1f0>
 8005450:	2b70      	cmp	r3, #112	; 0x70
 8005452:	d01a      	beq.n	800548a <HAL_TIM_ConfigClockSource+0x12a>
 8005454:	2b70      	cmp	r3, #112	; 0x70
 8005456:	d87b      	bhi.n	8005550 <HAL_TIM_ConfigClockSource+0x1f0>
 8005458:	2b60      	cmp	r3, #96	; 0x60
 800545a:	d050      	beq.n	80054fe <HAL_TIM_ConfigClockSource+0x19e>
 800545c:	2b60      	cmp	r3, #96	; 0x60
 800545e:	d877      	bhi.n	8005550 <HAL_TIM_ConfigClockSource+0x1f0>
 8005460:	2b50      	cmp	r3, #80	; 0x50
 8005462:	d03c      	beq.n	80054de <HAL_TIM_ConfigClockSource+0x17e>
 8005464:	2b50      	cmp	r3, #80	; 0x50
 8005466:	d873      	bhi.n	8005550 <HAL_TIM_ConfigClockSource+0x1f0>
 8005468:	2b40      	cmp	r3, #64	; 0x40
 800546a:	d058      	beq.n	800551e <HAL_TIM_ConfigClockSource+0x1be>
 800546c:	2b40      	cmp	r3, #64	; 0x40
 800546e:	d86f      	bhi.n	8005550 <HAL_TIM_ConfigClockSource+0x1f0>
 8005470:	2b30      	cmp	r3, #48	; 0x30
 8005472:	d064      	beq.n	800553e <HAL_TIM_ConfigClockSource+0x1de>
 8005474:	2b30      	cmp	r3, #48	; 0x30
 8005476:	d86b      	bhi.n	8005550 <HAL_TIM_ConfigClockSource+0x1f0>
 8005478:	2b20      	cmp	r3, #32
 800547a:	d060      	beq.n	800553e <HAL_TIM_ConfigClockSource+0x1de>
 800547c:	2b20      	cmp	r3, #32
 800547e:	d867      	bhi.n	8005550 <HAL_TIM_ConfigClockSource+0x1f0>
 8005480:	2b00      	cmp	r3, #0
 8005482:	d05c      	beq.n	800553e <HAL_TIM_ConfigClockSource+0x1de>
 8005484:	2b10      	cmp	r3, #16
 8005486:	d05a      	beq.n	800553e <HAL_TIM_ConfigClockSource+0x1de>
 8005488:	e062      	b.n	8005550 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6818      	ldr	r0, [r3, #0]
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	6899      	ldr	r1, [r3, #8]
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	685a      	ldr	r2, [r3, #4]
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	68db      	ldr	r3, [r3, #12]
 800549a:	f000 fcc5 	bl	8005e28 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80054ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	68ba      	ldr	r2, [r7, #8]
 80054b4:	609a      	str	r2, [r3, #8]
      break;
 80054b6:	e04f      	b.n	8005558 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6818      	ldr	r0, [r3, #0]
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	6899      	ldr	r1, [r3, #8]
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	685a      	ldr	r2, [r3, #4]
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	68db      	ldr	r3, [r3, #12]
 80054c8:	f000 fcae 	bl	8005e28 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	689a      	ldr	r2, [r3, #8]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80054da:	609a      	str	r2, [r3, #8]
      break;
 80054dc:	e03c      	b.n	8005558 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6818      	ldr	r0, [r3, #0]
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	6859      	ldr	r1, [r3, #4]
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	68db      	ldr	r3, [r3, #12]
 80054ea:	461a      	mov	r2, r3
 80054ec:	f000 fc20 	bl	8005d30 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	2150      	movs	r1, #80	; 0x50
 80054f6:	4618      	mov	r0, r3
 80054f8:	f000 fc79 	bl	8005dee <TIM_ITRx_SetConfig>
      break;
 80054fc:	e02c      	b.n	8005558 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6818      	ldr	r0, [r3, #0]
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	6859      	ldr	r1, [r3, #4]
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	68db      	ldr	r3, [r3, #12]
 800550a:	461a      	mov	r2, r3
 800550c:	f000 fc3f 	bl	8005d8e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	2160      	movs	r1, #96	; 0x60
 8005516:	4618      	mov	r0, r3
 8005518:	f000 fc69 	bl	8005dee <TIM_ITRx_SetConfig>
      break;
 800551c:	e01c      	b.n	8005558 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6818      	ldr	r0, [r3, #0]
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	6859      	ldr	r1, [r3, #4]
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	68db      	ldr	r3, [r3, #12]
 800552a:	461a      	mov	r2, r3
 800552c:	f000 fc00 	bl	8005d30 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	2140      	movs	r1, #64	; 0x40
 8005536:	4618      	mov	r0, r3
 8005538:	f000 fc59 	bl	8005dee <TIM_ITRx_SetConfig>
      break;
 800553c:	e00c      	b.n	8005558 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4619      	mov	r1, r3
 8005548:	4610      	mov	r0, r2
 800554a:	f000 fc50 	bl	8005dee <TIM_ITRx_SetConfig>
      break;
 800554e:	e003      	b.n	8005558 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	73fb      	strb	r3, [r7, #15]
      break;
 8005554:	e000      	b.n	8005558 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8005556:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2201      	movs	r2, #1
 800555c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2200      	movs	r2, #0
 8005564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005568:	7bfb      	ldrb	r3, [r7, #15]
}
 800556a:	4618      	mov	r0, r3
 800556c:	3710      	adds	r7, #16
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}
 8005572:	bf00      	nop
 8005574:	00100070 	.word	0x00100070
 8005578:	00100060 	.word	0x00100060
 800557c:	00100050 	.word	0x00100050
 8005580:	00100040 	.word	0x00100040
 8005584:	00100030 	.word	0x00100030
 8005588:	00100020 	.word	0x00100020

0800558c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800558c:	b480      	push	{r7}
 800558e:	b085      	sub	sp, #20
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	4a46      	ldr	r2, [pc, #280]	; (80056b8 <TIM_Base_SetConfig+0x12c>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d017      	beq.n	80055d4 <TIM_Base_SetConfig+0x48>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055aa:	d013      	beq.n	80055d4 <TIM_Base_SetConfig+0x48>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	4a43      	ldr	r2, [pc, #268]	; (80056bc <TIM_Base_SetConfig+0x130>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d00f      	beq.n	80055d4 <TIM_Base_SetConfig+0x48>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	4a42      	ldr	r2, [pc, #264]	; (80056c0 <TIM_Base_SetConfig+0x134>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d00b      	beq.n	80055d4 <TIM_Base_SetConfig+0x48>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	4a41      	ldr	r2, [pc, #260]	; (80056c4 <TIM_Base_SetConfig+0x138>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d007      	beq.n	80055d4 <TIM_Base_SetConfig+0x48>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	4a40      	ldr	r2, [pc, #256]	; (80056c8 <TIM_Base_SetConfig+0x13c>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d003      	beq.n	80055d4 <TIM_Base_SetConfig+0x48>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	4a3f      	ldr	r2, [pc, #252]	; (80056cc <TIM_Base_SetConfig+0x140>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d108      	bne.n	80055e6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	68fa      	ldr	r2, [r7, #12]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4a33      	ldr	r2, [pc, #204]	; (80056b8 <TIM_Base_SetConfig+0x12c>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d023      	beq.n	8005636 <TIM_Base_SetConfig+0xaa>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055f4:	d01f      	beq.n	8005636 <TIM_Base_SetConfig+0xaa>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	4a30      	ldr	r2, [pc, #192]	; (80056bc <TIM_Base_SetConfig+0x130>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d01b      	beq.n	8005636 <TIM_Base_SetConfig+0xaa>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4a2f      	ldr	r2, [pc, #188]	; (80056c0 <TIM_Base_SetConfig+0x134>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d017      	beq.n	8005636 <TIM_Base_SetConfig+0xaa>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	4a2e      	ldr	r2, [pc, #184]	; (80056c4 <TIM_Base_SetConfig+0x138>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d013      	beq.n	8005636 <TIM_Base_SetConfig+0xaa>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4a2d      	ldr	r2, [pc, #180]	; (80056c8 <TIM_Base_SetConfig+0x13c>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d00f      	beq.n	8005636 <TIM_Base_SetConfig+0xaa>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	4a2d      	ldr	r2, [pc, #180]	; (80056d0 <TIM_Base_SetConfig+0x144>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d00b      	beq.n	8005636 <TIM_Base_SetConfig+0xaa>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	4a2c      	ldr	r2, [pc, #176]	; (80056d4 <TIM_Base_SetConfig+0x148>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d007      	beq.n	8005636 <TIM_Base_SetConfig+0xaa>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	4a2b      	ldr	r2, [pc, #172]	; (80056d8 <TIM_Base_SetConfig+0x14c>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d003      	beq.n	8005636 <TIM_Base_SetConfig+0xaa>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	4a26      	ldr	r2, [pc, #152]	; (80056cc <TIM_Base_SetConfig+0x140>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d108      	bne.n	8005648 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800563c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	68db      	ldr	r3, [r3, #12]
 8005642:	68fa      	ldr	r2, [r7, #12]
 8005644:	4313      	orrs	r3, r2
 8005646:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	695b      	ldr	r3, [r3, #20]
 8005652:	4313      	orrs	r3, r2
 8005654:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	68fa      	ldr	r2, [r7, #12]
 800565a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	689a      	ldr	r2, [r3, #8]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	681a      	ldr	r2, [r3, #0]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	4a12      	ldr	r2, [pc, #72]	; (80056b8 <TIM_Base_SetConfig+0x12c>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d013      	beq.n	800569c <TIM_Base_SetConfig+0x110>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	4a14      	ldr	r2, [pc, #80]	; (80056c8 <TIM_Base_SetConfig+0x13c>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d00f      	beq.n	800569c <TIM_Base_SetConfig+0x110>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	4a14      	ldr	r2, [pc, #80]	; (80056d0 <TIM_Base_SetConfig+0x144>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d00b      	beq.n	800569c <TIM_Base_SetConfig+0x110>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	4a13      	ldr	r2, [pc, #76]	; (80056d4 <TIM_Base_SetConfig+0x148>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d007      	beq.n	800569c <TIM_Base_SetConfig+0x110>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	4a12      	ldr	r2, [pc, #72]	; (80056d8 <TIM_Base_SetConfig+0x14c>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d003      	beq.n	800569c <TIM_Base_SetConfig+0x110>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4a0d      	ldr	r2, [pc, #52]	; (80056cc <TIM_Base_SetConfig+0x140>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d103      	bne.n	80056a4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	691a      	ldr	r2, [r3, #16]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2201      	movs	r2, #1
 80056a8:	615a      	str	r2, [r3, #20]
}
 80056aa:	bf00      	nop
 80056ac:	3714      	adds	r7, #20
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr
 80056b6:	bf00      	nop
 80056b8:	40012c00 	.word	0x40012c00
 80056bc:	40000400 	.word	0x40000400
 80056c0:	40000800 	.word	0x40000800
 80056c4:	40000c00 	.word	0x40000c00
 80056c8:	40013400 	.word	0x40013400
 80056cc:	40015000 	.word	0x40015000
 80056d0:	40014000 	.word	0x40014000
 80056d4:	40014400 	.word	0x40014400
 80056d8:	40014800 	.word	0x40014800

080056dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056dc:	b480      	push	{r7}
 80056de:	b087      	sub	sp, #28
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6a1b      	ldr	r3, [r3, #32]
 80056ea:	f023 0201 	bic.w	r2, r3, #1
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6a1b      	ldr	r3, [r3, #32]
 80056f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	699b      	ldr	r3, [r3, #24]
 8005702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800570a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800570e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f023 0303 	bic.w	r3, r3, #3
 8005716:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	68fa      	ldr	r2, [r7, #12]
 800571e:	4313      	orrs	r3, r2
 8005720:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	f023 0302 	bic.w	r3, r3, #2
 8005728:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	697a      	ldr	r2, [r7, #20]
 8005730:	4313      	orrs	r3, r2
 8005732:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	4a30      	ldr	r2, [pc, #192]	; (80057f8 <TIM_OC1_SetConfig+0x11c>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d013      	beq.n	8005764 <TIM_OC1_SetConfig+0x88>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	4a2f      	ldr	r2, [pc, #188]	; (80057fc <TIM_OC1_SetConfig+0x120>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d00f      	beq.n	8005764 <TIM_OC1_SetConfig+0x88>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	4a2e      	ldr	r2, [pc, #184]	; (8005800 <TIM_OC1_SetConfig+0x124>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d00b      	beq.n	8005764 <TIM_OC1_SetConfig+0x88>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	4a2d      	ldr	r2, [pc, #180]	; (8005804 <TIM_OC1_SetConfig+0x128>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d007      	beq.n	8005764 <TIM_OC1_SetConfig+0x88>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	4a2c      	ldr	r2, [pc, #176]	; (8005808 <TIM_OC1_SetConfig+0x12c>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d003      	beq.n	8005764 <TIM_OC1_SetConfig+0x88>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	4a2b      	ldr	r2, [pc, #172]	; (800580c <TIM_OC1_SetConfig+0x130>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d10c      	bne.n	800577e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	f023 0308 	bic.w	r3, r3, #8
 800576a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	68db      	ldr	r3, [r3, #12]
 8005770:	697a      	ldr	r2, [r7, #20]
 8005772:	4313      	orrs	r3, r2
 8005774:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	f023 0304 	bic.w	r3, r3, #4
 800577c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4a1d      	ldr	r2, [pc, #116]	; (80057f8 <TIM_OC1_SetConfig+0x11c>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d013      	beq.n	80057ae <TIM_OC1_SetConfig+0xd2>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	4a1c      	ldr	r2, [pc, #112]	; (80057fc <TIM_OC1_SetConfig+0x120>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d00f      	beq.n	80057ae <TIM_OC1_SetConfig+0xd2>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	4a1b      	ldr	r2, [pc, #108]	; (8005800 <TIM_OC1_SetConfig+0x124>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d00b      	beq.n	80057ae <TIM_OC1_SetConfig+0xd2>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	4a1a      	ldr	r2, [pc, #104]	; (8005804 <TIM_OC1_SetConfig+0x128>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d007      	beq.n	80057ae <TIM_OC1_SetConfig+0xd2>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	4a19      	ldr	r2, [pc, #100]	; (8005808 <TIM_OC1_SetConfig+0x12c>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d003      	beq.n	80057ae <TIM_OC1_SetConfig+0xd2>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	4a18      	ldr	r2, [pc, #96]	; (800580c <TIM_OC1_SetConfig+0x130>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d111      	bne.n	80057d2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80057bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	695b      	ldr	r3, [r3, #20]
 80057c2:	693a      	ldr	r2, [r7, #16]
 80057c4:	4313      	orrs	r3, r2
 80057c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	699b      	ldr	r3, [r3, #24]
 80057cc:	693a      	ldr	r2, [r7, #16]
 80057ce:	4313      	orrs	r3, r2
 80057d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	693a      	ldr	r2, [r7, #16]
 80057d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	68fa      	ldr	r2, [r7, #12]
 80057dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	685a      	ldr	r2, [r3, #4]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	697a      	ldr	r2, [r7, #20]
 80057ea:	621a      	str	r2, [r3, #32]
}
 80057ec:	bf00      	nop
 80057ee:	371c      	adds	r7, #28
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr
 80057f8:	40012c00 	.word	0x40012c00
 80057fc:	40013400 	.word	0x40013400
 8005800:	40014000 	.word	0x40014000
 8005804:	40014400 	.word	0x40014400
 8005808:	40014800 	.word	0x40014800
 800580c:	40015000 	.word	0x40015000

08005810 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005810:	b480      	push	{r7}
 8005812:	b087      	sub	sp, #28
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6a1b      	ldr	r3, [r3, #32]
 800581e:	f023 0210 	bic.w	r2, r3, #16
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6a1b      	ldr	r3, [r3, #32]
 800582a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	699b      	ldr	r3, [r3, #24]
 8005836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800583e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005842:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800584a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	021b      	lsls	r3, r3, #8
 8005852:	68fa      	ldr	r2, [r7, #12]
 8005854:	4313      	orrs	r3, r2
 8005856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	f023 0320 	bic.w	r3, r3, #32
 800585e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	011b      	lsls	r3, r3, #4
 8005866:	697a      	ldr	r2, [r7, #20]
 8005868:	4313      	orrs	r3, r2
 800586a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	4a2c      	ldr	r2, [pc, #176]	; (8005920 <TIM_OC2_SetConfig+0x110>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d007      	beq.n	8005884 <TIM_OC2_SetConfig+0x74>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	4a2b      	ldr	r2, [pc, #172]	; (8005924 <TIM_OC2_SetConfig+0x114>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d003      	beq.n	8005884 <TIM_OC2_SetConfig+0x74>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	4a2a      	ldr	r2, [pc, #168]	; (8005928 <TIM_OC2_SetConfig+0x118>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d10d      	bne.n	80058a0 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800588a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	68db      	ldr	r3, [r3, #12]
 8005890:	011b      	lsls	r3, r3, #4
 8005892:	697a      	ldr	r2, [r7, #20]
 8005894:	4313      	orrs	r3, r2
 8005896:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800589e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	4a1f      	ldr	r2, [pc, #124]	; (8005920 <TIM_OC2_SetConfig+0x110>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d013      	beq.n	80058d0 <TIM_OC2_SetConfig+0xc0>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	4a1e      	ldr	r2, [pc, #120]	; (8005924 <TIM_OC2_SetConfig+0x114>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d00f      	beq.n	80058d0 <TIM_OC2_SetConfig+0xc0>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	4a1e      	ldr	r2, [pc, #120]	; (800592c <TIM_OC2_SetConfig+0x11c>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d00b      	beq.n	80058d0 <TIM_OC2_SetConfig+0xc0>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	4a1d      	ldr	r2, [pc, #116]	; (8005930 <TIM_OC2_SetConfig+0x120>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d007      	beq.n	80058d0 <TIM_OC2_SetConfig+0xc0>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	4a1c      	ldr	r2, [pc, #112]	; (8005934 <TIM_OC2_SetConfig+0x124>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d003      	beq.n	80058d0 <TIM_OC2_SetConfig+0xc0>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	4a17      	ldr	r2, [pc, #92]	; (8005928 <TIM_OC2_SetConfig+0x118>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d113      	bne.n	80058f8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80058d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80058de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	695b      	ldr	r3, [r3, #20]
 80058e4:	009b      	lsls	r3, r3, #2
 80058e6:	693a      	ldr	r2, [r7, #16]
 80058e8:	4313      	orrs	r3, r2
 80058ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	699b      	ldr	r3, [r3, #24]
 80058f0:	009b      	lsls	r3, r3, #2
 80058f2:	693a      	ldr	r2, [r7, #16]
 80058f4:	4313      	orrs	r3, r2
 80058f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	693a      	ldr	r2, [r7, #16]
 80058fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	68fa      	ldr	r2, [r7, #12]
 8005902:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	685a      	ldr	r2, [r3, #4]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	697a      	ldr	r2, [r7, #20]
 8005910:	621a      	str	r2, [r3, #32]
}
 8005912:	bf00      	nop
 8005914:	371c      	adds	r7, #28
 8005916:	46bd      	mov	sp, r7
 8005918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591c:	4770      	bx	lr
 800591e:	bf00      	nop
 8005920:	40012c00 	.word	0x40012c00
 8005924:	40013400 	.word	0x40013400
 8005928:	40015000 	.word	0x40015000
 800592c:	40014000 	.word	0x40014000
 8005930:	40014400 	.word	0x40014400
 8005934:	40014800 	.word	0x40014800

08005938 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005938:	b480      	push	{r7}
 800593a:	b087      	sub	sp, #28
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
 8005940:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6a1b      	ldr	r3, [r3, #32]
 8005946:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6a1b      	ldr	r3, [r3, #32]
 8005952:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	69db      	ldr	r3, [r3, #28]
 800595e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800596a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f023 0303 	bic.w	r3, r3, #3
 8005972:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	68fa      	ldr	r2, [r7, #12]
 800597a:	4313      	orrs	r3, r2
 800597c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005984:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	021b      	lsls	r3, r3, #8
 800598c:	697a      	ldr	r2, [r7, #20]
 800598e:	4313      	orrs	r3, r2
 8005990:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	4a2b      	ldr	r2, [pc, #172]	; (8005a44 <TIM_OC3_SetConfig+0x10c>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d007      	beq.n	80059aa <TIM_OC3_SetConfig+0x72>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	4a2a      	ldr	r2, [pc, #168]	; (8005a48 <TIM_OC3_SetConfig+0x110>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d003      	beq.n	80059aa <TIM_OC3_SetConfig+0x72>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	4a29      	ldr	r2, [pc, #164]	; (8005a4c <TIM_OC3_SetConfig+0x114>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d10d      	bne.n	80059c6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80059b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	68db      	ldr	r3, [r3, #12]
 80059b6:	021b      	lsls	r3, r3, #8
 80059b8:	697a      	ldr	r2, [r7, #20]
 80059ba:	4313      	orrs	r3, r2
 80059bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80059c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	4a1e      	ldr	r2, [pc, #120]	; (8005a44 <TIM_OC3_SetConfig+0x10c>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d013      	beq.n	80059f6 <TIM_OC3_SetConfig+0xbe>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	4a1d      	ldr	r2, [pc, #116]	; (8005a48 <TIM_OC3_SetConfig+0x110>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d00f      	beq.n	80059f6 <TIM_OC3_SetConfig+0xbe>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	4a1d      	ldr	r2, [pc, #116]	; (8005a50 <TIM_OC3_SetConfig+0x118>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d00b      	beq.n	80059f6 <TIM_OC3_SetConfig+0xbe>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	4a1c      	ldr	r2, [pc, #112]	; (8005a54 <TIM_OC3_SetConfig+0x11c>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d007      	beq.n	80059f6 <TIM_OC3_SetConfig+0xbe>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	4a1b      	ldr	r2, [pc, #108]	; (8005a58 <TIM_OC3_SetConfig+0x120>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d003      	beq.n	80059f6 <TIM_OC3_SetConfig+0xbe>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	4a16      	ldr	r2, [pc, #88]	; (8005a4c <TIM_OC3_SetConfig+0x114>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d113      	bne.n	8005a1e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80059fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	695b      	ldr	r3, [r3, #20]
 8005a0a:	011b      	lsls	r3, r3, #4
 8005a0c:	693a      	ldr	r2, [r7, #16]
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	699b      	ldr	r3, [r3, #24]
 8005a16:	011b      	lsls	r3, r3, #4
 8005a18:	693a      	ldr	r2, [r7, #16]
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	693a      	ldr	r2, [r7, #16]
 8005a22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	68fa      	ldr	r2, [r7, #12]
 8005a28:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	685a      	ldr	r2, [r3, #4]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	697a      	ldr	r2, [r7, #20]
 8005a36:	621a      	str	r2, [r3, #32]
}
 8005a38:	bf00      	nop
 8005a3a:	371c      	adds	r7, #28
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr
 8005a44:	40012c00 	.word	0x40012c00
 8005a48:	40013400 	.word	0x40013400
 8005a4c:	40015000 	.word	0x40015000
 8005a50:	40014000 	.word	0x40014000
 8005a54:	40014400 	.word	0x40014400
 8005a58:	40014800 	.word	0x40014800

08005a5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b087      	sub	sp, #28
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
 8005a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6a1b      	ldr	r3, [r3, #32]
 8005a6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6a1b      	ldr	r3, [r3, #32]
 8005a76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	69db      	ldr	r3, [r3, #28]
 8005a82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	021b      	lsls	r3, r3, #8
 8005a9e:	68fa      	ldr	r2, [r7, #12]
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005aaa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	031b      	lsls	r3, r3, #12
 8005ab2:	697a      	ldr	r2, [r7, #20]
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	4a2c      	ldr	r2, [pc, #176]	; (8005b6c <TIM_OC4_SetConfig+0x110>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d007      	beq.n	8005ad0 <TIM_OC4_SetConfig+0x74>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	4a2b      	ldr	r2, [pc, #172]	; (8005b70 <TIM_OC4_SetConfig+0x114>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d003      	beq.n	8005ad0 <TIM_OC4_SetConfig+0x74>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	4a2a      	ldr	r2, [pc, #168]	; (8005b74 <TIM_OC4_SetConfig+0x118>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d10d      	bne.n	8005aec <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005ad6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	68db      	ldr	r3, [r3, #12]
 8005adc:	031b      	lsls	r3, r3, #12
 8005ade:	697a      	ldr	r2, [r7, #20]
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005aea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	4a1f      	ldr	r2, [pc, #124]	; (8005b6c <TIM_OC4_SetConfig+0x110>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d013      	beq.n	8005b1c <TIM_OC4_SetConfig+0xc0>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	4a1e      	ldr	r2, [pc, #120]	; (8005b70 <TIM_OC4_SetConfig+0x114>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d00f      	beq.n	8005b1c <TIM_OC4_SetConfig+0xc0>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	4a1e      	ldr	r2, [pc, #120]	; (8005b78 <TIM_OC4_SetConfig+0x11c>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d00b      	beq.n	8005b1c <TIM_OC4_SetConfig+0xc0>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	4a1d      	ldr	r2, [pc, #116]	; (8005b7c <TIM_OC4_SetConfig+0x120>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d007      	beq.n	8005b1c <TIM_OC4_SetConfig+0xc0>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	4a1c      	ldr	r2, [pc, #112]	; (8005b80 <TIM_OC4_SetConfig+0x124>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d003      	beq.n	8005b1c <TIM_OC4_SetConfig+0xc0>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	4a17      	ldr	r2, [pc, #92]	; (8005b74 <TIM_OC4_SetConfig+0x118>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d113      	bne.n	8005b44 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b22:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005b2a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	695b      	ldr	r3, [r3, #20]
 8005b30:	019b      	lsls	r3, r3, #6
 8005b32:	693a      	ldr	r2, [r7, #16]
 8005b34:	4313      	orrs	r3, r2
 8005b36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	699b      	ldr	r3, [r3, #24]
 8005b3c:	019b      	lsls	r3, r3, #6
 8005b3e:	693a      	ldr	r2, [r7, #16]
 8005b40:	4313      	orrs	r3, r2
 8005b42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	693a      	ldr	r2, [r7, #16]
 8005b48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	68fa      	ldr	r2, [r7, #12]
 8005b4e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	685a      	ldr	r2, [r3, #4]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	697a      	ldr	r2, [r7, #20]
 8005b5c:	621a      	str	r2, [r3, #32]
}
 8005b5e:	bf00      	nop
 8005b60:	371c      	adds	r7, #28
 8005b62:	46bd      	mov	sp, r7
 8005b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b68:	4770      	bx	lr
 8005b6a:	bf00      	nop
 8005b6c:	40012c00 	.word	0x40012c00
 8005b70:	40013400 	.word	0x40013400
 8005b74:	40015000 	.word	0x40015000
 8005b78:	40014000 	.word	0x40014000
 8005b7c:	40014400 	.word	0x40014400
 8005b80:	40014800 	.word	0x40014800

08005b84 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b087      	sub	sp, #28
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
 8005b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6a1b      	ldr	r3, [r3, #32]
 8005b92:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6a1b      	ldr	r3, [r3, #32]
 8005b9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005baa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	68fa      	ldr	r2, [r7, #12]
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005bc8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	041b      	lsls	r3, r3, #16
 8005bd0:	693a      	ldr	r2, [r7, #16]
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4a19      	ldr	r2, [pc, #100]	; (8005c40 <TIM_OC5_SetConfig+0xbc>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d013      	beq.n	8005c06 <TIM_OC5_SetConfig+0x82>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	4a18      	ldr	r2, [pc, #96]	; (8005c44 <TIM_OC5_SetConfig+0xc0>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d00f      	beq.n	8005c06 <TIM_OC5_SetConfig+0x82>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	4a17      	ldr	r2, [pc, #92]	; (8005c48 <TIM_OC5_SetConfig+0xc4>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d00b      	beq.n	8005c06 <TIM_OC5_SetConfig+0x82>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	4a16      	ldr	r2, [pc, #88]	; (8005c4c <TIM_OC5_SetConfig+0xc8>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d007      	beq.n	8005c06 <TIM_OC5_SetConfig+0x82>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	4a15      	ldr	r2, [pc, #84]	; (8005c50 <TIM_OC5_SetConfig+0xcc>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d003      	beq.n	8005c06 <TIM_OC5_SetConfig+0x82>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	4a14      	ldr	r2, [pc, #80]	; (8005c54 <TIM_OC5_SetConfig+0xd0>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d109      	bne.n	8005c1a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c0c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	695b      	ldr	r3, [r3, #20]
 8005c12:	021b      	lsls	r3, r3, #8
 8005c14:	697a      	ldr	r2, [r7, #20]
 8005c16:	4313      	orrs	r3, r2
 8005c18:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	697a      	ldr	r2, [r7, #20]
 8005c1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	68fa      	ldr	r2, [r7, #12]
 8005c24:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	685a      	ldr	r2, [r3, #4]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	693a      	ldr	r2, [r7, #16]
 8005c32:	621a      	str	r2, [r3, #32]
}
 8005c34:	bf00      	nop
 8005c36:	371c      	adds	r7, #28
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr
 8005c40:	40012c00 	.word	0x40012c00
 8005c44:	40013400 	.word	0x40013400
 8005c48:	40014000 	.word	0x40014000
 8005c4c:	40014400 	.word	0x40014400
 8005c50:	40014800 	.word	0x40014800
 8005c54:	40015000 	.word	0x40015000

08005c58 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b087      	sub	sp, #28
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6a1b      	ldr	r3, [r3, #32]
 8005c66:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6a1b      	ldr	r3, [r3, #32]
 8005c72:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	021b      	lsls	r3, r3, #8
 8005c92:	68fa      	ldr	r2, [r7, #12]
 8005c94:	4313      	orrs	r3, r2
 8005c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005c9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	051b      	lsls	r3, r3, #20
 8005ca6:	693a      	ldr	r2, [r7, #16]
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	4a1a      	ldr	r2, [pc, #104]	; (8005d18 <TIM_OC6_SetConfig+0xc0>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d013      	beq.n	8005cdc <TIM_OC6_SetConfig+0x84>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	4a19      	ldr	r2, [pc, #100]	; (8005d1c <TIM_OC6_SetConfig+0xc4>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d00f      	beq.n	8005cdc <TIM_OC6_SetConfig+0x84>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	4a18      	ldr	r2, [pc, #96]	; (8005d20 <TIM_OC6_SetConfig+0xc8>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d00b      	beq.n	8005cdc <TIM_OC6_SetConfig+0x84>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	4a17      	ldr	r2, [pc, #92]	; (8005d24 <TIM_OC6_SetConfig+0xcc>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d007      	beq.n	8005cdc <TIM_OC6_SetConfig+0x84>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	4a16      	ldr	r2, [pc, #88]	; (8005d28 <TIM_OC6_SetConfig+0xd0>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d003      	beq.n	8005cdc <TIM_OC6_SetConfig+0x84>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	4a15      	ldr	r2, [pc, #84]	; (8005d2c <TIM_OC6_SetConfig+0xd4>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d109      	bne.n	8005cf0 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ce2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	695b      	ldr	r3, [r3, #20]
 8005ce8:	029b      	lsls	r3, r3, #10
 8005cea:	697a      	ldr	r2, [r7, #20]
 8005cec:	4313      	orrs	r3, r2
 8005cee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	697a      	ldr	r2, [r7, #20]
 8005cf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	68fa      	ldr	r2, [r7, #12]
 8005cfa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	685a      	ldr	r2, [r3, #4]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	693a      	ldr	r2, [r7, #16]
 8005d08:	621a      	str	r2, [r3, #32]
}
 8005d0a:	bf00      	nop
 8005d0c:	371c      	adds	r7, #28
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d14:	4770      	bx	lr
 8005d16:	bf00      	nop
 8005d18:	40012c00 	.word	0x40012c00
 8005d1c:	40013400 	.word	0x40013400
 8005d20:	40014000 	.word	0x40014000
 8005d24:	40014400 	.word	0x40014400
 8005d28:	40014800 	.word	0x40014800
 8005d2c:	40015000 	.word	0x40015000

08005d30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b087      	sub	sp, #28
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	60f8      	str	r0, [r7, #12]
 8005d38:	60b9      	str	r1, [r7, #8]
 8005d3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	6a1b      	ldr	r3, [r3, #32]
 8005d40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	6a1b      	ldr	r3, [r3, #32]
 8005d46:	f023 0201 	bic.w	r2, r3, #1
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	699b      	ldr	r3, [r3, #24]
 8005d52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	011b      	lsls	r3, r3, #4
 8005d60:	693a      	ldr	r2, [r7, #16]
 8005d62:	4313      	orrs	r3, r2
 8005d64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	f023 030a 	bic.w	r3, r3, #10
 8005d6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d6e:	697a      	ldr	r2, [r7, #20]
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	4313      	orrs	r3, r2
 8005d74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	693a      	ldr	r2, [r7, #16]
 8005d7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	697a      	ldr	r2, [r7, #20]
 8005d80:	621a      	str	r2, [r3, #32]
}
 8005d82:	bf00      	nop
 8005d84:	371c      	adds	r7, #28
 8005d86:	46bd      	mov	sp, r7
 8005d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8c:	4770      	bx	lr

08005d8e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d8e:	b480      	push	{r7}
 8005d90:	b087      	sub	sp, #28
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	60f8      	str	r0, [r7, #12]
 8005d96:	60b9      	str	r1, [r7, #8]
 8005d98:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	6a1b      	ldr	r3, [r3, #32]
 8005d9e:	f023 0210 	bic.w	r2, r3, #16
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	699b      	ldr	r3, [r3, #24]
 8005daa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	6a1b      	ldr	r3, [r3, #32]
 8005db0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005db8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	031b      	lsls	r3, r3, #12
 8005dbe:	697a      	ldr	r2, [r7, #20]
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005dca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	011b      	lsls	r3, r3, #4
 8005dd0:	693a      	ldr	r2, [r7, #16]
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	697a      	ldr	r2, [r7, #20]
 8005dda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	693a      	ldr	r2, [r7, #16]
 8005de0:	621a      	str	r2, [r3, #32]
}
 8005de2:	bf00      	nop
 8005de4:	371c      	adds	r7, #28
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr

08005dee <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005dee:	b480      	push	{r7}
 8005df0:	b085      	sub	sp, #20
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	6078      	str	r0, [r7, #4]
 8005df6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	689b      	ldr	r3, [r3, #8]
 8005dfc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005e04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e0a:	683a      	ldr	r2, [r7, #0]
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	f043 0307 	orr.w	r3, r3, #7
 8005e14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	68fa      	ldr	r2, [r7, #12]
 8005e1a:	609a      	str	r2, [r3, #8]
}
 8005e1c:	bf00      	nop
 8005e1e:	3714      	adds	r7, #20
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr

08005e28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b087      	sub	sp, #28
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	60f8      	str	r0, [r7, #12]
 8005e30:	60b9      	str	r1, [r7, #8]
 8005e32:	607a      	str	r2, [r7, #4]
 8005e34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	021a      	lsls	r2, r3, #8
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	431a      	orrs	r2, r3
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	697a      	ldr	r2, [r7, #20]
 8005e52:	4313      	orrs	r3, r2
 8005e54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	697a      	ldr	r2, [r7, #20]
 8005e5a:	609a      	str	r2, [r3, #8]
}
 8005e5c:	bf00      	nop
 8005e5e:	371c      	adds	r7, #28
 8005e60:	46bd      	mov	sp, r7
 8005e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e66:	4770      	bx	lr

08005e68 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b087      	sub	sp, #28
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	60f8      	str	r0, [r7, #12]
 8005e70:	60b9      	str	r1, [r7, #8]
 8005e72:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	f003 031f 	and.w	r3, r3, #31
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e80:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	6a1a      	ldr	r2, [r3, #32]
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	43db      	mvns	r3, r3
 8005e8a:	401a      	ands	r2, r3
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	6a1a      	ldr	r2, [r3, #32]
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	f003 031f 	and.w	r3, r3, #31
 8005e9a:	6879      	ldr	r1, [r7, #4]
 8005e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8005ea0:	431a      	orrs	r2, r3
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	621a      	str	r2, [r3, #32]
}
 8005ea6:	bf00      	nop
 8005ea8:	371c      	adds	r7, #28
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb0:	4770      	bx	lr
	...

08005eb4 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b084      	sub	sp, #16
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d109      	bne.n	8005ed8 <HAL_TIMEx_PWMN_Start+0x24>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005eca:	b2db      	uxtb	r3, r3
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	bf14      	ite	ne
 8005ed0:	2301      	movne	r3, #1
 8005ed2:	2300      	moveq	r3, #0
 8005ed4:	b2db      	uxtb	r3, r3
 8005ed6:	e022      	b.n	8005f1e <HAL_TIMEx_PWMN_Start+0x6a>
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	2b04      	cmp	r3, #4
 8005edc:	d109      	bne.n	8005ef2 <HAL_TIMEx_PWMN_Start+0x3e>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ee4:	b2db      	uxtb	r3, r3
 8005ee6:	2b01      	cmp	r3, #1
 8005ee8:	bf14      	ite	ne
 8005eea:	2301      	movne	r3, #1
 8005eec:	2300      	moveq	r3, #0
 8005eee:	b2db      	uxtb	r3, r3
 8005ef0:	e015      	b.n	8005f1e <HAL_TIMEx_PWMN_Start+0x6a>
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	2b08      	cmp	r3, #8
 8005ef6:	d109      	bne.n	8005f0c <HAL_TIMEx_PWMN_Start+0x58>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005efe:	b2db      	uxtb	r3, r3
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	bf14      	ite	ne
 8005f04:	2301      	movne	r3, #1
 8005f06:	2300      	moveq	r3, #0
 8005f08:	b2db      	uxtb	r3, r3
 8005f0a:	e008      	b.n	8005f1e <HAL_TIMEx_PWMN_Start+0x6a>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8005f12:	b2db      	uxtb	r3, r3
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	bf14      	ite	ne
 8005f18:	2301      	movne	r3, #1
 8005f1a:	2300      	moveq	r3, #0
 8005f1c:	b2db      	uxtb	r3, r3
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d001      	beq.n	8005f26 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8005f22:	2301      	movs	r3, #1
 8005f24:	e073      	b.n	800600e <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d104      	bne.n	8005f36 <HAL_TIMEx_PWMN_Start+0x82>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2202      	movs	r2, #2
 8005f30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f34:	e013      	b.n	8005f5e <HAL_TIMEx_PWMN_Start+0xaa>
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	2b04      	cmp	r3, #4
 8005f3a:	d104      	bne.n	8005f46 <HAL_TIMEx_PWMN_Start+0x92>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2202      	movs	r2, #2
 8005f40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f44:	e00b      	b.n	8005f5e <HAL_TIMEx_PWMN_Start+0xaa>
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	2b08      	cmp	r3, #8
 8005f4a:	d104      	bne.n	8005f56 <HAL_TIMEx_PWMN_Start+0xa2>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2202      	movs	r2, #2
 8005f50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005f54:	e003      	b.n	8005f5e <HAL_TIMEx_PWMN_Start+0xaa>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2202      	movs	r2, #2
 8005f5a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	2204      	movs	r2, #4
 8005f64:	6839      	ldr	r1, [r7, #0]
 8005f66:	4618      	mov	r0, r3
 8005f68:	f000 f9ae 	bl	80062c8 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f7a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a25      	ldr	r2, [pc, #148]	; (8006018 <HAL_TIMEx_PWMN_Start+0x164>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d022      	beq.n	8005fcc <HAL_TIMEx_PWMN_Start+0x118>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f8e:	d01d      	beq.n	8005fcc <HAL_TIMEx_PWMN_Start+0x118>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a21      	ldr	r2, [pc, #132]	; (800601c <HAL_TIMEx_PWMN_Start+0x168>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d018      	beq.n	8005fcc <HAL_TIMEx_PWMN_Start+0x118>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a20      	ldr	r2, [pc, #128]	; (8006020 <HAL_TIMEx_PWMN_Start+0x16c>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d013      	beq.n	8005fcc <HAL_TIMEx_PWMN_Start+0x118>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a1e      	ldr	r2, [pc, #120]	; (8006024 <HAL_TIMEx_PWMN_Start+0x170>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d00e      	beq.n	8005fcc <HAL_TIMEx_PWMN_Start+0x118>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a1d      	ldr	r2, [pc, #116]	; (8006028 <HAL_TIMEx_PWMN_Start+0x174>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d009      	beq.n	8005fcc <HAL_TIMEx_PWMN_Start+0x118>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a1b      	ldr	r2, [pc, #108]	; (800602c <HAL_TIMEx_PWMN_Start+0x178>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d004      	beq.n	8005fcc <HAL_TIMEx_PWMN_Start+0x118>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a1a      	ldr	r2, [pc, #104]	; (8006030 <HAL_TIMEx_PWMN_Start+0x17c>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d115      	bne.n	8005ff8 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	689a      	ldr	r2, [r3, #8]
 8005fd2:	4b18      	ldr	r3, [pc, #96]	; (8006034 <HAL_TIMEx_PWMN_Start+0x180>)
 8005fd4:	4013      	ands	r3, r2
 8005fd6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2b06      	cmp	r3, #6
 8005fdc:	d015      	beq.n	800600a <HAL_TIMEx_PWMN_Start+0x156>
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fe4:	d011      	beq.n	800600a <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	681a      	ldr	r2, [r3, #0]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f042 0201 	orr.w	r2, r2, #1
 8005ff4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ff6:	e008      	b.n	800600a <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	681a      	ldr	r2, [r3, #0]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f042 0201 	orr.w	r2, r2, #1
 8006006:	601a      	str	r2, [r3, #0]
 8006008:	e000      	b.n	800600c <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800600a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800600c:	2300      	movs	r3, #0
}
 800600e:	4618      	mov	r0, r3
 8006010:	3710      	adds	r7, #16
 8006012:	46bd      	mov	sp, r7
 8006014:	bd80      	pop	{r7, pc}
 8006016:	bf00      	nop
 8006018:	40012c00 	.word	0x40012c00
 800601c:	40000400 	.word	0x40000400
 8006020:	40000800 	.word	0x40000800
 8006024:	40000c00 	.word	0x40000c00
 8006028:	40013400 	.word	0x40013400
 800602c:	40014000 	.word	0x40014000
 8006030:	40015000 	.word	0x40015000
 8006034:	00010007 	.word	0x00010007

08006038 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006038:	b480      	push	{r7}
 800603a:	b085      	sub	sp, #20
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006048:	2b01      	cmp	r3, #1
 800604a:	d101      	bne.n	8006050 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800604c:	2302      	movs	r3, #2
 800604e:	e074      	b.n	800613a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2201      	movs	r2, #1
 8006054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2202      	movs	r2, #2
 800605c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	689b      	ldr	r3, [r3, #8]
 800606e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a34      	ldr	r2, [pc, #208]	; (8006148 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d009      	beq.n	800608e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a33      	ldr	r2, [pc, #204]	; (800614c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d004      	beq.n	800608e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a31      	ldr	r2, [pc, #196]	; (8006150 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d108      	bne.n	80060a0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006094:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	68fa      	ldr	r2, [r7, #12]
 800609c:	4313      	orrs	r3, r2
 800609e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80060a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	68fa      	ldr	r2, [r7, #12]
 80060b2:	4313      	orrs	r3, r2
 80060b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	68fa      	ldr	r2, [r7, #12]
 80060bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a21      	ldr	r2, [pc, #132]	; (8006148 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d022      	beq.n	800610e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060d0:	d01d      	beq.n	800610e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a1f      	ldr	r2, [pc, #124]	; (8006154 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d018      	beq.n	800610e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a1d      	ldr	r2, [pc, #116]	; (8006158 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d013      	beq.n	800610e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a1c      	ldr	r2, [pc, #112]	; (800615c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d00e      	beq.n	800610e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a15      	ldr	r2, [pc, #84]	; (800614c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d009      	beq.n	800610e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a18      	ldr	r2, [pc, #96]	; (8006160 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d004      	beq.n	800610e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a11      	ldr	r2, [pc, #68]	; (8006150 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d10c      	bne.n	8006128 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006114:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	689b      	ldr	r3, [r3, #8]
 800611a:	68ba      	ldr	r2, [r7, #8]
 800611c:	4313      	orrs	r3, r2
 800611e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	68ba      	ldr	r2, [r7, #8]
 8006126:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2201      	movs	r2, #1
 800612c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2200      	movs	r2, #0
 8006134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006138:	2300      	movs	r3, #0
}
 800613a:	4618      	mov	r0, r3
 800613c:	3714      	adds	r7, #20
 800613e:	46bd      	mov	sp, r7
 8006140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006144:	4770      	bx	lr
 8006146:	bf00      	nop
 8006148:	40012c00 	.word	0x40012c00
 800614c:	40013400 	.word	0x40013400
 8006150:	40015000 	.word	0x40015000
 8006154:	40000400 	.word	0x40000400
 8006158:	40000800 	.word	0x40000800
 800615c:	40000c00 	.word	0x40000c00
 8006160:	40014000 	.word	0x40014000

08006164 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006164:	b480      	push	{r7}
 8006166:	b085      	sub	sp, #20
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
 800616c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800616e:	2300      	movs	r3, #0
 8006170:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006178:	2b01      	cmp	r3, #1
 800617a:	d101      	bne.n	8006180 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800617c:	2302      	movs	r3, #2
 800617e:	e096      	b.n	80062ae <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2201      	movs	r2, #1
 8006184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	68db      	ldr	r3, [r3, #12]
 8006192:	4313      	orrs	r3, r2
 8006194:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	689b      	ldr	r3, [r3, #8]
 80061a0:	4313      	orrs	r3, r2
 80061a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	4313      	orrs	r3, r2
 80061b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4313      	orrs	r3, r2
 80061be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	691b      	ldr	r3, [r3, #16]
 80061ca:	4313      	orrs	r3, r2
 80061cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	695b      	ldr	r3, [r3, #20]
 80061d8:	4313      	orrs	r3, r2
 80061da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061e6:	4313      	orrs	r3, r2
 80061e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	699b      	ldr	r3, [r3, #24]
 80061f4:	041b      	lsls	r3, r3, #16
 80061f6:	4313      	orrs	r3, r2
 80061f8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a2f      	ldr	r2, [pc, #188]	; (80062bc <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d009      	beq.n	8006218 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a2d      	ldr	r2, [pc, #180]	; (80062c0 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d004      	beq.n	8006218 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a2c      	ldr	r2, [pc, #176]	; (80062c4 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d106      	bne.n	8006226 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	69db      	ldr	r3, [r3, #28]
 8006222:	4313      	orrs	r3, r2
 8006224:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a24      	ldr	r2, [pc, #144]	; (80062bc <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d009      	beq.n	8006244 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a22      	ldr	r2, [pc, #136]	; (80062c0 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d004      	beq.n	8006244 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a21      	ldr	r2, [pc, #132]	; (80062c4 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d12b      	bne.n	800629c <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800624e:	051b      	lsls	r3, r3, #20
 8006250:	4313      	orrs	r3, r2
 8006252:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	6a1b      	ldr	r3, [r3, #32]
 800625e:	4313      	orrs	r3, r2
 8006260:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800626c:	4313      	orrs	r3, r2
 800626e:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a11      	ldr	r2, [pc, #68]	; (80062bc <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d009      	beq.n	800628e <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a10      	ldr	r2, [pc, #64]	; (80062c0 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d004      	beq.n	800628e <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a0e      	ldr	r2, [pc, #56]	; (80062c4 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d106      	bne.n	800629c <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006298:	4313      	orrs	r3, r2
 800629a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	68fa      	ldr	r2, [r7, #12]
 80062a2:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2200      	movs	r2, #0
 80062a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062ac:	2300      	movs	r3, #0
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3714      	adds	r7, #20
 80062b2:	46bd      	mov	sp, r7
 80062b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b8:	4770      	bx	lr
 80062ba:	bf00      	nop
 80062bc:	40012c00 	.word	0x40012c00
 80062c0:	40013400 	.word	0x40013400
 80062c4:	40015000 	.word	0x40015000

080062c8 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b087      	sub	sp, #28
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	60f8      	str	r0, [r7, #12]
 80062d0:	60b9      	str	r1, [r7, #8]
 80062d2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	f003 031f 	and.w	r3, r3, #31
 80062da:	2204      	movs	r2, #4
 80062dc:	fa02 f303 	lsl.w	r3, r2, r3
 80062e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	6a1a      	ldr	r2, [r3, #32]
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	43db      	mvns	r3, r3
 80062ea:	401a      	ands	r2, r3
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	6a1a      	ldr	r2, [r3, #32]
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	f003 031f 	and.w	r3, r3, #31
 80062fa:	6879      	ldr	r1, [r7, #4]
 80062fc:	fa01 f303 	lsl.w	r3, r1, r3
 8006300:	431a      	orrs	r2, r3
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	621a      	str	r2, [r3, #32]
}
 8006306:	bf00      	nop
 8006308:	371c      	adds	r7, #28
 800630a:	46bd      	mov	sp, r7
 800630c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006310:	4770      	bx	lr

08006312 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006312:	b580      	push	{r7, lr}
 8006314:	b082      	sub	sp, #8
 8006316:	af00      	add	r7, sp, #0
 8006318:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d101      	bne.n	8006324 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006320:	2301      	movs	r3, #1
 8006322:	e042      	b.n	80063aa <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800632a:	2b00      	cmp	r3, #0
 800632c:	d106      	bne.n	800633c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2200      	movs	r2, #0
 8006332:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f7fb f82e 	bl	8001398 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2224      	movs	r2, #36	; 0x24
 8006340:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f022 0201 	bic.w	r2, r2, #1
 8006352:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f000 fc51 	bl	8006bfc <UART_SetConfig>
 800635a:	4603      	mov	r3, r0
 800635c:	2b01      	cmp	r3, #1
 800635e:	d101      	bne.n	8006364 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006360:	2301      	movs	r3, #1
 8006362:	e022      	b.n	80063aa <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006368:	2b00      	cmp	r3, #0
 800636a:	d002      	beq.n	8006372 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f000 ff41 	bl	80071f4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	685a      	ldr	r2, [r3, #4]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006380:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	689a      	ldr	r2, [r3, #8]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006390:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	681a      	ldr	r2, [r3, #0]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f042 0201 	orr.w	r2, r2, #1
 80063a0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f000 ffc8 	bl	8007338 <UART_CheckIdleState>
 80063a8:	4603      	mov	r3, r0
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3708      	adds	r7, #8
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}

080063b2 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063b2:	b580      	push	{r7, lr}
 80063b4:	b08a      	sub	sp, #40	; 0x28
 80063b6:	af02      	add	r7, sp, #8
 80063b8:	60f8      	str	r0, [r7, #12]
 80063ba:	60b9      	str	r1, [r7, #8]
 80063bc:	603b      	str	r3, [r7, #0]
 80063be:	4613      	mov	r3, r2
 80063c0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063c8:	2b20      	cmp	r3, #32
 80063ca:	f040 8083 	bne.w	80064d4 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d002      	beq.n	80063da <HAL_UART_Transmit+0x28>
 80063d4:	88fb      	ldrh	r3, [r7, #6]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d101      	bne.n	80063de <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	e07b      	b.n	80064d6 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d101      	bne.n	80063ec <HAL_UART_Transmit+0x3a>
 80063e8:	2302      	movs	r3, #2
 80063ea:	e074      	b.n	80064d6 <HAL_UART_Transmit+0x124>
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2201      	movs	r2, #1
 80063f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2200      	movs	r2, #0
 80063f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2221      	movs	r2, #33	; 0x21
 8006400:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006404:	f7fb f9d4 	bl	80017b0 <HAL_GetTick>
 8006408:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	88fa      	ldrh	r2, [r7, #6]
 800640e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	88fa      	ldrh	r2, [r7, #6]
 8006416:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	689b      	ldr	r3, [r3, #8]
 800641e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006422:	d108      	bne.n	8006436 <HAL_UART_Transmit+0x84>
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	691b      	ldr	r3, [r3, #16]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d104      	bne.n	8006436 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800642c:	2300      	movs	r3, #0
 800642e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	61bb      	str	r3, [r7, #24]
 8006434:	e003      	b.n	800643e <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800643a:	2300      	movs	r3, #0
 800643c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2200      	movs	r2, #0
 8006442:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8006446:	e02c      	b.n	80064a2 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	9300      	str	r3, [sp, #0]
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	2200      	movs	r2, #0
 8006450:	2180      	movs	r1, #128	; 0x80
 8006452:	68f8      	ldr	r0, [r7, #12]
 8006454:	f000 ffbb 	bl	80073ce <UART_WaitOnFlagUntilTimeout>
 8006458:	4603      	mov	r3, r0
 800645a:	2b00      	cmp	r3, #0
 800645c:	d001      	beq.n	8006462 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800645e:	2303      	movs	r3, #3
 8006460:	e039      	b.n	80064d6 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8006462:	69fb      	ldr	r3, [r7, #28]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d10b      	bne.n	8006480 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006468:	69bb      	ldr	r3, [r7, #24]
 800646a:	881b      	ldrh	r3, [r3, #0]
 800646c:	461a      	mov	r2, r3
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006476:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006478:	69bb      	ldr	r3, [r7, #24]
 800647a:	3302      	adds	r3, #2
 800647c:	61bb      	str	r3, [r7, #24]
 800647e:	e007      	b.n	8006490 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006480:	69fb      	ldr	r3, [r7, #28]
 8006482:	781a      	ldrb	r2, [r3, #0]
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800648a:	69fb      	ldr	r3, [r7, #28]
 800648c:	3301      	adds	r3, #1
 800648e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006496:	b29b      	uxth	r3, r3
 8006498:	3b01      	subs	r3, #1
 800649a:	b29a      	uxth	r2, r3
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80064a8:	b29b      	uxth	r3, r3
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d1cc      	bne.n	8006448 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	9300      	str	r3, [sp, #0]
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	2200      	movs	r2, #0
 80064b6:	2140      	movs	r1, #64	; 0x40
 80064b8:	68f8      	ldr	r0, [r7, #12]
 80064ba:	f000 ff88 	bl	80073ce <UART_WaitOnFlagUntilTimeout>
 80064be:	4603      	mov	r3, r0
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d001      	beq.n	80064c8 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80064c4:	2303      	movs	r3, #3
 80064c6:	e006      	b.n	80064d6 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2220      	movs	r2, #32
 80064cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80064d0:	2300      	movs	r3, #0
 80064d2:	e000      	b.n	80064d6 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80064d4:	2302      	movs	r3, #2
  }
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3720      	adds	r7, #32
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}
	...

080064e0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b08a      	sub	sp, #40	; 0x28
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	60f8      	str	r0, [r7, #12]
 80064e8:	60b9      	str	r1, [r7, #8]
 80064ea:	4613      	mov	r3, r2
 80064ec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064f4:	2b20      	cmp	r3, #32
 80064f6:	d142      	bne.n	800657e <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d002      	beq.n	8006504 <HAL_UART_Receive_IT+0x24>
 80064fe:	88fb      	ldrh	r3, [r7, #6]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d101      	bne.n	8006508 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006504:	2301      	movs	r3, #1
 8006506:	e03b      	b.n	8006580 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800650e:	2b01      	cmp	r3, #1
 8006510:	d101      	bne.n	8006516 <HAL_UART_Receive_IT+0x36>
 8006512:	2302      	movs	r3, #2
 8006514:	e034      	b.n	8006580 <HAL_UART_Receive_IT+0xa0>
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2201      	movs	r2, #1
 800651a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2200      	movs	r2, #0
 8006522:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a17      	ldr	r2, [pc, #92]	; (8006588 <HAL_UART_Receive_IT+0xa8>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d01f      	beq.n	800656e <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006538:	2b00      	cmp	r3, #0
 800653a:	d018      	beq.n	800656e <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	e853 3f00 	ldrex	r3, [r3]
 8006548:	613b      	str	r3, [r7, #16]
   return(result);
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006550:	627b      	str	r3, [r7, #36]	; 0x24
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	461a      	mov	r2, r3
 8006558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800655a:	623b      	str	r3, [r7, #32]
 800655c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800655e:	69f9      	ldr	r1, [r7, #28]
 8006560:	6a3a      	ldr	r2, [r7, #32]
 8006562:	e841 2300 	strex	r3, r2, [r1]
 8006566:	61bb      	str	r3, [r7, #24]
   return(result);
 8006568:	69bb      	ldr	r3, [r7, #24]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d1e6      	bne.n	800653c <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800656e:	88fb      	ldrh	r3, [r7, #6]
 8006570:	461a      	mov	r2, r3
 8006572:	68b9      	ldr	r1, [r7, #8]
 8006574:	68f8      	ldr	r0, [r7, #12]
 8006576:	f000 fff3 	bl	8007560 <UART_Start_Receive_IT>
 800657a:	4603      	mov	r3, r0
 800657c:	e000      	b.n	8006580 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800657e:	2302      	movs	r3, #2
  }
}
 8006580:	4618      	mov	r0, r3
 8006582:	3728      	adds	r7, #40	; 0x28
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}
 8006588:	40008000 	.word	0x40008000

0800658c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b0ba      	sub	sp, #232	; 0xe8
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	69db      	ldr	r3, [r3, #28]
 800659a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	689b      	ldr	r3, [r3, #8]
 80065ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80065b2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80065b6:	f640 030f 	movw	r3, #2063	; 0x80f
 80065ba:	4013      	ands	r3, r2
 80065bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80065c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d11b      	bne.n	8006600 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80065c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065cc:	f003 0320 	and.w	r3, r3, #32
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d015      	beq.n	8006600 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80065d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065d8:	f003 0320 	and.w	r3, r3, #32
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d105      	bne.n	80065ec <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80065e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d009      	beq.n	8006600 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	f000 82d6 	beq.w	8006ba2 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	4798      	blx	r3
      }
      return;
 80065fe:	e2d0      	b.n	8006ba2 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006600:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006604:	2b00      	cmp	r3, #0
 8006606:	f000 811f 	beq.w	8006848 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800660a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800660e:	4b8b      	ldr	r3, [pc, #556]	; (800683c <HAL_UART_IRQHandler+0x2b0>)
 8006610:	4013      	ands	r3, r2
 8006612:	2b00      	cmp	r3, #0
 8006614:	d106      	bne.n	8006624 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006616:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800661a:	4b89      	ldr	r3, [pc, #548]	; (8006840 <HAL_UART_IRQHandler+0x2b4>)
 800661c:	4013      	ands	r3, r2
 800661e:	2b00      	cmp	r3, #0
 8006620:	f000 8112 	beq.w	8006848 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006624:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006628:	f003 0301 	and.w	r3, r3, #1
 800662c:	2b00      	cmp	r3, #0
 800662e:	d011      	beq.n	8006654 <HAL_UART_IRQHandler+0xc8>
 8006630:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006634:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006638:	2b00      	cmp	r3, #0
 800663a:	d00b      	beq.n	8006654 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	2201      	movs	r2, #1
 8006642:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800664a:	f043 0201 	orr.w	r2, r3, #1
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006654:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006658:	f003 0302 	and.w	r3, r3, #2
 800665c:	2b00      	cmp	r3, #0
 800665e:	d011      	beq.n	8006684 <HAL_UART_IRQHandler+0xf8>
 8006660:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006664:	f003 0301 	and.w	r3, r3, #1
 8006668:	2b00      	cmp	r3, #0
 800666a:	d00b      	beq.n	8006684 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	2202      	movs	r2, #2
 8006672:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800667a:	f043 0204 	orr.w	r2, r3, #4
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006684:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006688:	f003 0304 	and.w	r3, r3, #4
 800668c:	2b00      	cmp	r3, #0
 800668e:	d011      	beq.n	80066b4 <HAL_UART_IRQHandler+0x128>
 8006690:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006694:	f003 0301 	and.w	r3, r3, #1
 8006698:	2b00      	cmp	r3, #0
 800669a:	d00b      	beq.n	80066b4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	2204      	movs	r2, #4
 80066a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066aa:	f043 0202 	orr.w	r2, r3, #2
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80066b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066b8:	f003 0308 	and.w	r3, r3, #8
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d017      	beq.n	80066f0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80066c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066c4:	f003 0320 	and.w	r3, r3, #32
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d105      	bne.n	80066d8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80066cc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80066d0:	4b5a      	ldr	r3, [pc, #360]	; (800683c <HAL_UART_IRQHandler+0x2b0>)
 80066d2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d00b      	beq.n	80066f0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	2208      	movs	r2, #8
 80066de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066e6:	f043 0208 	orr.w	r2, r3, #8
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80066f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d012      	beq.n	8006722 <HAL_UART_IRQHandler+0x196>
 80066fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006700:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006704:	2b00      	cmp	r3, #0
 8006706:	d00c      	beq.n	8006722 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006710:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006718:	f043 0220 	orr.w	r2, r3, #32
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006728:	2b00      	cmp	r3, #0
 800672a:	f000 823c 	beq.w	8006ba6 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800672e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006732:	f003 0320 	and.w	r3, r3, #32
 8006736:	2b00      	cmp	r3, #0
 8006738:	d013      	beq.n	8006762 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800673a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800673e:	f003 0320 	and.w	r3, r3, #32
 8006742:	2b00      	cmp	r3, #0
 8006744:	d105      	bne.n	8006752 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006746:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800674a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800674e:	2b00      	cmp	r3, #0
 8006750:	d007      	beq.n	8006762 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006756:	2b00      	cmp	r3, #0
 8006758:	d003      	beq.n	8006762 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006768:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	689b      	ldr	r3, [r3, #8]
 8006772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006776:	2b40      	cmp	r3, #64	; 0x40
 8006778:	d005      	beq.n	8006786 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800677a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800677e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006782:	2b00      	cmp	r3, #0
 8006784:	d04f      	beq.n	8006826 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f001 f814 	bl	80077b4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	689b      	ldr	r3, [r3, #8]
 8006792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006796:	2b40      	cmp	r3, #64	; 0x40
 8006798:	d141      	bne.n	800681e <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	3308      	adds	r3, #8
 80067a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80067a8:	e853 3f00 	ldrex	r3, [r3]
 80067ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80067b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80067b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	3308      	adds	r3, #8
 80067c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80067c6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80067ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80067d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80067d6:	e841 2300 	strex	r3, r2, [r1]
 80067da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80067de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d1d9      	bne.n	800679a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d013      	beq.n	8006816 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067f2:	4a14      	ldr	r2, [pc, #80]	; (8006844 <HAL_UART_IRQHandler+0x2b8>)
 80067f4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067fa:	4618      	mov	r0, r3
 80067fc:	f7fd f868 	bl	80038d0 <HAL_DMA_Abort_IT>
 8006800:	4603      	mov	r3, r0
 8006802:	2b00      	cmp	r3, #0
 8006804:	d017      	beq.n	8006836 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800680a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800680c:	687a      	ldr	r2, [r7, #4]
 800680e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8006810:	4610      	mov	r0, r2
 8006812:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006814:	e00f      	b.n	8006836 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f000 f9da 	bl	8006bd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800681c:	e00b      	b.n	8006836 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f000 f9d6 	bl	8006bd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006824:	e007      	b.n	8006836 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f000 f9d2 	bl	8006bd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2200      	movs	r2, #0
 8006830:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8006834:	e1b7      	b.n	8006ba6 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006836:	bf00      	nop
    return;
 8006838:	e1b5      	b.n	8006ba6 <HAL_UART_IRQHandler+0x61a>
 800683a:	bf00      	nop
 800683c:	10000001 	.word	0x10000001
 8006840:	04000120 	.word	0x04000120
 8006844:	08007881 	.word	0x08007881

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800684c:	2b01      	cmp	r3, #1
 800684e:	f040 814a 	bne.w	8006ae6 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006852:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006856:	f003 0310 	and.w	r3, r3, #16
 800685a:	2b00      	cmp	r3, #0
 800685c:	f000 8143 	beq.w	8006ae6 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006860:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006864:	f003 0310 	and.w	r3, r3, #16
 8006868:	2b00      	cmp	r3, #0
 800686a:	f000 813c 	beq.w	8006ae6 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	2210      	movs	r2, #16
 8006874:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	689b      	ldr	r3, [r3, #8]
 800687c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006880:	2b40      	cmp	r3, #64	; 0x40
 8006882:	f040 80b5 	bne.w	80069f0 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006892:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006896:	2b00      	cmp	r3, #0
 8006898:	f000 8187 	beq.w	8006baa <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80068a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80068a6:	429a      	cmp	r2, r3
 80068a8:	f080 817f 	bcs.w	8006baa <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80068b2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f003 0320 	and.w	r3, r3, #32
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	f040 8086 	bne.w	80069d4 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80068d4:	e853 3f00 	ldrex	r3, [r3]
 80068d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80068dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80068e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	461a      	mov	r2, r3
 80068ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80068f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80068f6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068fa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80068fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006902:	e841 2300 	strex	r3, r2, [r1]
 8006906:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800690a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800690e:	2b00      	cmp	r3, #0
 8006910:	d1da      	bne.n	80068c8 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	3308      	adds	r3, #8
 8006918:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800691a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800691c:	e853 3f00 	ldrex	r3, [r3]
 8006920:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006922:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006924:	f023 0301 	bic.w	r3, r3, #1
 8006928:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	3308      	adds	r3, #8
 8006932:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006936:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800693a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800693c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800693e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006942:	e841 2300 	strex	r3, r2, [r1]
 8006946:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006948:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800694a:	2b00      	cmp	r3, #0
 800694c:	d1e1      	bne.n	8006912 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	3308      	adds	r3, #8
 8006954:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006956:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006958:	e853 3f00 	ldrex	r3, [r3]
 800695c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800695e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006960:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006964:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	3308      	adds	r3, #8
 800696e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006972:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006974:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006976:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006978:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800697a:	e841 2300 	strex	r3, r2, [r1]
 800697e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006980:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006982:	2b00      	cmp	r3, #0
 8006984:	d1e3      	bne.n	800694e <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2220      	movs	r2, #32
 800698a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2200      	movs	r2, #0
 8006992:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800699a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800699c:	e853 3f00 	ldrex	r3, [r3]
 80069a0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80069a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069a4:	f023 0310 	bic.w	r3, r3, #16
 80069a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	461a      	mov	r2, r3
 80069b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80069b6:	65bb      	str	r3, [r7, #88]	; 0x58
 80069b8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ba:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80069bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80069be:	e841 2300 	strex	r3, r2, [r1]
 80069c2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80069c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d1e4      	bne.n	8006994 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069ce:	4618      	mov	r0, r3
 80069d0:	f7fc ff25 	bl	800381e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	1ad3      	subs	r3, r2, r3
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	4619      	mov	r1, r3
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f000 f8fb 	bl	8006be4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80069ee:	e0dc      	b.n	8006baa <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	1ad3      	subs	r3, r2, r3
 8006a00:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006a0a:	b29b      	uxth	r3, r3
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	f000 80ce 	beq.w	8006bae <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8006a12:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	f000 80c9 	beq.w	8006bae <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a24:	e853 3f00 	ldrex	r3, [r3]
 8006a28:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006a2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a2c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a30:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	461a      	mov	r2, r3
 8006a3a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006a3e:	647b      	str	r3, [r7, #68]	; 0x44
 8006a40:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a42:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006a44:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a46:	e841 2300 	strex	r3, r2, [r1]
 8006a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006a4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d1e4      	bne.n	8006a1c <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	3308      	adds	r3, #8
 8006a58:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a5c:	e853 3f00 	ldrex	r3, [r3]
 8006a60:	623b      	str	r3, [r7, #32]
   return(result);
 8006a62:	6a3b      	ldr	r3, [r7, #32]
 8006a64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a68:	f023 0301 	bic.w	r3, r3, #1
 8006a6c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	3308      	adds	r3, #8
 8006a76:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006a7a:	633a      	str	r2, [r7, #48]	; 0x30
 8006a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a82:	e841 2300 	strex	r3, r2, [r1]
 8006a86:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d1e1      	bne.n	8006a52 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2220      	movs	r2, #32
 8006a92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	e853 3f00 	ldrex	r3, [r3]
 8006aae:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f023 0310 	bic.w	r3, r3, #16
 8006ab6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	461a      	mov	r2, r3
 8006ac0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006ac4:	61fb      	str	r3, [r7, #28]
 8006ac6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ac8:	69b9      	ldr	r1, [r7, #24]
 8006aca:	69fa      	ldr	r2, [r7, #28]
 8006acc:	e841 2300 	strex	r3, r2, [r1]
 8006ad0:	617b      	str	r3, [r7, #20]
   return(result);
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d1e4      	bne.n	8006aa2 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006ad8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006adc:	4619      	mov	r1, r3
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f000 f880 	bl	8006be4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006ae4:	e063      	b.n	8006bae <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006ae6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006aea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d00e      	beq.n	8006b10 <HAL_UART_IRQHandler+0x584>
 8006af2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006af6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d008      	beq.n	8006b10 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006b06:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f001 fb57 	bl	80081bc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006b0e:	e051      	b.n	8006bb4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006b10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d014      	beq.n	8006b46 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006b1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d105      	bne.n	8006b34 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006b28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b2c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d008      	beq.n	8006b46 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d03a      	beq.n	8006bb2 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	4798      	blx	r3
    }
    return;
 8006b44:	e035      	b.n	8006bb2 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006b46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d009      	beq.n	8006b66 <HAL_UART_IRQHandler+0x5da>
 8006b52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d003      	beq.n	8006b66 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f000 fea4 	bl	80078ac <UART_EndTransmit_IT>
    return;
 8006b64:	e026      	b.n	8006bb4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006b66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b6a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d009      	beq.n	8006b86 <HAL_UART_IRQHandler+0x5fa>
 8006b72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b76:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d003      	beq.n	8006b86 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f001 fb30 	bl	80081e4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006b84:	e016      	b.n	8006bb4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006b86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d010      	beq.n	8006bb4 <HAL_UART_IRQHandler+0x628>
 8006b92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	da0c      	bge.n	8006bb4 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f001 fb18 	bl	80081d0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006ba0:	e008      	b.n	8006bb4 <HAL_UART_IRQHandler+0x628>
      return;
 8006ba2:	bf00      	nop
 8006ba4:	e006      	b.n	8006bb4 <HAL_UART_IRQHandler+0x628>
    return;
 8006ba6:	bf00      	nop
 8006ba8:	e004      	b.n	8006bb4 <HAL_UART_IRQHandler+0x628>
      return;
 8006baa:	bf00      	nop
 8006bac:	e002      	b.n	8006bb4 <HAL_UART_IRQHandler+0x628>
      return;
 8006bae:	bf00      	nop
 8006bb0:	e000      	b.n	8006bb4 <HAL_UART_IRQHandler+0x628>
    return;
 8006bb2:	bf00      	nop
  }
}
 8006bb4:	37e8      	adds	r7, #232	; 0xe8
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}
 8006bba:	bf00      	nop

08006bbc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b083      	sub	sp, #12
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006bc4:	bf00      	nop
 8006bc6:	370c      	adds	r7, #12
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bce:	4770      	bx	lr

08006bd0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b083      	sub	sp, #12
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006bd8:	bf00      	nop
 8006bda:	370c      	adds	r7, #12
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr

08006be4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b083      	sub	sp, #12
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
 8006bec:	460b      	mov	r3, r1
 8006bee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006bf0:	bf00      	nop
 8006bf2:	370c      	adds	r7, #12
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfa:	4770      	bx	lr

08006bfc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006bfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c00:	b08c      	sub	sp, #48	; 0x30
 8006c02:	af00      	add	r7, sp, #0
 8006c04:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006c06:	2300      	movs	r3, #0
 8006c08:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	689a      	ldr	r2, [r3, #8]
 8006c10:	697b      	ldr	r3, [r7, #20]
 8006c12:	691b      	ldr	r3, [r3, #16]
 8006c14:	431a      	orrs	r2, r3
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	695b      	ldr	r3, [r3, #20]
 8006c1a:	431a      	orrs	r2, r3
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	69db      	ldr	r3, [r3, #28]
 8006c20:	4313      	orrs	r3, r2
 8006c22:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006c24:	697b      	ldr	r3, [r7, #20]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	681a      	ldr	r2, [r3, #0]
 8006c2a:	4baa      	ldr	r3, [pc, #680]	; (8006ed4 <UART_SetConfig+0x2d8>)
 8006c2c:	4013      	ands	r3, r2
 8006c2e:	697a      	ldr	r2, [r7, #20]
 8006c30:	6812      	ldr	r2, [r2, #0]
 8006c32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006c34:	430b      	orrs	r3, r1
 8006c36:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	68da      	ldr	r2, [r3, #12]
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	430a      	orrs	r2, r1
 8006c4c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	699b      	ldr	r3, [r3, #24]
 8006c52:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a9f      	ldr	r2, [pc, #636]	; (8006ed8 <UART_SetConfig+0x2dc>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d004      	beq.n	8006c68 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	6a1b      	ldr	r3, [r3, #32]
 8006c62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c64:	4313      	orrs	r3, r2
 8006c66:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	689b      	ldr	r3, [r3, #8]
 8006c6e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006c72:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006c76:	697a      	ldr	r2, [r7, #20]
 8006c78:	6812      	ldr	r2, [r2, #0]
 8006c7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006c7c:	430b      	orrs	r3, r1
 8006c7e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c86:	f023 010f 	bic.w	r1, r3, #15
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	430a      	orrs	r2, r1
 8006c94:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a90      	ldr	r2, [pc, #576]	; (8006edc <UART_SetConfig+0x2e0>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d125      	bne.n	8006cec <UART_SetConfig+0xf0>
 8006ca0:	4b8f      	ldr	r3, [pc, #572]	; (8006ee0 <UART_SetConfig+0x2e4>)
 8006ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ca6:	f003 0303 	and.w	r3, r3, #3
 8006caa:	2b03      	cmp	r3, #3
 8006cac:	d81a      	bhi.n	8006ce4 <UART_SetConfig+0xe8>
 8006cae:	a201      	add	r2, pc, #4	; (adr r2, 8006cb4 <UART_SetConfig+0xb8>)
 8006cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cb4:	08006cc5 	.word	0x08006cc5
 8006cb8:	08006cd5 	.word	0x08006cd5
 8006cbc:	08006ccd 	.word	0x08006ccd
 8006cc0:	08006cdd 	.word	0x08006cdd
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cca:	e116      	b.n	8006efa <UART_SetConfig+0x2fe>
 8006ccc:	2302      	movs	r3, #2
 8006cce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cd2:	e112      	b.n	8006efa <UART_SetConfig+0x2fe>
 8006cd4:	2304      	movs	r3, #4
 8006cd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cda:	e10e      	b.n	8006efa <UART_SetConfig+0x2fe>
 8006cdc:	2308      	movs	r3, #8
 8006cde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ce2:	e10a      	b.n	8006efa <UART_SetConfig+0x2fe>
 8006ce4:	2310      	movs	r3, #16
 8006ce6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cea:	e106      	b.n	8006efa <UART_SetConfig+0x2fe>
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a7c      	ldr	r2, [pc, #496]	; (8006ee4 <UART_SetConfig+0x2e8>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d138      	bne.n	8006d68 <UART_SetConfig+0x16c>
 8006cf6:	4b7a      	ldr	r3, [pc, #488]	; (8006ee0 <UART_SetConfig+0x2e4>)
 8006cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cfc:	f003 030c 	and.w	r3, r3, #12
 8006d00:	2b0c      	cmp	r3, #12
 8006d02:	d82d      	bhi.n	8006d60 <UART_SetConfig+0x164>
 8006d04:	a201      	add	r2, pc, #4	; (adr r2, 8006d0c <UART_SetConfig+0x110>)
 8006d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d0a:	bf00      	nop
 8006d0c:	08006d41 	.word	0x08006d41
 8006d10:	08006d61 	.word	0x08006d61
 8006d14:	08006d61 	.word	0x08006d61
 8006d18:	08006d61 	.word	0x08006d61
 8006d1c:	08006d51 	.word	0x08006d51
 8006d20:	08006d61 	.word	0x08006d61
 8006d24:	08006d61 	.word	0x08006d61
 8006d28:	08006d61 	.word	0x08006d61
 8006d2c:	08006d49 	.word	0x08006d49
 8006d30:	08006d61 	.word	0x08006d61
 8006d34:	08006d61 	.word	0x08006d61
 8006d38:	08006d61 	.word	0x08006d61
 8006d3c:	08006d59 	.word	0x08006d59
 8006d40:	2300      	movs	r3, #0
 8006d42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d46:	e0d8      	b.n	8006efa <UART_SetConfig+0x2fe>
 8006d48:	2302      	movs	r3, #2
 8006d4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d4e:	e0d4      	b.n	8006efa <UART_SetConfig+0x2fe>
 8006d50:	2304      	movs	r3, #4
 8006d52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d56:	e0d0      	b.n	8006efa <UART_SetConfig+0x2fe>
 8006d58:	2308      	movs	r3, #8
 8006d5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d5e:	e0cc      	b.n	8006efa <UART_SetConfig+0x2fe>
 8006d60:	2310      	movs	r3, #16
 8006d62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d66:	e0c8      	b.n	8006efa <UART_SetConfig+0x2fe>
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a5e      	ldr	r2, [pc, #376]	; (8006ee8 <UART_SetConfig+0x2ec>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d125      	bne.n	8006dbe <UART_SetConfig+0x1c2>
 8006d72:	4b5b      	ldr	r3, [pc, #364]	; (8006ee0 <UART_SetConfig+0x2e4>)
 8006d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d78:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006d7c:	2b30      	cmp	r3, #48	; 0x30
 8006d7e:	d016      	beq.n	8006dae <UART_SetConfig+0x1b2>
 8006d80:	2b30      	cmp	r3, #48	; 0x30
 8006d82:	d818      	bhi.n	8006db6 <UART_SetConfig+0x1ba>
 8006d84:	2b20      	cmp	r3, #32
 8006d86:	d00a      	beq.n	8006d9e <UART_SetConfig+0x1a2>
 8006d88:	2b20      	cmp	r3, #32
 8006d8a:	d814      	bhi.n	8006db6 <UART_SetConfig+0x1ba>
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d002      	beq.n	8006d96 <UART_SetConfig+0x19a>
 8006d90:	2b10      	cmp	r3, #16
 8006d92:	d008      	beq.n	8006da6 <UART_SetConfig+0x1aa>
 8006d94:	e00f      	b.n	8006db6 <UART_SetConfig+0x1ba>
 8006d96:	2300      	movs	r3, #0
 8006d98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d9c:	e0ad      	b.n	8006efa <UART_SetConfig+0x2fe>
 8006d9e:	2302      	movs	r3, #2
 8006da0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006da4:	e0a9      	b.n	8006efa <UART_SetConfig+0x2fe>
 8006da6:	2304      	movs	r3, #4
 8006da8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006dac:	e0a5      	b.n	8006efa <UART_SetConfig+0x2fe>
 8006dae:	2308      	movs	r3, #8
 8006db0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006db4:	e0a1      	b.n	8006efa <UART_SetConfig+0x2fe>
 8006db6:	2310      	movs	r3, #16
 8006db8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006dbc:	e09d      	b.n	8006efa <UART_SetConfig+0x2fe>
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a4a      	ldr	r2, [pc, #296]	; (8006eec <UART_SetConfig+0x2f0>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d125      	bne.n	8006e14 <UART_SetConfig+0x218>
 8006dc8:	4b45      	ldr	r3, [pc, #276]	; (8006ee0 <UART_SetConfig+0x2e4>)
 8006dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dce:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006dd2:	2bc0      	cmp	r3, #192	; 0xc0
 8006dd4:	d016      	beq.n	8006e04 <UART_SetConfig+0x208>
 8006dd6:	2bc0      	cmp	r3, #192	; 0xc0
 8006dd8:	d818      	bhi.n	8006e0c <UART_SetConfig+0x210>
 8006dda:	2b80      	cmp	r3, #128	; 0x80
 8006ddc:	d00a      	beq.n	8006df4 <UART_SetConfig+0x1f8>
 8006dde:	2b80      	cmp	r3, #128	; 0x80
 8006de0:	d814      	bhi.n	8006e0c <UART_SetConfig+0x210>
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d002      	beq.n	8006dec <UART_SetConfig+0x1f0>
 8006de6:	2b40      	cmp	r3, #64	; 0x40
 8006de8:	d008      	beq.n	8006dfc <UART_SetConfig+0x200>
 8006dea:	e00f      	b.n	8006e0c <UART_SetConfig+0x210>
 8006dec:	2300      	movs	r3, #0
 8006dee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006df2:	e082      	b.n	8006efa <UART_SetConfig+0x2fe>
 8006df4:	2302      	movs	r3, #2
 8006df6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006dfa:	e07e      	b.n	8006efa <UART_SetConfig+0x2fe>
 8006dfc:	2304      	movs	r3, #4
 8006dfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e02:	e07a      	b.n	8006efa <UART_SetConfig+0x2fe>
 8006e04:	2308      	movs	r3, #8
 8006e06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e0a:	e076      	b.n	8006efa <UART_SetConfig+0x2fe>
 8006e0c:	2310      	movs	r3, #16
 8006e0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e12:	e072      	b.n	8006efa <UART_SetConfig+0x2fe>
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a35      	ldr	r2, [pc, #212]	; (8006ef0 <UART_SetConfig+0x2f4>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d12a      	bne.n	8006e74 <UART_SetConfig+0x278>
 8006e1e:	4b30      	ldr	r3, [pc, #192]	; (8006ee0 <UART_SetConfig+0x2e4>)
 8006e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e28:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e2c:	d01a      	beq.n	8006e64 <UART_SetConfig+0x268>
 8006e2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e32:	d81b      	bhi.n	8006e6c <UART_SetConfig+0x270>
 8006e34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e38:	d00c      	beq.n	8006e54 <UART_SetConfig+0x258>
 8006e3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e3e:	d815      	bhi.n	8006e6c <UART_SetConfig+0x270>
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d003      	beq.n	8006e4c <UART_SetConfig+0x250>
 8006e44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e48:	d008      	beq.n	8006e5c <UART_SetConfig+0x260>
 8006e4a:	e00f      	b.n	8006e6c <UART_SetConfig+0x270>
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e52:	e052      	b.n	8006efa <UART_SetConfig+0x2fe>
 8006e54:	2302      	movs	r3, #2
 8006e56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e5a:	e04e      	b.n	8006efa <UART_SetConfig+0x2fe>
 8006e5c:	2304      	movs	r3, #4
 8006e5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e62:	e04a      	b.n	8006efa <UART_SetConfig+0x2fe>
 8006e64:	2308      	movs	r3, #8
 8006e66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e6a:	e046      	b.n	8006efa <UART_SetConfig+0x2fe>
 8006e6c:	2310      	movs	r3, #16
 8006e6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e72:	e042      	b.n	8006efa <UART_SetConfig+0x2fe>
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a17      	ldr	r2, [pc, #92]	; (8006ed8 <UART_SetConfig+0x2dc>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d13a      	bne.n	8006ef4 <UART_SetConfig+0x2f8>
 8006e7e:	4b18      	ldr	r3, [pc, #96]	; (8006ee0 <UART_SetConfig+0x2e4>)
 8006e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e84:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006e88:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006e8c:	d01a      	beq.n	8006ec4 <UART_SetConfig+0x2c8>
 8006e8e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006e92:	d81b      	bhi.n	8006ecc <UART_SetConfig+0x2d0>
 8006e94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e98:	d00c      	beq.n	8006eb4 <UART_SetConfig+0x2b8>
 8006e9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e9e:	d815      	bhi.n	8006ecc <UART_SetConfig+0x2d0>
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d003      	beq.n	8006eac <UART_SetConfig+0x2b0>
 8006ea4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ea8:	d008      	beq.n	8006ebc <UART_SetConfig+0x2c0>
 8006eaa:	e00f      	b.n	8006ecc <UART_SetConfig+0x2d0>
 8006eac:	2300      	movs	r3, #0
 8006eae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006eb2:	e022      	b.n	8006efa <UART_SetConfig+0x2fe>
 8006eb4:	2302      	movs	r3, #2
 8006eb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006eba:	e01e      	b.n	8006efa <UART_SetConfig+0x2fe>
 8006ebc:	2304      	movs	r3, #4
 8006ebe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ec2:	e01a      	b.n	8006efa <UART_SetConfig+0x2fe>
 8006ec4:	2308      	movs	r3, #8
 8006ec6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006eca:	e016      	b.n	8006efa <UART_SetConfig+0x2fe>
 8006ecc:	2310      	movs	r3, #16
 8006ece:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ed2:	e012      	b.n	8006efa <UART_SetConfig+0x2fe>
 8006ed4:	cfff69f3 	.word	0xcfff69f3
 8006ed8:	40008000 	.word	0x40008000
 8006edc:	40013800 	.word	0x40013800
 8006ee0:	40021000 	.word	0x40021000
 8006ee4:	40004400 	.word	0x40004400
 8006ee8:	40004800 	.word	0x40004800
 8006eec:	40004c00 	.word	0x40004c00
 8006ef0:	40005000 	.word	0x40005000
 8006ef4:	2310      	movs	r3, #16
 8006ef6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4aae      	ldr	r2, [pc, #696]	; (80071b8 <UART_SetConfig+0x5bc>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	f040 8097 	bne.w	8007034 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006f06:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006f0a:	2b08      	cmp	r3, #8
 8006f0c:	d823      	bhi.n	8006f56 <UART_SetConfig+0x35a>
 8006f0e:	a201      	add	r2, pc, #4	; (adr r2, 8006f14 <UART_SetConfig+0x318>)
 8006f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f14:	08006f39 	.word	0x08006f39
 8006f18:	08006f57 	.word	0x08006f57
 8006f1c:	08006f41 	.word	0x08006f41
 8006f20:	08006f57 	.word	0x08006f57
 8006f24:	08006f47 	.word	0x08006f47
 8006f28:	08006f57 	.word	0x08006f57
 8006f2c:	08006f57 	.word	0x08006f57
 8006f30:	08006f57 	.word	0x08006f57
 8006f34:	08006f4f 	.word	0x08006f4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f38:	f7fd fc74 	bl	8004824 <HAL_RCC_GetPCLK1Freq>
 8006f3c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006f3e:	e010      	b.n	8006f62 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f40:	4b9e      	ldr	r3, [pc, #632]	; (80071bc <UART_SetConfig+0x5c0>)
 8006f42:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006f44:	e00d      	b.n	8006f62 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f46:	f7fd fbff 	bl	8004748 <HAL_RCC_GetSysClockFreq>
 8006f4a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006f4c:	e009      	b.n	8006f62 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f52:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006f54:	e005      	b.n	8006f62 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006f56:	2300      	movs	r3, #0
 8006f58:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006f60:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	f000 8130 	beq.w	80071ca <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f6e:	4a94      	ldr	r2, [pc, #592]	; (80071c0 <UART_SetConfig+0x5c4>)
 8006f70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f74:	461a      	mov	r2, r3
 8006f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f78:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f7c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	685a      	ldr	r2, [r3, #4]
 8006f82:	4613      	mov	r3, r2
 8006f84:	005b      	lsls	r3, r3, #1
 8006f86:	4413      	add	r3, r2
 8006f88:	69ba      	ldr	r2, [r7, #24]
 8006f8a:	429a      	cmp	r2, r3
 8006f8c:	d305      	bcc.n	8006f9a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006f94:	69ba      	ldr	r2, [r7, #24]
 8006f96:	429a      	cmp	r2, r3
 8006f98:	d903      	bls.n	8006fa2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006fa0:	e113      	b.n	80071ca <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	60bb      	str	r3, [r7, #8]
 8006fa8:	60fa      	str	r2, [r7, #12]
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fae:	4a84      	ldr	r2, [pc, #528]	; (80071c0 <UART_SetConfig+0x5c4>)
 8006fb0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006fb4:	b29b      	uxth	r3, r3
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	603b      	str	r3, [r7, #0]
 8006fba:	607a      	str	r2, [r7, #4]
 8006fbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006fc0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006fc4:	f7f9 f994 	bl	80002f0 <__aeabi_uldivmod>
 8006fc8:	4602      	mov	r2, r0
 8006fca:	460b      	mov	r3, r1
 8006fcc:	4610      	mov	r0, r2
 8006fce:	4619      	mov	r1, r3
 8006fd0:	f04f 0200 	mov.w	r2, #0
 8006fd4:	f04f 0300 	mov.w	r3, #0
 8006fd8:	020b      	lsls	r3, r1, #8
 8006fda:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006fde:	0202      	lsls	r2, r0, #8
 8006fe0:	6979      	ldr	r1, [r7, #20]
 8006fe2:	6849      	ldr	r1, [r1, #4]
 8006fe4:	0849      	lsrs	r1, r1, #1
 8006fe6:	2000      	movs	r0, #0
 8006fe8:	460c      	mov	r4, r1
 8006fea:	4605      	mov	r5, r0
 8006fec:	eb12 0804 	adds.w	r8, r2, r4
 8006ff0:	eb43 0905 	adc.w	r9, r3, r5
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	685b      	ldr	r3, [r3, #4]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	469a      	mov	sl, r3
 8006ffc:	4693      	mov	fp, r2
 8006ffe:	4652      	mov	r2, sl
 8007000:	465b      	mov	r3, fp
 8007002:	4640      	mov	r0, r8
 8007004:	4649      	mov	r1, r9
 8007006:	f7f9 f973 	bl	80002f0 <__aeabi_uldivmod>
 800700a:	4602      	mov	r2, r0
 800700c:	460b      	mov	r3, r1
 800700e:	4613      	mov	r3, r2
 8007010:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007012:	6a3b      	ldr	r3, [r7, #32]
 8007014:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007018:	d308      	bcc.n	800702c <UART_SetConfig+0x430>
 800701a:	6a3b      	ldr	r3, [r7, #32]
 800701c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007020:	d204      	bcs.n	800702c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	6a3a      	ldr	r2, [r7, #32]
 8007028:	60da      	str	r2, [r3, #12]
 800702a:	e0ce      	b.n	80071ca <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800702c:	2301      	movs	r3, #1
 800702e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007032:	e0ca      	b.n	80071ca <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	69db      	ldr	r3, [r3, #28]
 8007038:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800703c:	d166      	bne.n	800710c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800703e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007042:	2b08      	cmp	r3, #8
 8007044:	d827      	bhi.n	8007096 <UART_SetConfig+0x49a>
 8007046:	a201      	add	r2, pc, #4	; (adr r2, 800704c <UART_SetConfig+0x450>)
 8007048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800704c:	08007071 	.word	0x08007071
 8007050:	08007079 	.word	0x08007079
 8007054:	08007081 	.word	0x08007081
 8007058:	08007097 	.word	0x08007097
 800705c:	08007087 	.word	0x08007087
 8007060:	08007097 	.word	0x08007097
 8007064:	08007097 	.word	0x08007097
 8007068:	08007097 	.word	0x08007097
 800706c:	0800708f 	.word	0x0800708f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007070:	f7fd fbd8 	bl	8004824 <HAL_RCC_GetPCLK1Freq>
 8007074:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007076:	e014      	b.n	80070a2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007078:	f7fd fbea 	bl	8004850 <HAL_RCC_GetPCLK2Freq>
 800707c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800707e:	e010      	b.n	80070a2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007080:	4b4e      	ldr	r3, [pc, #312]	; (80071bc <UART_SetConfig+0x5c0>)
 8007082:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007084:	e00d      	b.n	80070a2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007086:	f7fd fb5f 	bl	8004748 <HAL_RCC_GetSysClockFreq>
 800708a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800708c:	e009      	b.n	80070a2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800708e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007092:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007094:	e005      	b.n	80070a2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007096:	2300      	movs	r3, #0
 8007098:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800709a:	2301      	movs	r3, #1
 800709c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80070a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80070a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	f000 8090 	beq.w	80071ca <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ae:	4a44      	ldr	r2, [pc, #272]	; (80071c0 <UART_SetConfig+0x5c4>)
 80070b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070b4:	461a      	mov	r2, r3
 80070b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80070bc:	005a      	lsls	r2, r3, #1
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	085b      	lsrs	r3, r3, #1
 80070c4:	441a      	add	r2, r3
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80070ce:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80070d0:	6a3b      	ldr	r3, [r7, #32]
 80070d2:	2b0f      	cmp	r3, #15
 80070d4:	d916      	bls.n	8007104 <UART_SetConfig+0x508>
 80070d6:	6a3b      	ldr	r3, [r7, #32]
 80070d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070dc:	d212      	bcs.n	8007104 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80070de:	6a3b      	ldr	r3, [r7, #32]
 80070e0:	b29b      	uxth	r3, r3
 80070e2:	f023 030f 	bic.w	r3, r3, #15
 80070e6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80070e8:	6a3b      	ldr	r3, [r7, #32]
 80070ea:	085b      	lsrs	r3, r3, #1
 80070ec:	b29b      	uxth	r3, r3
 80070ee:	f003 0307 	and.w	r3, r3, #7
 80070f2:	b29a      	uxth	r2, r3
 80070f4:	8bfb      	ldrh	r3, [r7, #30]
 80070f6:	4313      	orrs	r3, r2
 80070f8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	8bfa      	ldrh	r2, [r7, #30]
 8007100:	60da      	str	r2, [r3, #12]
 8007102:	e062      	b.n	80071ca <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007104:	2301      	movs	r3, #1
 8007106:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800710a:	e05e      	b.n	80071ca <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800710c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007110:	2b08      	cmp	r3, #8
 8007112:	d828      	bhi.n	8007166 <UART_SetConfig+0x56a>
 8007114:	a201      	add	r2, pc, #4	; (adr r2, 800711c <UART_SetConfig+0x520>)
 8007116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800711a:	bf00      	nop
 800711c:	08007141 	.word	0x08007141
 8007120:	08007149 	.word	0x08007149
 8007124:	08007151 	.word	0x08007151
 8007128:	08007167 	.word	0x08007167
 800712c:	08007157 	.word	0x08007157
 8007130:	08007167 	.word	0x08007167
 8007134:	08007167 	.word	0x08007167
 8007138:	08007167 	.word	0x08007167
 800713c:	0800715f 	.word	0x0800715f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007140:	f7fd fb70 	bl	8004824 <HAL_RCC_GetPCLK1Freq>
 8007144:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007146:	e014      	b.n	8007172 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007148:	f7fd fb82 	bl	8004850 <HAL_RCC_GetPCLK2Freq>
 800714c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800714e:	e010      	b.n	8007172 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007150:	4b1a      	ldr	r3, [pc, #104]	; (80071bc <UART_SetConfig+0x5c0>)
 8007152:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007154:	e00d      	b.n	8007172 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007156:	f7fd faf7 	bl	8004748 <HAL_RCC_GetSysClockFreq>
 800715a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800715c:	e009      	b.n	8007172 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800715e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007162:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007164:	e005      	b.n	8007172 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007166:	2300      	movs	r3, #0
 8007168:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800716a:	2301      	movs	r3, #1
 800716c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007170:	bf00      	nop
    }

    if (pclk != 0U)
 8007172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007174:	2b00      	cmp	r3, #0
 8007176:	d028      	beq.n	80071ca <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800717c:	4a10      	ldr	r2, [pc, #64]	; (80071c0 <UART_SetConfig+0x5c4>)
 800717e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007182:	461a      	mov	r2, r3
 8007184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007186:	fbb3 f2f2 	udiv	r2, r3, r2
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	685b      	ldr	r3, [r3, #4]
 800718e:	085b      	lsrs	r3, r3, #1
 8007190:	441a      	add	r2, r3
 8007192:	697b      	ldr	r3, [r7, #20]
 8007194:	685b      	ldr	r3, [r3, #4]
 8007196:	fbb2 f3f3 	udiv	r3, r2, r3
 800719a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800719c:	6a3b      	ldr	r3, [r7, #32]
 800719e:	2b0f      	cmp	r3, #15
 80071a0:	d910      	bls.n	80071c4 <UART_SetConfig+0x5c8>
 80071a2:	6a3b      	ldr	r3, [r7, #32]
 80071a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071a8:	d20c      	bcs.n	80071c4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80071aa:	6a3b      	ldr	r3, [r7, #32]
 80071ac:	b29a      	uxth	r2, r3
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	60da      	str	r2, [r3, #12]
 80071b4:	e009      	b.n	80071ca <UART_SetConfig+0x5ce>
 80071b6:	bf00      	nop
 80071b8:	40008000 	.word	0x40008000
 80071bc:	00f42400 	.word	0x00f42400
 80071c0:	08009bc4 	.word	0x08009bc4
      }
      else
      {
        ret = HAL_ERROR;
 80071c4:	2301      	movs	r3, #1
 80071c6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	2201      	movs	r2, #1
 80071ce:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	2201      	movs	r2, #1
 80071d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	2200      	movs	r2, #0
 80071de:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	2200      	movs	r2, #0
 80071e4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80071e6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80071ea:	4618      	mov	r0, r3
 80071ec:	3730      	adds	r7, #48	; 0x30
 80071ee:	46bd      	mov	sp, r7
 80071f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080071f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80071f4:	b480      	push	{r7}
 80071f6:	b083      	sub	sp, #12
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007200:	f003 0301 	and.w	r3, r3, #1
 8007204:	2b00      	cmp	r3, #0
 8007206:	d00a      	beq.n	800721e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	685b      	ldr	r3, [r3, #4]
 800720e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	430a      	orrs	r2, r1
 800721c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007222:	f003 0302 	and.w	r3, r3, #2
 8007226:	2b00      	cmp	r3, #0
 8007228:	d00a      	beq.n	8007240 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	685b      	ldr	r3, [r3, #4]
 8007230:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	430a      	orrs	r2, r1
 800723e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007244:	f003 0304 	and.w	r3, r3, #4
 8007248:	2b00      	cmp	r3, #0
 800724a:	d00a      	beq.n	8007262 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	430a      	orrs	r2, r1
 8007260:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007266:	f003 0308 	and.w	r3, r3, #8
 800726a:	2b00      	cmp	r3, #0
 800726c:	d00a      	beq.n	8007284 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	430a      	orrs	r2, r1
 8007282:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007288:	f003 0310 	and.w	r3, r3, #16
 800728c:	2b00      	cmp	r3, #0
 800728e:	d00a      	beq.n	80072a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	689b      	ldr	r3, [r3, #8]
 8007296:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	430a      	orrs	r2, r1
 80072a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072aa:	f003 0320 	and.w	r3, r3, #32
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d00a      	beq.n	80072c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	689b      	ldr	r3, [r3, #8]
 80072b8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	430a      	orrs	r2, r1
 80072c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d01a      	beq.n	800730a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	430a      	orrs	r2, r1
 80072e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80072f2:	d10a      	bne.n	800730a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	685b      	ldr	r3, [r3, #4]
 80072fa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	430a      	orrs	r2, r1
 8007308:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800730e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007312:	2b00      	cmp	r3, #0
 8007314:	d00a      	beq.n	800732c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	430a      	orrs	r2, r1
 800732a:	605a      	str	r2, [r3, #4]
  }
}
 800732c:	bf00      	nop
 800732e:	370c      	adds	r7, #12
 8007330:	46bd      	mov	sp, r7
 8007332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007336:	4770      	bx	lr

08007338 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b086      	sub	sp, #24
 800733c:	af02      	add	r7, sp, #8
 800733e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2200      	movs	r2, #0
 8007344:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007348:	f7fa fa32 	bl	80017b0 <HAL_GetTick>
 800734c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f003 0308 	and.w	r3, r3, #8
 8007358:	2b08      	cmp	r3, #8
 800735a:	d10e      	bne.n	800737a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800735c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007360:	9300      	str	r3, [sp, #0]
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	2200      	movs	r2, #0
 8007366:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f000 f82f 	bl	80073ce <UART_WaitOnFlagUntilTimeout>
 8007370:	4603      	mov	r3, r0
 8007372:	2b00      	cmp	r3, #0
 8007374:	d001      	beq.n	800737a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007376:	2303      	movs	r3, #3
 8007378:	e025      	b.n	80073c6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f003 0304 	and.w	r3, r3, #4
 8007384:	2b04      	cmp	r3, #4
 8007386:	d10e      	bne.n	80073a6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007388:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800738c:	9300      	str	r3, [sp, #0]
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	2200      	movs	r2, #0
 8007392:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f000 f819 	bl	80073ce <UART_WaitOnFlagUntilTimeout>
 800739c:	4603      	mov	r3, r0
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d001      	beq.n	80073a6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80073a2:	2303      	movs	r3, #3
 80073a4:	e00f      	b.n	80073c6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2220      	movs	r2, #32
 80073aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2220      	movs	r2, #32
 80073b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2200      	movs	r2, #0
 80073ba:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2200      	movs	r2, #0
 80073c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80073c4:	2300      	movs	r3, #0
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	3710      	adds	r7, #16
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}

080073ce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80073ce:	b580      	push	{r7, lr}
 80073d0:	b09c      	sub	sp, #112	; 0x70
 80073d2:	af00      	add	r7, sp, #0
 80073d4:	60f8      	str	r0, [r7, #12]
 80073d6:	60b9      	str	r1, [r7, #8]
 80073d8:	603b      	str	r3, [r7, #0]
 80073da:	4613      	mov	r3, r2
 80073dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073de:	e0a9      	b.n	8007534 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80073e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073e6:	f000 80a5 	beq.w	8007534 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073ea:	f7fa f9e1 	bl	80017b0 <HAL_GetTick>
 80073ee:	4602      	mov	r2, r0
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	1ad3      	subs	r3, r2, r3
 80073f4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80073f6:	429a      	cmp	r2, r3
 80073f8:	d302      	bcc.n	8007400 <UART_WaitOnFlagUntilTimeout+0x32>
 80073fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d140      	bne.n	8007482 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007406:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007408:	e853 3f00 	ldrex	r3, [r3]
 800740c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800740e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007410:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007414:	667b      	str	r3, [r7, #100]	; 0x64
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	461a      	mov	r2, r3
 800741c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800741e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007420:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007422:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007424:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007426:	e841 2300 	strex	r3, r2, [r1]
 800742a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800742c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800742e:	2b00      	cmp	r3, #0
 8007430:	d1e6      	bne.n	8007400 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	3308      	adds	r3, #8
 8007438:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800743a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800743c:	e853 3f00 	ldrex	r3, [r3]
 8007440:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007444:	f023 0301 	bic.w	r3, r3, #1
 8007448:	663b      	str	r3, [r7, #96]	; 0x60
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	3308      	adds	r3, #8
 8007450:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007452:	64ba      	str	r2, [r7, #72]	; 0x48
 8007454:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007456:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007458:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800745a:	e841 2300 	strex	r3, r2, [r1]
 800745e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007460:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007462:	2b00      	cmp	r3, #0
 8007464:	d1e5      	bne.n	8007432 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	2220      	movs	r2, #32
 800746a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	2220      	movs	r2, #32
 8007472:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	2200      	movs	r2, #0
 800747a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800747e:	2303      	movs	r3, #3
 8007480:	e069      	b.n	8007556 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f003 0304 	and.w	r3, r3, #4
 800748c:	2b00      	cmp	r3, #0
 800748e:	d051      	beq.n	8007534 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	69db      	ldr	r3, [r3, #28]
 8007496:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800749a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800749e:	d149      	bne.n	8007534 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80074a8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b2:	e853 3f00 	ldrex	r3, [r3]
 80074b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80074b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ba:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80074be:	66fb      	str	r3, [r7, #108]	; 0x6c
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	461a      	mov	r2, r3
 80074c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074c8:	637b      	str	r3, [r7, #52]	; 0x34
 80074ca:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80074ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80074d0:	e841 2300 	strex	r3, r2, [r1]
 80074d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80074d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d1e6      	bne.n	80074aa <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	3308      	adds	r3, #8
 80074e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	e853 3f00 	ldrex	r3, [r3]
 80074ea:	613b      	str	r3, [r7, #16]
   return(result);
 80074ec:	693b      	ldr	r3, [r7, #16]
 80074ee:	f023 0301 	bic.w	r3, r3, #1
 80074f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	3308      	adds	r3, #8
 80074fa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80074fc:	623a      	str	r2, [r7, #32]
 80074fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007500:	69f9      	ldr	r1, [r7, #28]
 8007502:	6a3a      	ldr	r2, [r7, #32]
 8007504:	e841 2300 	strex	r3, r2, [r1]
 8007508:	61bb      	str	r3, [r7, #24]
   return(result);
 800750a:	69bb      	ldr	r3, [r7, #24]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d1e5      	bne.n	80074dc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	2220      	movs	r2, #32
 8007514:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	2220      	movs	r2, #32
 800751c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	2220      	movs	r2, #32
 8007524:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	2200      	movs	r2, #0
 800752c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007530:	2303      	movs	r3, #3
 8007532:	e010      	b.n	8007556 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	69da      	ldr	r2, [r3, #28]
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	4013      	ands	r3, r2
 800753e:	68ba      	ldr	r2, [r7, #8]
 8007540:	429a      	cmp	r2, r3
 8007542:	bf0c      	ite	eq
 8007544:	2301      	moveq	r3, #1
 8007546:	2300      	movne	r3, #0
 8007548:	b2db      	uxtb	r3, r3
 800754a:	461a      	mov	r2, r3
 800754c:	79fb      	ldrb	r3, [r7, #7]
 800754e:	429a      	cmp	r2, r3
 8007550:	f43f af46 	beq.w	80073e0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007554:	2300      	movs	r3, #0
}
 8007556:	4618      	mov	r0, r3
 8007558:	3770      	adds	r7, #112	; 0x70
 800755a:	46bd      	mov	sp, r7
 800755c:	bd80      	pop	{r7, pc}
	...

08007560 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007560:	b480      	push	{r7}
 8007562:	b0a3      	sub	sp, #140	; 0x8c
 8007564:	af00      	add	r7, sp, #0
 8007566:	60f8      	str	r0, [r7, #12]
 8007568:	60b9      	str	r1, [r7, #8]
 800756a:	4613      	mov	r3, r2
 800756c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	68ba      	ldr	r2, [r7, #8]
 8007572:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	88fa      	ldrh	r2, [r7, #6]
 8007578:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	88fa      	ldrh	r2, [r7, #6]
 8007580:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	2200      	movs	r2, #0
 8007588:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	689b      	ldr	r3, [r3, #8]
 800758e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007592:	d10e      	bne.n	80075b2 <UART_Start_Receive_IT+0x52>
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	691b      	ldr	r3, [r3, #16]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d105      	bne.n	80075a8 <UART_Start_Receive_IT+0x48>
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	f240 12ff 	movw	r2, #511	; 0x1ff
 80075a2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80075a6:	e02d      	b.n	8007604 <UART_Start_Receive_IT+0xa4>
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	22ff      	movs	r2, #255	; 0xff
 80075ac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80075b0:	e028      	b.n	8007604 <UART_Start_Receive_IT+0xa4>
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	689b      	ldr	r3, [r3, #8]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d10d      	bne.n	80075d6 <UART_Start_Receive_IT+0x76>
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	691b      	ldr	r3, [r3, #16]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d104      	bne.n	80075cc <UART_Start_Receive_IT+0x6c>
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	22ff      	movs	r2, #255	; 0xff
 80075c6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80075ca:	e01b      	b.n	8007604 <UART_Start_Receive_IT+0xa4>
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	227f      	movs	r2, #127	; 0x7f
 80075d0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80075d4:	e016      	b.n	8007604 <UART_Start_Receive_IT+0xa4>
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	689b      	ldr	r3, [r3, #8]
 80075da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80075de:	d10d      	bne.n	80075fc <UART_Start_Receive_IT+0x9c>
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	691b      	ldr	r3, [r3, #16]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d104      	bne.n	80075f2 <UART_Start_Receive_IT+0x92>
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	227f      	movs	r2, #127	; 0x7f
 80075ec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80075f0:	e008      	b.n	8007604 <UART_Start_Receive_IT+0xa4>
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	223f      	movs	r2, #63	; 0x3f
 80075f6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80075fa:	e003      	b.n	8007604 <UART_Start_Receive_IT+0xa4>
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	2200      	movs	r2, #0
 8007600:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	2200      	movs	r2, #0
 8007608:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	2222      	movs	r2, #34	; 0x22
 8007610:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	3308      	adds	r3, #8
 800761a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800761c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800761e:	e853 3f00 	ldrex	r3, [r3]
 8007622:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007624:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007626:	f043 0301 	orr.w	r3, r3, #1
 800762a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	3308      	adds	r3, #8
 8007634:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007638:	673a      	str	r2, [r7, #112]	; 0x70
 800763a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800763c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800763e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007640:	e841 2300 	strex	r3, r2, [r1]
 8007644:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8007646:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007648:	2b00      	cmp	r3, #0
 800764a:	d1e3      	bne.n	8007614 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007650:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007654:	d153      	bne.n	80076fe <UART_Start_Receive_IT+0x19e>
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800765c:	88fa      	ldrh	r2, [r7, #6]
 800765e:	429a      	cmp	r2, r3
 8007660:	d34d      	bcc.n	80076fe <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	689b      	ldr	r3, [r3, #8]
 8007666:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800766a:	d107      	bne.n	800767c <UART_Start_Receive_IT+0x11c>
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	691b      	ldr	r3, [r3, #16]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d103      	bne.n	800767c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	4a4b      	ldr	r2, [pc, #300]	; (80077a4 <UART_Start_Receive_IT+0x244>)
 8007678:	671a      	str	r2, [r3, #112]	; 0x70
 800767a:	e002      	b.n	8007682 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	4a4a      	ldr	r2, [pc, #296]	; (80077a8 <UART_Start_Receive_IT+0x248>)
 8007680:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	2200      	movs	r2, #0
 8007686:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	691b      	ldr	r3, [r3, #16]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d01a      	beq.n	80076c8 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007698:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800769a:	e853 3f00 	ldrex	r3, [r3]
 800769e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80076a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80076a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	461a      	mov	r2, r3
 80076b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80076b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80076b6:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076b8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80076ba:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80076bc:	e841 2300 	strex	r3, r2, [r1]
 80076c0:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80076c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d1e4      	bne.n	8007692 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	3308      	adds	r3, #8
 80076ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076d2:	e853 3f00 	ldrex	r3, [r3]
 80076d6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80076d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076de:	67fb      	str	r3, [r7, #124]	; 0x7c
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	3308      	adds	r3, #8
 80076e6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80076e8:	64ba      	str	r2, [r7, #72]	; 0x48
 80076ea:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ec:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80076ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80076f0:	e841 2300 	strex	r3, r2, [r1]
 80076f4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80076f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d1e5      	bne.n	80076c8 <UART_Start_Receive_IT+0x168>
 80076fc:	e04a      	b.n	8007794 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	689b      	ldr	r3, [r3, #8]
 8007702:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007706:	d107      	bne.n	8007718 <UART_Start_Receive_IT+0x1b8>
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	691b      	ldr	r3, [r3, #16]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d103      	bne.n	8007718 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	4a26      	ldr	r2, [pc, #152]	; (80077ac <UART_Start_Receive_IT+0x24c>)
 8007714:	671a      	str	r2, [r3, #112]	; 0x70
 8007716:	e002      	b.n	800771e <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	4a25      	ldr	r2, [pc, #148]	; (80077b0 <UART_Start_Receive_IT+0x250>)
 800771c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	2200      	movs	r2, #0
 8007722:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	691b      	ldr	r3, [r3, #16]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d019      	beq.n	8007762 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007736:	e853 3f00 	ldrex	r3, [r3]
 800773a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800773c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800773e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007742:	677b      	str	r3, [r7, #116]	; 0x74
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	461a      	mov	r2, r3
 800774a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800774c:	637b      	str	r3, [r7, #52]	; 0x34
 800774e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007750:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007752:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007754:	e841 2300 	strex	r3, r2, [r1]
 8007758:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800775a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800775c:	2b00      	cmp	r3, #0
 800775e:	d1e6      	bne.n	800772e <UART_Start_Receive_IT+0x1ce>
 8007760:	e018      	b.n	8007794 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	e853 3f00 	ldrex	r3, [r3]
 800776e:	613b      	str	r3, [r7, #16]
   return(result);
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	f043 0320 	orr.w	r3, r3, #32
 8007776:	67bb      	str	r3, [r7, #120]	; 0x78
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	461a      	mov	r2, r3
 800777e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007780:	623b      	str	r3, [r7, #32]
 8007782:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007784:	69f9      	ldr	r1, [r7, #28]
 8007786:	6a3a      	ldr	r2, [r7, #32]
 8007788:	e841 2300 	strex	r3, r2, [r1]
 800778c:	61bb      	str	r3, [r7, #24]
   return(result);
 800778e:	69bb      	ldr	r3, [r7, #24]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d1e6      	bne.n	8007762 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8007794:	2300      	movs	r3, #0
}
 8007796:	4618      	mov	r0, r3
 8007798:	378c      	adds	r7, #140	; 0x8c
 800779a:	46bd      	mov	sp, r7
 800779c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a0:	4770      	bx	lr
 80077a2:	bf00      	nop
 80077a4:	08007ebd 	.word	0x08007ebd
 80077a8:	08007bc5 	.word	0x08007bc5
 80077ac:	08007a63 	.word	0x08007a63
 80077b0:	08007903 	.word	0x08007903

080077b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80077b4:	b480      	push	{r7}
 80077b6:	b095      	sub	sp, #84	; 0x54
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077c4:	e853 3f00 	ldrex	r3, [r3]
 80077c8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80077ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80077d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	461a      	mov	r2, r3
 80077d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077da:	643b      	str	r3, [r7, #64]	; 0x40
 80077dc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077de:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80077e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80077e2:	e841 2300 	strex	r3, r2, [r1]
 80077e6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80077e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d1e6      	bne.n	80077bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	3308      	adds	r3, #8
 80077f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077f6:	6a3b      	ldr	r3, [r7, #32]
 80077f8:	e853 3f00 	ldrex	r3, [r3]
 80077fc:	61fb      	str	r3, [r7, #28]
   return(result);
 80077fe:	69fb      	ldr	r3, [r7, #28]
 8007800:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007804:	f023 0301 	bic.w	r3, r3, #1
 8007808:	64bb      	str	r3, [r7, #72]	; 0x48
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	3308      	adds	r3, #8
 8007810:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007812:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007814:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007816:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007818:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800781a:	e841 2300 	strex	r3, r2, [r1]
 800781e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007822:	2b00      	cmp	r3, #0
 8007824:	d1e3      	bne.n	80077ee <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800782a:	2b01      	cmp	r3, #1
 800782c:	d118      	bne.n	8007860 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	e853 3f00 	ldrex	r3, [r3]
 800783a:	60bb      	str	r3, [r7, #8]
   return(result);
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	f023 0310 	bic.w	r3, r3, #16
 8007842:	647b      	str	r3, [r7, #68]	; 0x44
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	461a      	mov	r2, r3
 800784a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800784c:	61bb      	str	r3, [r7, #24]
 800784e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007850:	6979      	ldr	r1, [r7, #20]
 8007852:	69ba      	ldr	r2, [r7, #24]
 8007854:	e841 2300 	strex	r3, r2, [r1]
 8007858:	613b      	str	r3, [r7, #16]
   return(result);
 800785a:	693b      	ldr	r3, [r7, #16]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d1e6      	bne.n	800782e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2220      	movs	r2, #32
 8007864:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2200      	movs	r2, #0
 800786c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2200      	movs	r2, #0
 8007872:	671a      	str	r2, [r3, #112]	; 0x70
}
 8007874:	bf00      	nop
 8007876:	3754      	adds	r7, #84	; 0x54
 8007878:	46bd      	mov	sp, r7
 800787a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787e:	4770      	bx	lr

08007880 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b084      	sub	sp, #16
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800788c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	2200      	movs	r2, #0
 8007892:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	2200      	movs	r2, #0
 800789a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800789e:	68f8      	ldr	r0, [r7, #12]
 80078a0:	f7ff f996 	bl	8006bd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80078a4:	bf00      	nop
 80078a6:	3710      	adds	r7, #16
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd80      	pop	{r7, pc}

080078ac <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b088      	sub	sp, #32
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	e853 3f00 	ldrex	r3, [r3]
 80078c0:	60bb      	str	r3, [r7, #8]
   return(result);
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078c8:	61fb      	str	r3, [r7, #28]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	461a      	mov	r2, r3
 80078d0:	69fb      	ldr	r3, [r7, #28]
 80078d2:	61bb      	str	r3, [r7, #24]
 80078d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078d6:	6979      	ldr	r1, [r7, #20]
 80078d8:	69ba      	ldr	r2, [r7, #24]
 80078da:	e841 2300 	strex	r3, r2, [r1]
 80078de:	613b      	str	r3, [r7, #16]
   return(result);
 80078e0:	693b      	ldr	r3, [r7, #16]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d1e6      	bne.n	80078b4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2220      	movs	r2, #32
 80078ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2200      	movs	r2, #0
 80078f2:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f7ff f961 	bl	8006bbc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80078fa:	bf00      	nop
 80078fc:	3720      	adds	r7, #32
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}

08007902 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007902:	b580      	push	{r7, lr}
 8007904:	b096      	sub	sp, #88	; 0x58
 8007906:	af00      	add	r7, sp, #0
 8007908:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007910:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800791a:	2b22      	cmp	r3, #34	; 0x22
 800791c:	f040 8095 	bne.w	8007a4a <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007926:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800792a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800792e:	b2d9      	uxtb	r1, r3
 8007930:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007934:	b2da      	uxtb	r2, r3
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800793a:	400a      	ands	r2, r1
 800793c:	b2d2      	uxtb	r2, r2
 800793e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007944:	1c5a      	adds	r2, r3, #1
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007950:	b29b      	uxth	r3, r3
 8007952:	3b01      	subs	r3, #1
 8007954:	b29a      	uxth	r2, r3
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007962:	b29b      	uxth	r3, r3
 8007964:	2b00      	cmp	r3, #0
 8007966:	d178      	bne.n	8007a5a <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800796e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007970:	e853 3f00 	ldrex	r3, [r3]
 8007974:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007978:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800797c:	653b      	str	r3, [r7, #80]	; 0x50
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	461a      	mov	r2, r3
 8007984:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007986:	647b      	str	r3, [r7, #68]	; 0x44
 8007988:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800798a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800798c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800798e:	e841 2300 	strex	r3, r2, [r1]
 8007992:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007994:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007996:	2b00      	cmp	r3, #0
 8007998:	d1e6      	bne.n	8007968 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	3308      	adds	r3, #8
 80079a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a4:	e853 3f00 	ldrex	r3, [r3]
 80079a8:	623b      	str	r3, [r7, #32]
   return(result);
 80079aa:	6a3b      	ldr	r3, [r7, #32]
 80079ac:	f023 0301 	bic.w	r3, r3, #1
 80079b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	3308      	adds	r3, #8
 80079b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80079ba:	633a      	str	r2, [r7, #48]	; 0x30
 80079bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80079c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079c2:	e841 2300 	strex	r3, r2, [r1]
 80079c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80079c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d1e5      	bne.n	800799a <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2220      	movs	r2, #32
 80079d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2200      	movs	r2, #0
 80079da:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079e0:	2b01      	cmp	r3, #1
 80079e2:	d12e      	bne.n	8007a42 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2200      	movs	r2, #0
 80079e8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079f0:	693b      	ldr	r3, [r7, #16]
 80079f2:	e853 3f00 	ldrex	r3, [r3]
 80079f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	f023 0310 	bic.w	r3, r3, #16
 80079fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	461a      	mov	r2, r3
 8007a06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a08:	61fb      	str	r3, [r7, #28]
 8007a0a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a0c:	69b9      	ldr	r1, [r7, #24]
 8007a0e:	69fa      	ldr	r2, [r7, #28]
 8007a10:	e841 2300 	strex	r3, r2, [r1]
 8007a14:	617b      	str	r3, [r7, #20]
   return(result);
 8007a16:	697b      	ldr	r3, [r7, #20]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d1e6      	bne.n	80079ea <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	69db      	ldr	r3, [r3, #28]
 8007a22:	f003 0310 	and.w	r3, r3, #16
 8007a26:	2b10      	cmp	r3, #16
 8007a28:	d103      	bne.n	8007a32 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	2210      	movs	r2, #16
 8007a30:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007a38:	4619      	mov	r1, r3
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f7ff f8d2 	bl	8006be4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007a40:	e00b      	b.n	8007a5a <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f7f9 fb36 	bl	80010b4 <HAL_UART_RxCpltCallback>
}
 8007a48:	e007      	b.n	8007a5a <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	699a      	ldr	r2, [r3, #24]
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f042 0208 	orr.w	r2, r2, #8
 8007a58:	619a      	str	r2, [r3, #24]
}
 8007a5a:	bf00      	nop
 8007a5c:	3758      	adds	r7, #88	; 0x58
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd80      	pop	{r7, pc}

08007a62 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007a62:	b580      	push	{r7, lr}
 8007a64:	b096      	sub	sp, #88	; 0x58
 8007a66:	af00      	add	r7, sp, #0
 8007a68:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007a70:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a7a:	2b22      	cmp	r3, #34	; 0x22
 8007a7c:	f040 8095 	bne.w	8007baa <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a86:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a8e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007a90:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8007a94:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007a98:	4013      	ands	r3, r2
 8007a9a:	b29a      	uxth	r2, r3
 8007a9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a9e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007aa4:	1c9a      	adds	r2, r3, #2
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007ab0:	b29b      	uxth	r3, r3
 8007ab2:	3b01      	subs	r3, #1
 8007ab4:	b29a      	uxth	r2, r3
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007ac2:	b29b      	uxth	r3, r3
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d178      	bne.n	8007bba <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ad0:	e853 3f00 	ldrex	r3, [r3]
 8007ad4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ad8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007adc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	461a      	mov	r2, r3
 8007ae4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ae6:	643b      	str	r3, [r7, #64]	; 0x40
 8007ae8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007aec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007aee:	e841 2300 	strex	r3, r2, [r1]
 8007af2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d1e6      	bne.n	8007ac8 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	3308      	adds	r3, #8
 8007b00:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b02:	6a3b      	ldr	r3, [r7, #32]
 8007b04:	e853 3f00 	ldrex	r3, [r3]
 8007b08:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b0a:	69fb      	ldr	r3, [r7, #28]
 8007b0c:	f023 0301 	bic.w	r3, r3, #1
 8007b10:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	3308      	adds	r3, #8
 8007b18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007b1c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b1e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007b20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b22:	e841 2300 	strex	r3, r2, [r1]
 8007b26:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d1e5      	bne.n	8007afa <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2220      	movs	r2, #32
 8007b32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b40:	2b01      	cmp	r3, #1
 8007b42:	d12e      	bne.n	8007ba2 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2200      	movs	r2, #0
 8007b48:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	e853 3f00 	ldrex	r3, [r3]
 8007b56:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	f023 0310 	bic.w	r3, r3, #16
 8007b5e:	647b      	str	r3, [r7, #68]	; 0x44
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	461a      	mov	r2, r3
 8007b66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b68:	61bb      	str	r3, [r7, #24]
 8007b6a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b6c:	6979      	ldr	r1, [r7, #20]
 8007b6e:	69ba      	ldr	r2, [r7, #24]
 8007b70:	e841 2300 	strex	r3, r2, [r1]
 8007b74:	613b      	str	r3, [r7, #16]
   return(result);
 8007b76:	693b      	ldr	r3, [r7, #16]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d1e6      	bne.n	8007b4a <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	69db      	ldr	r3, [r3, #28]
 8007b82:	f003 0310 	and.w	r3, r3, #16
 8007b86:	2b10      	cmp	r3, #16
 8007b88:	d103      	bne.n	8007b92 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	2210      	movs	r2, #16
 8007b90:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007b98:	4619      	mov	r1, r3
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f7ff f822 	bl	8006be4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007ba0:	e00b      	b.n	8007bba <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f7f9 fa86 	bl	80010b4 <HAL_UART_RxCpltCallback>
}
 8007ba8:	e007      	b.n	8007bba <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	699a      	ldr	r2, [r3, #24]
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f042 0208 	orr.w	r2, r2, #8
 8007bb8:	619a      	str	r2, [r3, #24]
}
 8007bba:	bf00      	nop
 8007bbc:	3758      	adds	r7, #88	; 0x58
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}
	...

08007bc4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b0a6      	sub	sp, #152	; 0x98
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007bd2:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	69db      	ldr	r3, [r3, #28]
 8007bdc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	689b      	ldr	r3, [r3, #8]
 8007bf0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bfa:	2b22      	cmp	r3, #34	; 0x22
 8007bfc:	f040 814f 	bne.w	8007e9e <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007c06:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007c0a:	e0f6      	b.n	8007dfa <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c12:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007c16:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8007c1a:	b2d9      	uxtb	r1, r3
 8007c1c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8007c20:	b2da      	uxtb	r2, r3
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c26:	400a      	ands	r2, r1
 8007c28:	b2d2      	uxtb	r2, r2
 8007c2a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c30:	1c5a      	adds	r2, r3, #1
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007c3c:	b29b      	uxth	r3, r3
 8007c3e:	3b01      	subs	r3, #1
 8007c40:	b29a      	uxth	r2, r3
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	69db      	ldr	r3, [r3, #28]
 8007c4e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007c52:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007c56:	f003 0307 	and.w	r3, r3, #7
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d053      	beq.n	8007d06 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007c5e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007c62:	f003 0301 	and.w	r3, r3, #1
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d011      	beq.n	8007c8e <UART_RxISR_8BIT_FIFOEN+0xca>
 8007c6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d00b      	beq.n	8007c8e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	2201      	movs	r2, #1
 8007c7c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c84:	f043 0201 	orr.w	r2, r3, #1
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007c8e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007c92:	f003 0302 	and.w	r3, r3, #2
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d011      	beq.n	8007cbe <UART_RxISR_8BIT_FIFOEN+0xfa>
 8007c9a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007c9e:	f003 0301 	and.w	r3, r3, #1
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d00b      	beq.n	8007cbe <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	2202      	movs	r2, #2
 8007cac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007cb4:	f043 0204 	orr.w	r2, r3, #4
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007cbe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007cc2:	f003 0304 	and.w	r3, r3, #4
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d011      	beq.n	8007cee <UART_RxISR_8BIT_FIFOEN+0x12a>
 8007cca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007cce:	f003 0301 	and.w	r3, r3, #1
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d00b      	beq.n	8007cee <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	2204      	movs	r2, #4
 8007cdc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ce4:	f043 0202 	orr.w	r2, r3, #2
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d006      	beq.n	8007d06 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f7fe ff69 	bl	8006bd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2200      	movs	r2, #0
 8007d02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007d0c:	b29b      	uxth	r3, r3
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d173      	bne.n	8007dfa <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d1a:	e853 3f00 	ldrex	r3, [r3]
 8007d1e:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8007d20:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007d22:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d26:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	461a      	mov	r2, r3
 8007d30:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007d34:	66bb      	str	r3, [r7, #104]	; 0x68
 8007d36:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d38:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8007d3a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007d3c:	e841 2300 	strex	r3, r2, [r1]
 8007d40:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007d42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d1e4      	bne.n	8007d12 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	3308      	adds	r3, #8
 8007d4e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d52:	e853 3f00 	ldrex	r3, [r3]
 8007d56:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007d58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d5e:	f023 0301 	bic.w	r3, r3, #1
 8007d62:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	3308      	adds	r3, #8
 8007d6a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007d6c:	657a      	str	r2, [r7, #84]	; 0x54
 8007d6e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d70:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007d72:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007d74:	e841 2300 	strex	r3, r2, [r1]
 8007d78:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007d7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d1e3      	bne.n	8007d48 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2220      	movs	r2, #32
 8007d84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d92:	2b01      	cmp	r3, #1
 8007d94:	d12e      	bne.n	8007df4 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007da2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007da4:	e853 3f00 	ldrex	r3, [r3]
 8007da8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dac:	f023 0310 	bic.w	r3, r3, #16
 8007db0:	67bb      	str	r3, [r7, #120]	; 0x78
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	461a      	mov	r2, r3
 8007db8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007dba:	643b      	str	r3, [r7, #64]	; 0x40
 8007dbc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dbe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007dc0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007dc2:	e841 2300 	strex	r3, r2, [r1]
 8007dc6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d1e6      	bne.n	8007d9c <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	69db      	ldr	r3, [r3, #28]
 8007dd4:	f003 0310 	and.w	r3, r3, #16
 8007dd8:	2b10      	cmp	r3, #16
 8007dda:	d103      	bne.n	8007de4 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	2210      	movs	r2, #16
 8007de2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007dea:	4619      	mov	r1, r3
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f7fe fef9 	bl	8006be4 <HAL_UARTEx_RxEventCallback>
 8007df2:	e002      	b.n	8007dfa <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f7f9 f95d 	bl	80010b4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007dfa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d006      	beq.n	8007e10 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8007e02:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007e06:	f003 0320 	and.w	r3, r3, #32
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	f47f aefe 	bne.w	8007c0c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007e16:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007e1a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d045      	beq.n	8007eae <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007e28:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007e2c:	429a      	cmp	r2, r3
 8007e2e:	d23e      	bcs.n	8007eae <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	3308      	adds	r3, #8
 8007e36:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e38:	6a3b      	ldr	r3, [r7, #32]
 8007e3a:	e853 3f00 	ldrex	r3, [r3]
 8007e3e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e40:	69fb      	ldr	r3, [r7, #28]
 8007e42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e46:	673b      	str	r3, [r7, #112]	; 0x70
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	3308      	adds	r3, #8
 8007e4e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007e50:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007e52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e58:	e841 2300 	strex	r3, r2, [r1]
 8007e5c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d1e5      	bne.n	8007e30 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	4a14      	ldr	r2, [pc, #80]	; (8007eb8 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8007e68:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	e853 3f00 	ldrex	r3, [r3]
 8007e76:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	f043 0320 	orr.w	r3, r3, #32
 8007e7e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	461a      	mov	r2, r3
 8007e86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e88:	61bb      	str	r3, [r7, #24]
 8007e8a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e8c:	6979      	ldr	r1, [r7, #20]
 8007e8e:	69ba      	ldr	r2, [r7, #24]
 8007e90:	e841 2300 	strex	r3, r2, [r1]
 8007e94:	613b      	str	r3, [r7, #16]
   return(result);
 8007e96:	693b      	ldr	r3, [r7, #16]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d1e6      	bne.n	8007e6a <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007e9c:	e007      	b.n	8007eae <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	699a      	ldr	r2, [r3, #24]
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f042 0208 	orr.w	r2, r2, #8
 8007eac:	619a      	str	r2, [r3, #24]
}
 8007eae:	bf00      	nop
 8007eb0:	3798      	adds	r7, #152	; 0x98
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}
 8007eb6:	bf00      	nop
 8007eb8:	08007903 	.word	0x08007903

08007ebc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b0a8      	sub	sp, #160	; 0xa0
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007eca:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	69db      	ldr	r3, [r3, #28]
 8007ed4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	689b      	ldr	r3, [r3, #8]
 8007ee8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ef2:	2b22      	cmp	r3, #34	; 0x22
 8007ef4:	f040 8153 	bne.w	800819e <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007efe:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007f02:	e0fa      	b.n	80080fa <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f0a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f12:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8007f16:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8007f1a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007f1e:	4013      	ands	r3, r2
 8007f20:	b29a      	uxth	r2, r3
 8007f22:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007f26:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f2c:	1c9a      	adds	r2, r3, #2
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007f38:	b29b      	uxth	r3, r3
 8007f3a:	3b01      	subs	r3, #1
 8007f3c:	b29a      	uxth	r2, r3
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	69db      	ldr	r3, [r3, #28]
 8007f4a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007f4e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007f52:	f003 0307 	and.w	r3, r3, #7
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d053      	beq.n	8008002 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007f5a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007f5e:	f003 0301 	and.w	r3, r3, #1
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d011      	beq.n	8007f8a <UART_RxISR_16BIT_FIFOEN+0xce>
 8007f66:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007f6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d00b      	beq.n	8007f8a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	2201      	movs	r2, #1
 8007f78:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f80:	f043 0201 	orr.w	r2, r3, #1
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007f8a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007f8e:	f003 0302 	and.w	r3, r3, #2
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d011      	beq.n	8007fba <UART_RxISR_16BIT_FIFOEN+0xfe>
 8007f96:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007f9a:	f003 0301 	and.w	r3, r3, #1
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d00b      	beq.n	8007fba <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	2202      	movs	r2, #2
 8007fa8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007fb0:	f043 0204 	orr.w	r2, r3, #4
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007fba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007fbe:	f003 0304 	and.w	r3, r3, #4
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d011      	beq.n	8007fea <UART_RxISR_16BIT_FIFOEN+0x12e>
 8007fc6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007fca:	f003 0301 	and.w	r3, r3, #1
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d00b      	beq.n	8007fea <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	2204      	movs	r2, #4
 8007fd8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007fe0:	f043 0202 	orr.w	r2, r3, #2
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d006      	beq.n	8008002 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	f7fe fdeb 	bl	8006bd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008008:	b29b      	uxth	r3, r3
 800800a:	2b00      	cmp	r3, #0
 800800c:	d175      	bne.n	80080fa <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008014:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008016:	e853 3f00 	ldrex	r3, [r3]
 800801a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800801c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800801e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008022:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	461a      	mov	r2, r3
 800802c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008030:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008032:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008034:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008036:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008038:	e841 2300 	strex	r3, r2, [r1]
 800803c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800803e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008040:	2b00      	cmp	r3, #0
 8008042:	d1e4      	bne.n	800800e <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	3308      	adds	r3, #8
 800804a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800804c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800804e:	e853 3f00 	ldrex	r3, [r3]
 8008052:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008054:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008056:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800805a:	f023 0301 	bic.w	r3, r3, #1
 800805e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	3308      	adds	r3, #8
 8008068:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800806c:	65ba      	str	r2, [r7, #88]	; 0x58
 800806e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008070:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008072:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008074:	e841 2300 	strex	r3, r2, [r1]
 8008078:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800807a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800807c:	2b00      	cmp	r3, #0
 800807e:	d1e1      	bne.n	8008044 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2220      	movs	r2, #32
 8008084:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2200      	movs	r2, #0
 800808c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008092:	2b01      	cmp	r3, #1
 8008094:	d12e      	bne.n	80080f4 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2200      	movs	r2, #0
 800809a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080a4:	e853 3f00 	ldrex	r3, [r3]
 80080a8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80080aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080ac:	f023 0310 	bic.w	r3, r3, #16
 80080b0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	461a      	mov	r2, r3
 80080b8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80080ba:	647b      	str	r3, [r7, #68]	; 0x44
 80080bc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080be:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80080c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80080c2:	e841 2300 	strex	r3, r2, [r1]
 80080c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80080c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d1e6      	bne.n	800809c <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	69db      	ldr	r3, [r3, #28]
 80080d4:	f003 0310 	and.w	r3, r3, #16
 80080d8:	2b10      	cmp	r3, #16
 80080da:	d103      	bne.n	80080e4 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	2210      	movs	r2, #16
 80080e2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80080ea:	4619      	mov	r1, r3
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	f7fe fd79 	bl	8006be4 <HAL_UARTEx_RxEventCallback>
 80080f2:	e002      	b.n	80080fa <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f7f8 ffdd 	bl	80010b4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80080fa:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d006      	beq.n	8008110 <UART_RxISR_16BIT_FIFOEN+0x254>
 8008102:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008106:	f003 0320 	and.w	r3, r3, #32
 800810a:	2b00      	cmp	r3, #0
 800810c:	f47f aefa 	bne.w	8007f04 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008116:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800811a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800811e:	2b00      	cmp	r3, #0
 8008120:	d045      	beq.n	80081ae <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008128:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800812c:	429a      	cmp	r2, r3
 800812e:	d23e      	bcs.n	80081ae <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	3308      	adds	r3, #8
 8008136:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800813a:	e853 3f00 	ldrex	r3, [r3]
 800813e:	623b      	str	r3, [r7, #32]
   return(result);
 8008140:	6a3b      	ldr	r3, [r7, #32]
 8008142:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008146:	677b      	str	r3, [r7, #116]	; 0x74
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	3308      	adds	r3, #8
 800814e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008150:	633a      	str	r2, [r7, #48]	; 0x30
 8008152:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008154:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008156:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008158:	e841 2300 	strex	r3, r2, [r1]
 800815c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800815e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008160:	2b00      	cmp	r3, #0
 8008162:	d1e5      	bne.n	8008130 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	4a14      	ldr	r2, [pc, #80]	; (80081b8 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8008168:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008170:	693b      	ldr	r3, [r7, #16]
 8008172:	e853 3f00 	ldrex	r3, [r3]
 8008176:	60fb      	str	r3, [r7, #12]
   return(result);
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	f043 0320 	orr.w	r3, r3, #32
 800817e:	673b      	str	r3, [r7, #112]	; 0x70
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	461a      	mov	r2, r3
 8008186:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008188:	61fb      	str	r3, [r7, #28]
 800818a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800818c:	69b9      	ldr	r1, [r7, #24]
 800818e:	69fa      	ldr	r2, [r7, #28]
 8008190:	e841 2300 	strex	r3, r2, [r1]
 8008194:	617b      	str	r3, [r7, #20]
   return(result);
 8008196:	697b      	ldr	r3, [r7, #20]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d1e6      	bne.n	800816a <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800819c:	e007      	b.n	80081ae <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	699a      	ldr	r2, [r3, #24]
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f042 0208 	orr.w	r2, r2, #8
 80081ac:	619a      	str	r2, [r3, #24]
}
 80081ae:	bf00      	nop
 80081b0:	37a0      	adds	r7, #160	; 0xa0
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}
 80081b6:	bf00      	nop
 80081b8:	08007a63 	.word	0x08007a63

080081bc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80081bc:	b480      	push	{r7}
 80081be:	b083      	sub	sp, #12
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80081c4:	bf00      	nop
 80081c6:	370c      	adds	r7, #12
 80081c8:	46bd      	mov	sp, r7
 80081ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ce:	4770      	bx	lr

080081d0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80081d0:	b480      	push	{r7}
 80081d2:	b083      	sub	sp, #12
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80081d8:	bf00      	nop
 80081da:	370c      	adds	r7, #12
 80081dc:	46bd      	mov	sp, r7
 80081de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e2:	4770      	bx	lr

080081e4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80081e4:	b480      	push	{r7}
 80081e6:	b083      	sub	sp, #12
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80081ec:	bf00      	nop
 80081ee:	370c      	adds	r7, #12
 80081f0:	46bd      	mov	sp, r7
 80081f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f6:	4770      	bx	lr

080081f8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80081f8:	b480      	push	{r7}
 80081fa:	b085      	sub	sp, #20
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008206:	2b01      	cmp	r3, #1
 8008208:	d101      	bne.n	800820e <HAL_UARTEx_DisableFifoMode+0x16>
 800820a:	2302      	movs	r3, #2
 800820c:	e027      	b.n	800825e <HAL_UARTEx_DisableFifoMode+0x66>
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2201      	movs	r2, #1
 8008212:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2224      	movs	r2, #36	; 0x24
 800821a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	681a      	ldr	r2, [r3, #0]
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f022 0201 	bic.w	r2, r2, #1
 8008234:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800823c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2200      	movs	r2, #0
 8008242:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	68fa      	ldr	r2, [r7, #12]
 800824a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2220      	movs	r2, #32
 8008250:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2200      	movs	r2, #0
 8008258:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800825c:	2300      	movs	r3, #0
}
 800825e:	4618      	mov	r0, r3
 8008260:	3714      	adds	r7, #20
 8008262:	46bd      	mov	sp, r7
 8008264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008268:	4770      	bx	lr

0800826a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800826a:	b580      	push	{r7, lr}
 800826c:	b084      	sub	sp, #16
 800826e:	af00      	add	r7, sp, #0
 8008270:	6078      	str	r0, [r7, #4]
 8008272:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800827a:	2b01      	cmp	r3, #1
 800827c:	d101      	bne.n	8008282 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800827e:	2302      	movs	r3, #2
 8008280:	e02d      	b.n	80082de <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2201      	movs	r2, #1
 8008286:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2224      	movs	r2, #36	; 0x24
 800828e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	681a      	ldr	r2, [r3, #0]
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f022 0201 	bic.w	r2, r2, #1
 80082a8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	689b      	ldr	r3, [r3, #8]
 80082b0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	683a      	ldr	r2, [r7, #0]
 80082ba:	430a      	orrs	r2, r1
 80082bc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f000 f850 	bl	8008364 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	68fa      	ldr	r2, [r7, #12]
 80082ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2220      	movs	r2, #32
 80082d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2200      	movs	r2, #0
 80082d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80082dc:	2300      	movs	r3, #0
}
 80082de:	4618      	mov	r0, r3
 80082e0:	3710      	adds	r7, #16
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}

080082e6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80082e6:	b580      	push	{r7, lr}
 80082e8:	b084      	sub	sp, #16
 80082ea:	af00      	add	r7, sp, #0
 80082ec:	6078      	str	r0, [r7, #4]
 80082ee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80082f6:	2b01      	cmp	r3, #1
 80082f8:	d101      	bne.n	80082fe <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80082fa:	2302      	movs	r3, #2
 80082fc:	e02d      	b.n	800835a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2201      	movs	r2, #1
 8008302:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2224      	movs	r2, #36	; 0x24
 800830a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	681a      	ldr	r2, [r3, #0]
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f022 0201 	bic.w	r2, r2, #1
 8008324:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	689b      	ldr	r3, [r3, #8]
 800832c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	683a      	ldr	r2, [r7, #0]
 8008336:	430a      	orrs	r2, r1
 8008338:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f000 f812 	bl	8008364 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	68fa      	ldr	r2, [r7, #12]
 8008346:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2220      	movs	r2, #32
 800834c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2200      	movs	r2, #0
 8008354:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008358:	2300      	movs	r3, #0
}
 800835a:	4618      	mov	r0, r3
 800835c:	3710      	adds	r7, #16
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}
	...

08008364 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008364:	b480      	push	{r7}
 8008366:	b085      	sub	sp, #20
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008370:	2b00      	cmp	r3, #0
 8008372:	d108      	bne.n	8008386 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2201      	movs	r2, #1
 8008378:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2201      	movs	r2, #1
 8008380:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008384:	e031      	b.n	80083ea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008386:	2308      	movs	r3, #8
 8008388:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800838a:	2308      	movs	r3, #8
 800838c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	689b      	ldr	r3, [r3, #8]
 8008394:	0e5b      	lsrs	r3, r3, #25
 8008396:	b2db      	uxtb	r3, r3
 8008398:	f003 0307 	and.w	r3, r3, #7
 800839c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	689b      	ldr	r3, [r3, #8]
 80083a4:	0f5b      	lsrs	r3, r3, #29
 80083a6:	b2db      	uxtb	r3, r3
 80083a8:	f003 0307 	and.w	r3, r3, #7
 80083ac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80083ae:	7bbb      	ldrb	r3, [r7, #14]
 80083b0:	7b3a      	ldrb	r2, [r7, #12]
 80083b2:	4911      	ldr	r1, [pc, #68]	; (80083f8 <UARTEx_SetNbDataToProcess+0x94>)
 80083b4:	5c8a      	ldrb	r2, [r1, r2]
 80083b6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80083ba:	7b3a      	ldrb	r2, [r7, #12]
 80083bc:	490f      	ldr	r1, [pc, #60]	; (80083fc <UARTEx_SetNbDataToProcess+0x98>)
 80083be:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80083c0:	fb93 f3f2 	sdiv	r3, r3, r2
 80083c4:	b29a      	uxth	r2, r3
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80083cc:	7bfb      	ldrb	r3, [r7, #15]
 80083ce:	7b7a      	ldrb	r2, [r7, #13]
 80083d0:	4909      	ldr	r1, [pc, #36]	; (80083f8 <UARTEx_SetNbDataToProcess+0x94>)
 80083d2:	5c8a      	ldrb	r2, [r1, r2]
 80083d4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80083d8:	7b7a      	ldrb	r2, [r7, #13]
 80083da:	4908      	ldr	r1, [pc, #32]	; (80083fc <UARTEx_SetNbDataToProcess+0x98>)
 80083dc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80083de:	fb93 f3f2 	sdiv	r3, r3, r2
 80083e2:	b29a      	uxth	r2, r3
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80083ea:	bf00      	nop
 80083ec:	3714      	adds	r7, #20
 80083ee:	46bd      	mov	sp, r7
 80083f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f4:	4770      	bx	lr
 80083f6:	bf00      	nop
 80083f8:	08009bdc 	.word	0x08009bdc
 80083fc:	08009be4 	.word	0x08009be4

08008400 <atoi>:
 8008400:	220a      	movs	r2, #10
 8008402:	2100      	movs	r1, #0
 8008404:	f000 b930 	b.w	8008668 <strtol>

08008408 <__errno>:
 8008408:	4b01      	ldr	r3, [pc, #4]	; (8008410 <__errno+0x8>)
 800840a:	6818      	ldr	r0, [r3, #0]
 800840c:	4770      	bx	lr
 800840e:	bf00      	nop
 8008410:	200000a8 	.word	0x200000a8

08008414 <__libc_init_array>:
 8008414:	b570      	push	{r4, r5, r6, lr}
 8008416:	4d0d      	ldr	r5, [pc, #52]	; (800844c <__libc_init_array+0x38>)
 8008418:	4c0d      	ldr	r4, [pc, #52]	; (8008450 <__libc_init_array+0x3c>)
 800841a:	1b64      	subs	r4, r4, r5
 800841c:	10a4      	asrs	r4, r4, #2
 800841e:	2600      	movs	r6, #0
 8008420:	42a6      	cmp	r6, r4
 8008422:	d109      	bne.n	8008438 <__libc_init_array+0x24>
 8008424:	4d0b      	ldr	r5, [pc, #44]	; (8008454 <__libc_init_array+0x40>)
 8008426:	4c0c      	ldr	r4, [pc, #48]	; (8008458 <__libc_init_array+0x44>)
 8008428:	f001 fade 	bl	80099e8 <_init>
 800842c:	1b64      	subs	r4, r4, r5
 800842e:	10a4      	asrs	r4, r4, #2
 8008430:	2600      	movs	r6, #0
 8008432:	42a6      	cmp	r6, r4
 8008434:	d105      	bne.n	8008442 <__libc_init_array+0x2e>
 8008436:	bd70      	pop	{r4, r5, r6, pc}
 8008438:	f855 3b04 	ldr.w	r3, [r5], #4
 800843c:	4798      	blx	r3
 800843e:	3601      	adds	r6, #1
 8008440:	e7ee      	b.n	8008420 <__libc_init_array+0xc>
 8008442:	f855 3b04 	ldr.w	r3, [r5], #4
 8008446:	4798      	blx	r3
 8008448:	3601      	adds	r6, #1
 800844a:	e7f2      	b.n	8008432 <__libc_init_array+0x1e>
 800844c:	08009e3c 	.word	0x08009e3c
 8008450:	08009e3c 	.word	0x08009e3c
 8008454:	08009e3c 	.word	0x08009e3c
 8008458:	08009e40 	.word	0x08009e40

0800845c <memset>:
 800845c:	4402      	add	r2, r0
 800845e:	4603      	mov	r3, r0
 8008460:	4293      	cmp	r3, r2
 8008462:	d100      	bne.n	8008466 <memset+0xa>
 8008464:	4770      	bx	lr
 8008466:	f803 1b01 	strb.w	r1, [r3], #1
 800846a:	e7f9      	b.n	8008460 <memset+0x4>

0800846c <siprintf>:
 800846c:	b40e      	push	{r1, r2, r3}
 800846e:	b500      	push	{lr}
 8008470:	b09c      	sub	sp, #112	; 0x70
 8008472:	ab1d      	add	r3, sp, #116	; 0x74
 8008474:	9002      	str	r0, [sp, #8]
 8008476:	9006      	str	r0, [sp, #24]
 8008478:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800847c:	4809      	ldr	r0, [pc, #36]	; (80084a4 <siprintf+0x38>)
 800847e:	9107      	str	r1, [sp, #28]
 8008480:	9104      	str	r1, [sp, #16]
 8008482:	4909      	ldr	r1, [pc, #36]	; (80084a8 <siprintf+0x3c>)
 8008484:	f853 2b04 	ldr.w	r2, [r3], #4
 8008488:	9105      	str	r1, [sp, #20]
 800848a:	6800      	ldr	r0, [r0, #0]
 800848c:	9301      	str	r3, [sp, #4]
 800848e:	a902      	add	r1, sp, #8
 8008490:	f000 fa68 	bl	8008964 <_svfiprintf_r>
 8008494:	9b02      	ldr	r3, [sp, #8]
 8008496:	2200      	movs	r2, #0
 8008498:	701a      	strb	r2, [r3, #0]
 800849a:	b01c      	add	sp, #112	; 0x70
 800849c:	f85d eb04 	ldr.w	lr, [sp], #4
 80084a0:	b003      	add	sp, #12
 80084a2:	4770      	bx	lr
 80084a4:	200000a8 	.word	0x200000a8
 80084a8:	ffff0208 	.word	0xffff0208

080084ac <strtok>:
 80084ac:	4b16      	ldr	r3, [pc, #88]	; (8008508 <strtok+0x5c>)
 80084ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80084b0:	681e      	ldr	r6, [r3, #0]
 80084b2:	6db4      	ldr	r4, [r6, #88]	; 0x58
 80084b4:	4605      	mov	r5, r0
 80084b6:	b9fc      	cbnz	r4, 80084f8 <strtok+0x4c>
 80084b8:	2050      	movs	r0, #80	; 0x50
 80084ba:	9101      	str	r1, [sp, #4]
 80084bc:	f000 f90e 	bl	80086dc <malloc>
 80084c0:	9901      	ldr	r1, [sp, #4]
 80084c2:	65b0      	str	r0, [r6, #88]	; 0x58
 80084c4:	4602      	mov	r2, r0
 80084c6:	b920      	cbnz	r0, 80084d2 <strtok+0x26>
 80084c8:	4b10      	ldr	r3, [pc, #64]	; (800850c <strtok+0x60>)
 80084ca:	4811      	ldr	r0, [pc, #68]	; (8008510 <strtok+0x64>)
 80084cc:	2157      	movs	r1, #87	; 0x57
 80084ce:	f000 f8d5 	bl	800867c <__assert_func>
 80084d2:	e9c0 4400 	strd	r4, r4, [r0]
 80084d6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80084da:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80084de:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80084e2:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80084e6:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80084ea:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80084ee:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80084f2:	6184      	str	r4, [r0, #24]
 80084f4:	7704      	strb	r4, [r0, #28]
 80084f6:	6244      	str	r4, [r0, #36]	; 0x24
 80084f8:	6db2      	ldr	r2, [r6, #88]	; 0x58
 80084fa:	2301      	movs	r3, #1
 80084fc:	4628      	mov	r0, r5
 80084fe:	b002      	add	sp, #8
 8008500:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008504:	f000 b806 	b.w	8008514 <__strtok_r>
 8008508:	200000a8 	.word	0x200000a8
 800850c:	08009bf0 	.word	0x08009bf0
 8008510:	08009c07 	.word	0x08009c07

08008514 <__strtok_r>:
 8008514:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008516:	b908      	cbnz	r0, 800851c <__strtok_r+0x8>
 8008518:	6810      	ldr	r0, [r2, #0]
 800851a:	b188      	cbz	r0, 8008540 <__strtok_r+0x2c>
 800851c:	4604      	mov	r4, r0
 800851e:	4620      	mov	r0, r4
 8008520:	f814 5b01 	ldrb.w	r5, [r4], #1
 8008524:	460f      	mov	r7, r1
 8008526:	f817 6b01 	ldrb.w	r6, [r7], #1
 800852a:	b91e      	cbnz	r6, 8008534 <__strtok_r+0x20>
 800852c:	b965      	cbnz	r5, 8008548 <__strtok_r+0x34>
 800852e:	6015      	str	r5, [r2, #0]
 8008530:	4628      	mov	r0, r5
 8008532:	e005      	b.n	8008540 <__strtok_r+0x2c>
 8008534:	42b5      	cmp	r5, r6
 8008536:	d1f6      	bne.n	8008526 <__strtok_r+0x12>
 8008538:	2b00      	cmp	r3, #0
 800853a:	d1f0      	bne.n	800851e <__strtok_r+0xa>
 800853c:	6014      	str	r4, [r2, #0]
 800853e:	7003      	strb	r3, [r0, #0]
 8008540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008542:	461c      	mov	r4, r3
 8008544:	e00c      	b.n	8008560 <__strtok_r+0x4c>
 8008546:	b915      	cbnz	r5, 800854e <__strtok_r+0x3a>
 8008548:	f814 3b01 	ldrb.w	r3, [r4], #1
 800854c:	460e      	mov	r6, r1
 800854e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8008552:	42ab      	cmp	r3, r5
 8008554:	d1f7      	bne.n	8008546 <__strtok_r+0x32>
 8008556:	2b00      	cmp	r3, #0
 8008558:	d0f3      	beq.n	8008542 <__strtok_r+0x2e>
 800855a:	2300      	movs	r3, #0
 800855c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8008560:	6014      	str	r4, [r2, #0]
 8008562:	e7ed      	b.n	8008540 <__strtok_r+0x2c>

08008564 <_strtol_l.constprop.0>:
 8008564:	2b01      	cmp	r3, #1
 8008566:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800856a:	d001      	beq.n	8008570 <_strtol_l.constprop.0+0xc>
 800856c:	2b24      	cmp	r3, #36	; 0x24
 800856e:	d906      	bls.n	800857e <_strtol_l.constprop.0+0x1a>
 8008570:	f7ff ff4a 	bl	8008408 <__errno>
 8008574:	2316      	movs	r3, #22
 8008576:	6003      	str	r3, [r0, #0]
 8008578:	2000      	movs	r0, #0
 800857a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800857e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008664 <_strtol_l.constprop.0+0x100>
 8008582:	460d      	mov	r5, r1
 8008584:	462e      	mov	r6, r5
 8008586:	f815 4b01 	ldrb.w	r4, [r5], #1
 800858a:	f814 700c 	ldrb.w	r7, [r4, ip]
 800858e:	f017 0708 	ands.w	r7, r7, #8
 8008592:	d1f7      	bne.n	8008584 <_strtol_l.constprop.0+0x20>
 8008594:	2c2d      	cmp	r4, #45	; 0x2d
 8008596:	d132      	bne.n	80085fe <_strtol_l.constprop.0+0x9a>
 8008598:	782c      	ldrb	r4, [r5, #0]
 800859a:	2701      	movs	r7, #1
 800859c:	1cb5      	adds	r5, r6, #2
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d05b      	beq.n	800865a <_strtol_l.constprop.0+0xf6>
 80085a2:	2b10      	cmp	r3, #16
 80085a4:	d109      	bne.n	80085ba <_strtol_l.constprop.0+0x56>
 80085a6:	2c30      	cmp	r4, #48	; 0x30
 80085a8:	d107      	bne.n	80085ba <_strtol_l.constprop.0+0x56>
 80085aa:	782c      	ldrb	r4, [r5, #0]
 80085ac:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80085b0:	2c58      	cmp	r4, #88	; 0x58
 80085b2:	d14d      	bne.n	8008650 <_strtol_l.constprop.0+0xec>
 80085b4:	786c      	ldrb	r4, [r5, #1]
 80085b6:	2310      	movs	r3, #16
 80085b8:	3502      	adds	r5, #2
 80085ba:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80085be:	f108 38ff 	add.w	r8, r8, #4294967295
 80085c2:	f04f 0c00 	mov.w	ip, #0
 80085c6:	fbb8 f9f3 	udiv	r9, r8, r3
 80085ca:	4666      	mov	r6, ip
 80085cc:	fb03 8a19 	mls	sl, r3, r9, r8
 80085d0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80085d4:	f1be 0f09 	cmp.w	lr, #9
 80085d8:	d816      	bhi.n	8008608 <_strtol_l.constprop.0+0xa4>
 80085da:	4674      	mov	r4, lr
 80085dc:	42a3      	cmp	r3, r4
 80085de:	dd24      	ble.n	800862a <_strtol_l.constprop.0+0xc6>
 80085e0:	f1bc 0f00 	cmp.w	ip, #0
 80085e4:	db1e      	blt.n	8008624 <_strtol_l.constprop.0+0xc0>
 80085e6:	45b1      	cmp	r9, r6
 80085e8:	d31c      	bcc.n	8008624 <_strtol_l.constprop.0+0xc0>
 80085ea:	d101      	bne.n	80085f0 <_strtol_l.constprop.0+0x8c>
 80085ec:	45a2      	cmp	sl, r4
 80085ee:	db19      	blt.n	8008624 <_strtol_l.constprop.0+0xc0>
 80085f0:	fb06 4603 	mla	r6, r6, r3, r4
 80085f4:	f04f 0c01 	mov.w	ip, #1
 80085f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80085fc:	e7e8      	b.n	80085d0 <_strtol_l.constprop.0+0x6c>
 80085fe:	2c2b      	cmp	r4, #43	; 0x2b
 8008600:	bf04      	itt	eq
 8008602:	782c      	ldrbeq	r4, [r5, #0]
 8008604:	1cb5      	addeq	r5, r6, #2
 8008606:	e7ca      	b.n	800859e <_strtol_l.constprop.0+0x3a>
 8008608:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800860c:	f1be 0f19 	cmp.w	lr, #25
 8008610:	d801      	bhi.n	8008616 <_strtol_l.constprop.0+0xb2>
 8008612:	3c37      	subs	r4, #55	; 0x37
 8008614:	e7e2      	b.n	80085dc <_strtol_l.constprop.0+0x78>
 8008616:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800861a:	f1be 0f19 	cmp.w	lr, #25
 800861e:	d804      	bhi.n	800862a <_strtol_l.constprop.0+0xc6>
 8008620:	3c57      	subs	r4, #87	; 0x57
 8008622:	e7db      	b.n	80085dc <_strtol_l.constprop.0+0x78>
 8008624:	f04f 3cff 	mov.w	ip, #4294967295
 8008628:	e7e6      	b.n	80085f8 <_strtol_l.constprop.0+0x94>
 800862a:	f1bc 0f00 	cmp.w	ip, #0
 800862e:	da05      	bge.n	800863c <_strtol_l.constprop.0+0xd8>
 8008630:	2322      	movs	r3, #34	; 0x22
 8008632:	6003      	str	r3, [r0, #0]
 8008634:	4646      	mov	r6, r8
 8008636:	b942      	cbnz	r2, 800864a <_strtol_l.constprop.0+0xe6>
 8008638:	4630      	mov	r0, r6
 800863a:	e79e      	b.n	800857a <_strtol_l.constprop.0+0x16>
 800863c:	b107      	cbz	r7, 8008640 <_strtol_l.constprop.0+0xdc>
 800863e:	4276      	negs	r6, r6
 8008640:	2a00      	cmp	r2, #0
 8008642:	d0f9      	beq.n	8008638 <_strtol_l.constprop.0+0xd4>
 8008644:	f1bc 0f00 	cmp.w	ip, #0
 8008648:	d000      	beq.n	800864c <_strtol_l.constprop.0+0xe8>
 800864a:	1e69      	subs	r1, r5, #1
 800864c:	6011      	str	r1, [r2, #0]
 800864e:	e7f3      	b.n	8008638 <_strtol_l.constprop.0+0xd4>
 8008650:	2430      	movs	r4, #48	; 0x30
 8008652:	2b00      	cmp	r3, #0
 8008654:	d1b1      	bne.n	80085ba <_strtol_l.constprop.0+0x56>
 8008656:	2308      	movs	r3, #8
 8008658:	e7af      	b.n	80085ba <_strtol_l.constprop.0+0x56>
 800865a:	2c30      	cmp	r4, #48	; 0x30
 800865c:	d0a5      	beq.n	80085aa <_strtol_l.constprop.0+0x46>
 800865e:	230a      	movs	r3, #10
 8008660:	e7ab      	b.n	80085ba <_strtol_l.constprop.0+0x56>
 8008662:	bf00      	nop
 8008664:	08009ca1 	.word	0x08009ca1

08008668 <strtol>:
 8008668:	4613      	mov	r3, r2
 800866a:	460a      	mov	r2, r1
 800866c:	4601      	mov	r1, r0
 800866e:	4802      	ldr	r0, [pc, #8]	; (8008678 <strtol+0x10>)
 8008670:	6800      	ldr	r0, [r0, #0]
 8008672:	f7ff bf77 	b.w	8008564 <_strtol_l.constprop.0>
 8008676:	bf00      	nop
 8008678:	200000a8 	.word	0x200000a8

0800867c <__assert_func>:
 800867c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800867e:	4614      	mov	r4, r2
 8008680:	461a      	mov	r2, r3
 8008682:	4b09      	ldr	r3, [pc, #36]	; (80086a8 <__assert_func+0x2c>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	4605      	mov	r5, r0
 8008688:	68d8      	ldr	r0, [r3, #12]
 800868a:	b14c      	cbz	r4, 80086a0 <__assert_func+0x24>
 800868c:	4b07      	ldr	r3, [pc, #28]	; (80086ac <__assert_func+0x30>)
 800868e:	9100      	str	r1, [sp, #0]
 8008690:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008694:	4906      	ldr	r1, [pc, #24]	; (80086b0 <__assert_func+0x34>)
 8008696:	462b      	mov	r3, r5
 8008698:	f000 f80e 	bl	80086b8 <fiprintf>
 800869c:	f000 fe20 	bl	80092e0 <abort>
 80086a0:	4b04      	ldr	r3, [pc, #16]	; (80086b4 <__assert_func+0x38>)
 80086a2:	461c      	mov	r4, r3
 80086a4:	e7f3      	b.n	800868e <__assert_func+0x12>
 80086a6:	bf00      	nop
 80086a8:	200000a8 	.word	0x200000a8
 80086ac:	08009c64 	.word	0x08009c64
 80086b0:	08009c71 	.word	0x08009c71
 80086b4:	08009c9f 	.word	0x08009c9f

080086b8 <fiprintf>:
 80086b8:	b40e      	push	{r1, r2, r3}
 80086ba:	b503      	push	{r0, r1, lr}
 80086bc:	4601      	mov	r1, r0
 80086be:	ab03      	add	r3, sp, #12
 80086c0:	4805      	ldr	r0, [pc, #20]	; (80086d8 <fiprintf+0x20>)
 80086c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80086c6:	6800      	ldr	r0, [r0, #0]
 80086c8:	9301      	str	r3, [sp, #4]
 80086ca:	f000 fa75 	bl	8008bb8 <_vfiprintf_r>
 80086ce:	b002      	add	sp, #8
 80086d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80086d4:	b003      	add	sp, #12
 80086d6:	4770      	bx	lr
 80086d8:	200000a8 	.word	0x200000a8

080086dc <malloc>:
 80086dc:	4b02      	ldr	r3, [pc, #8]	; (80086e8 <malloc+0xc>)
 80086de:	4601      	mov	r1, r0
 80086e0:	6818      	ldr	r0, [r3, #0]
 80086e2:	f000 b86f 	b.w	80087c4 <_malloc_r>
 80086e6:	bf00      	nop
 80086e8:	200000a8 	.word	0x200000a8

080086ec <_free_r>:
 80086ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80086ee:	2900      	cmp	r1, #0
 80086f0:	d044      	beq.n	800877c <_free_r+0x90>
 80086f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086f6:	9001      	str	r0, [sp, #4]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	f1a1 0404 	sub.w	r4, r1, #4
 80086fe:	bfb8      	it	lt
 8008700:	18e4      	addlt	r4, r4, r3
 8008702:	f001 f83d 	bl	8009780 <__malloc_lock>
 8008706:	4a1e      	ldr	r2, [pc, #120]	; (8008780 <_free_r+0x94>)
 8008708:	9801      	ldr	r0, [sp, #4]
 800870a:	6813      	ldr	r3, [r2, #0]
 800870c:	b933      	cbnz	r3, 800871c <_free_r+0x30>
 800870e:	6063      	str	r3, [r4, #4]
 8008710:	6014      	str	r4, [r2, #0]
 8008712:	b003      	add	sp, #12
 8008714:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008718:	f001 b838 	b.w	800978c <__malloc_unlock>
 800871c:	42a3      	cmp	r3, r4
 800871e:	d908      	bls.n	8008732 <_free_r+0x46>
 8008720:	6825      	ldr	r5, [r4, #0]
 8008722:	1961      	adds	r1, r4, r5
 8008724:	428b      	cmp	r3, r1
 8008726:	bf01      	itttt	eq
 8008728:	6819      	ldreq	r1, [r3, #0]
 800872a:	685b      	ldreq	r3, [r3, #4]
 800872c:	1949      	addeq	r1, r1, r5
 800872e:	6021      	streq	r1, [r4, #0]
 8008730:	e7ed      	b.n	800870e <_free_r+0x22>
 8008732:	461a      	mov	r2, r3
 8008734:	685b      	ldr	r3, [r3, #4]
 8008736:	b10b      	cbz	r3, 800873c <_free_r+0x50>
 8008738:	42a3      	cmp	r3, r4
 800873a:	d9fa      	bls.n	8008732 <_free_r+0x46>
 800873c:	6811      	ldr	r1, [r2, #0]
 800873e:	1855      	adds	r5, r2, r1
 8008740:	42a5      	cmp	r5, r4
 8008742:	d10b      	bne.n	800875c <_free_r+0x70>
 8008744:	6824      	ldr	r4, [r4, #0]
 8008746:	4421      	add	r1, r4
 8008748:	1854      	adds	r4, r2, r1
 800874a:	42a3      	cmp	r3, r4
 800874c:	6011      	str	r1, [r2, #0]
 800874e:	d1e0      	bne.n	8008712 <_free_r+0x26>
 8008750:	681c      	ldr	r4, [r3, #0]
 8008752:	685b      	ldr	r3, [r3, #4]
 8008754:	6053      	str	r3, [r2, #4]
 8008756:	4421      	add	r1, r4
 8008758:	6011      	str	r1, [r2, #0]
 800875a:	e7da      	b.n	8008712 <_free_r+0x26>
 800875c:	d902      	bls.n	8008764 <_free_r+0x78>
 800875e:	230c      	movs	r3, #12
 8008760:	6003      	str	r3, [r0, #0]
 8008762:	e7d6      	b.n	8008712 <_free_r+0x26>
 8008764:	6825      	ldr	r5, [r4, #0]
 8008766:	1961      	adds	r1, r4, r5
 8008768:	428b      	cmp	r3, r1
 800876a:	bf04      	itt	eq
 800876c:	6819      	ldreq	r1, [r3, #0]
 800876e:	685b      	ldreq	r3, [r3, #4]
 8008770:	6063      	str	r3, [r4, #4]
 8008772:	bf04      	itt	eq
 8008774:	1949      	addeq	r1, r1, r5
 8008776:	6021      	streq	r1, [r4, #0]
 8008778:	6054      	str	r4, [r2, #4]
 800877a:	e7ca      	b.n	8008712 <_free_r+0x26>
 800877c:	b003      	add	sp, #12
 800877e:	bd30      	pop	{r4, r5, pc}
 8008780:	2000031c 	.word	0x2000031c

08008784 <sbrk_aligned>:
 8008784:	b570      	push	{r4, r5, r6, lr}
 8008786:	4e0e      	ldr	r6, [pc, #56]	; (80087c0 <sbrk_aligned+0x3c>)
 8008788:	460c      	mov	r4, r1
 800878a:	6831      	ldr	r1, [r6, #0]
 800878c:	4605      	mov	r5, r0
 800878e:	b911      	cbnz	r1, 8008796 <sbrk_aligned+0x12>
 8008790:	f000 fcd6 	bl	8009140 <_sbrk_r>
 8008794:	6030      	str	r0, [r6, #0]
 8008796:	4621      	mov	r1, r4
 8008798:	4628      	mov	r0, r5
 800879a:	f000 fcd1 	bl	8009140 <_sbrk_r>
 800879e:	1c43      	adds	r3, r0, #1
 80087a0:	d00a      	beq.n	80087b8 <sbrk_aligned+0x34>
 80087a2:	1cc4      	adds	r4, r0, #3
 80087a4:	f024 0403 	bic.w	r4, r4, #3
 80087a8:	42a0      	cmp	r0, r4
 80087aa:	d007      	beq.n	80087bc <sbrk_aligned+0x38>
 80087ac:	1a21      	subs	r1, r4, r0
 80087ae:	4628      	mov	r0, r5
 80087b0:	f000 fcc6 	bl	8009140 <_sbrk_r>
 80087b4:	3001      	adds	r0, #1
 80087b6:	d101      	bne.n	80087bc <sbrk_aligned+0x38>
 80087b8:	f04f 34ff 	mov.w	r4, #4294967295
 80087bc:	4620      	mov	r0, r4
 80087be:	bd70      	pop	{r4, r5, r6, pc}
 80087c0:	20000320 	.word	0x20000320

080087c4 <_malloc_r>:
 80087c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087c8:	1ccd      	adds	r5, r1, #3
 80087ca:	f025 0503 	bic.w	r5, r5, #3
 80087ce:	3508      	adds	r5, #8
 80087d0:	2d0c      	cmp	r5, #12
 80087d2:	bf38      	it	cc
 80087d4:	250c      	movcc	r5, #12
 80087d6:	2d00      	cmp	r5, #0
 80087d8:	4607      	mov	r7, r0
 80087da:	db01      	blt.n	80087e0 <_malloc_r+0x1c>
 80087dc:	42a9      	cmp	r1, r5
 80087de:	d905      	bls.n	80087ec <_malloc_r+0x28>
 80087e0:	230c      	movs	r3, #12
 80087e2:	603b      	str	r3, [r7, #0]
 80087e4:	2600      	movs	r6, #0
 80087e6:	4630      	mov	r0, r6
 80087e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087ec:	4e2e      	ldr	r6, [pc, #184]	; (80088a8 <_malloc_r+0xe4>)
 80087ee:	f000 ffc7 	bl	8009780 <__malloc_lock>
 80087f2:	6833      	ldr	r3, [r6, #0]
 80087f4:	461c      	mov	r4, r3
 80087f6:	bb34      	cbnz	r4, 8008846 <_malloc_r+0x82>
 80087f8:	4629      	mov	r1, r5
 80087fa:	4638      	mov	r0, r7
 80087fc:	f7ff ffc2 	bl	8008784 <sbrk_aligned>
 8008800:	1c43      	adds	r3, r0, #1
 8008802:	4604      	mov	r4, r0
 8008804:	d14d      	bne.n	80088a2 <_malloc_r+0xde>
 8008806:	6834      	ldr	r4, [r6, #0]
 8008808:	4626      	mov	r6, r4
 800880a:	2e00      	cmp	r6, #0
 800880c:	d140      	bne.n	8008890 <_malloc_r+0xcc>
 800880e:	6823      	ldr	r3, [r4, #0]
 8008810:	4631      	mov	r1, r6
 8008812:	4638      	mov	r0, r7
 8008814:	eb04 0803 	add.w	r8, r4, r3
 8008818:	f000 fc92 	bl	8009140 <_sbrk_r>
 800881c:	4580      	cmp	r8, r0
 800881e:	d13a      	bne.n	8008896 <_malloc_r+0xd2>
 8008820:	6821      	ldr	r1, [r4, #0]
 8008822:	3503      	adds	r5, #3
 8008824:	1a6d      	subs	r5, r5, r1
 8008826:	f025 0503 	bic.w	r5, r5, #3
 800882a:	3508      	adds	r5, #8
 800882c:	2d0c      	cmp	r5, #12
 800882e:	bf38      	it	cc
 8008830:	250c      	movcc	r5, #12
 8008832:	4629      	mov	r1, r5
 8008834:	4638      	mov	r0, r7
 8008836:	f7ff ffa5 	bl	8008784 <sbrk_aligned>
 800883a:	3001      	adds	r0, #1
 800883c:	d02b      	beq.n	8008896 <_malloc_r+0xd2>
 800883e:	6823      	ldr	r3, [r4, #0]
 8008840:	442b      	add	r3, r5
 8008842:	6023      	str	r3, [r4, #0]
 8008844:	e00e      	b.n	8008864 <_malloc_r+0xa0>
 8008846:	6822      	ldr	r2, [r4, #0]
 8008848:	1b52      	subs	r2, r2, r5
 800884a:	d41e      	bmi.n	800888a <_malloc_r+0xc6>
 800884c:	2a0b      	cmp	r2, #11
 800884e:	d916      	bls.n	800887e <_malloc_r+0xba>
 8008850:	1961      	adds	r1, r4, r5
 8008852:	42a3      	cmp	r3, r4
 8008854:	6025      	str	r5, [r4, #0]
 8008856:	bf18      	it	ne
 8008858:	6059      	strne	r1, [r3, #4]
 800885a:	6863      	ldr	r3, [r4, #4]
 800885c:	bf08      	it	eq
 800885e:	6031      	streq	r1, [r6, #0]
 8008860:	5162      	str	r2, [r4, r5]
 8008862:	604b      	str	r3, [r1, #4]
 8008864:	4638      	mov	r0, r7
 8008866:	f104 060b 	add.w	r6, r4, #11
 800886a:	f000 ff8f 	bl	800978c <__malloc_unlock>
 800886e:	f026 0607 	bic.w	r6, r6, #7
 8008872:	1d23      	adds	r3, r4, #4
 8008874:	1af2      	subs	r2, r6, r3
 8008876:	d0b6      	beq.n	80087e6 <_malloc_r+0x22>
 8008878:	1b9b      	subs	r3, r3, r6
 800887a:	50a3      	str	r3, [r4, r2]
 800887c:	e7b3      	b.n	80087e6 <_malloc_r+0x22>
 800887e:	6862      	ldr	r2, [r4, #4]
 8008880:	42a3      	cmp	r3, r4
 8008882:	bf0c      	ite	eq
 8008884:	6032      	streq	r2, [r6, #0]
 8008886:	605a      	strne	r2, [r3, #4]
 8008888:	e7ec      	b.n	8008864 <_malloc_r+0xa0>
 800888a:	4623      	mov	r3, r4
 800888c:	6864      	ldr	r4, [r4, #4]
 800888e:	e7b2      	b.n	80087f6 <_malloc_r+0x32>
 8008890:	4634      	mov	r4, r6
 8008892:	6876      	ldr	r6, [r6, #4]
 8008894:	e7b9      	b.n	800880a <_malloc_r+0x46>
 8008896:	230c      	movs	r3, #12
 8008898:	603b      	str	r3, [r7, #0]
 800889a:	4638      	mov	r0, r7
 800889c:	f000 ff76 	bl	800978c <__malloc_unlock>
 80088a0:	e7a1      	b.n	80087e6 <_malloc_r+0x22>
 80088a2:	6025      	str	r5, [r4, #0]
 80088a4:	e7de      	b.n	8008864 <_malloc_r+0xa0>
 80088a6:	bf00      	nop
 80088a8:	2000031c 	.word	0x2000031c

080088ac <__ssputs_r>:
 80088ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088b0:	688e      	ldr	r6, [r1, #8]
 80088b2:	429e      	cmp	r6, r3
 80088b4:	4682      	mov	sl, r0
 80088b6:	460c      	mov	r4, r1
 80088b8:	4690      	mov	r8, r2
 80088ba:	461f      	mov	r7, r3
 80088bc:	d838      	bhi.n	8008930 <__ssputs_r+0x84>
 80088be:	898a      	ldrh	r2, [r1, #12]
 80088c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80088c4:	d032      	beq.n	800892c <__ssputs_r+0x80>
 80088c6:	6825      	ldr	r5, [r4, #0]
 80088c8:	6909      	ldr	r1, [r1, #16]
 80088ca:	eba5 0901 	sub.w	r9, r5, r1
 80088ce:	6965      	ldr	r5, [r4, #20]
 80088d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80088d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80088d8:	3301      	adds	r3, #1
 80088da:	444b      	add	r3, r9
 80088dc:	106d      	asrs	r5, r5, #1
 80088de:	429d      	cmp	r5, r3
 80088e0:	bf38      	it	cc
 80088e2:	461d      	movcc	r5, r3
 80088e4:	0553      	lsls	r3, r2, #21
 80088e6:	d531      	bpl.n	800894c <__ssputs_r+0xa0>
 80088e8:	4629      	mov	r1, r5
 80088ea:	f7ff ff6b 	bl	80087c4 <_malloc_r>
 80088ee:	4606      	mov	r6, r0
 80088f0:	b950      	cbnz	r0, 8008908 <__ssputs_r+0x5c>
 80088f2:	230c      	movs	r3, #12
 80088f4:	f8ca 3000 	str.w	r3, [sl]
 80088f8:	89a3      	ldrh	r3, [r4, #12]
 80088fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088fe:	81a3      	strh	r3, [r4, #12]
 8008900:	f04f 30ff 	mov.w	r0, #4294967295
 8008904:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008908:	6921      	ldr	r1, [r4, #16]
 800890a:	464a      	mov	r2, r9
 800890c:	f000 ff10 	bl	8009730 <memcpy>
 8008910:	89a3      	ldrh	r3, [r4, #12]
 8008912:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008916:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800891a:	81a3      	strh	r3, [r4, #12]
 800891c:	6126      	str	r6, [r4, #16]
 800891e:	6165      	str	r5, [r4, #20]
 8008920:	444e      	add	r6, r9
 8008922:	eba5 0509 	sub.w	r5, r5, r9
 8008926:	6026      	str	r6, [r4, #0]
 8008928:	60a5      	str	r5, [r4, #8]
 800892a:	463e      	mov	r6, r7
 800892c:	42be      	cmp	r6, r7
 800892e:	d900      	bls.n	8008932 <__ssputs_r+0x86>
 8008930:	463e      	mov	r6, r7
 8008932:	6820      	ldr	r0, [r4, #0]
 8008934:	4632      	mov	r2, r6
 8008936:	4641      	mov	r1, r8
 8008938:	f000 ff08 	bl	800974c <memmove>
 800893c:	68a3      	ldr	r3, [r4, #8]
 800893e:	1b9b      	subs	r3, r3, r6
 8008940:	60a3      	str	r3, [r4, #8]
 8008942:	6823      	ldr	r3, [r4, #0]
 8008944:	4433      	add	r3, r6
 8008946:	6023      	str	r3, [r4, #0]
 8008948:	2000      	movs	r0, #0
 800894a:	e7db      	b.n	8008904 <__ssputs_r+0x58>
 800894c:	462a      	mov	r2, r5
 800894e:	f000 ff23 	bl	8009798 <_realloc_r>
 8008952:	4606      	mov	r6, r0
 8008954:	2800      	cmp	r0, #0
 8008956:	d1e1      	bne.n	800891c <__ssputs_r+0x70>
 8008958:	6921      	ldr	r1, [r4, #16]
 800895a:	4650      	mov	r0, sl
 800895c:	f7ff fec6 	bl	80086ec <_free_r>
 8008960:	e7c7      	b.n	80088f2 <__ssputs_r+0x46>
	...

08008964 <_svfiprintf_r>:
 8008964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008968:	4698      	mov	r8, r3
 800896a:	898b      	ldrh	r3, [r1, #12]
 800896c:	061b      	lsls	r3, r3, #24
 800896e:	b09d      	sub	sp, #116	; 0x74
 8008970:	4607      	mov	r7, r0
 8008972:	460d      	mov	r5, r1
 8008974:	4614      	mov	r4, r2
 8008976:	d50e      	bpl.n	8008996 <_svfiprintf_r+0x32>
 8008978:	690b      	ldr	r3, [r1, #16]
 800897a:	b963      	cbnz	r3, 8008996 <_svfiprintf_r+0x32>
 800897c:	2140      	movs	r1, #64	; 0x40
 800897e:	f7ff ff21 	bl	80087c4 <_malloc_r>
 8008982:	6028      	str	r0, [r5, #0]
 8008984:	6128      	str	r0, [r5, #16]
 8008986:	b920      	cbnz	r0, 8008992 <_svfiprintf_r+0x2e>
 8008988:	230c      	movs	r3, #12
 800898a:	603b      	str	r3, [r7, #0]
 800898c:	f04f 30ff 	mov.w	r0, #4294967295
 8008990:	e0d1      	b.n	8008b36 <_svfiprintf_r+0x1d2>
 8008992:	2340      	movs	r3, #64	; 0x40
 8008994:	616b      	str	r3, [r5, #20]
 8008996:	2300      	movs	r3, #0
 8008998:	9309      	str	r3, [sp, #36]	; 0x24
 800899a:	2320      	movs	r3, #32
 800899c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80089a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80089a4:	2330      	movs	r3, #48	; 0x30
 80089a6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008b50 <_svfiprintf_r+0x1ec>
 80089aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80089ae:	f04f 0901 	mov.w	r9, #1
 80089b2:	4623      	mov	r3, r4
 80089b4:	469a      	mov	sl, r3
 80089b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80089ba:	b10a      	cbz	r2, 80089c0 <_svfiprintf_r+0x5c>
 80089bc:	2a25      	cmp	r2, #37	; 0x25
 80089be:	d1f9      	bne.n	80089b4 <_svfiprintf_r+0x50>
 80089c0:	ebba 0b04 	subs.w	fp, sl, r4
 80089c4:	d00b      	beq.n	80089de <_svfiprintf_r+0x7a>
 80089c6:	465b      	mov	r3, fp
 80089c8:	4622      	mov	r2, r4
 80089ca:	4629      	mov	r1, r5
 80089cc:	4638      	mov	r0, r7
 80089ce:	f7ff ff6d 	bl	80088ac <__ssputs_r>
 80089d2:	3001      	adds	r0, #1
 80089d4:	f000 80aa 	beq.w	8008b2c <_svfiprintf_r+0x1c8>
 80089d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80089da:	445a      	add	r2, fp
 80089dc:	9209      	str	r2, [sp, #36]	; 0x24
 80089de:	f89a 3000 	ldrb.w	r3, [sl]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	f000 80a2 	beq.w	8008b2c <_svfiprintf_r+0x1c8>
 80089e8:	2300      	movs	r3, #0
 80089ea:	f04f 32ff 	mov.w	r2, #4294967295
 80089ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80089f2:	f10a 0a01 	add.w	sl, sl, #1
 80089f6:	9304      	str	r3, [sp, #16]
 80089f8:	9307      	str	r3, [sp, #28]
 80089fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80089fe:	931a      	str	r3, [sp, #104]	; 0x68
 8008a00:	4654      	mov	r4, sl
 8008a02:	2205      	movs	r2, #5
 8008a04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a08:	4851      	ldr	r0, [pc, #324]	; (8008b50 <_svfiprintf_r+0x1ec>)
 8008a0a:	f7f7 fc21 	bl	8000250 <memchr>
 8008a0e:	9a04      	ldr	r2, [sp, #16]
 8008a10:	b9d8      	cbnz	r0, 8008a4a <_svfiprintf_r+0xe6>
 8008a12:	06d0      	lsls	r0, r2, #27
 8008a14:	bf44      	itt	mi
 8008a16:	2320      	movmi	r3, #32
 8008a18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a1c:	0711      	lsls	r1, r2, #28
 8008a1e:	bf44      	itt	mi
 8008a20:	232b      	movmi	r3, #43	; 0x2b
 8008a22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a26:	f89a 3000 	ldrb.w	r3, [sl]
 8008a2a:	2b2a      	cmp	r3, #42	; 0x2a
 8008a2c:	d015      	beq.n	8008a5a <_svfiprintf_r+0xf6>
 8008a2e:	9a07      	ldr	r2, [sp, #28]
 8008a30:	4654      	mov	r4, sl
 8008a32:	2000      	movs	r0, #0
 8008a34:	f04f 0c0a 	mov.w	ip, #10
 8008a38:	4621      	mov	r1, r4
 8008a3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a3e:	3b30      	subs	r3, #48	; 0x30
 8008a40:	2b09      	cmp	r3, #9
 8008a42:	d94e      	bls.n	8008ae2 <_svfiprintf_r+0x17e>
 8008a44:	b1b0      	cbz	r0, 8008a74 <_svfiprintf_r+0x110>
 8008a46:	9207      	str	r2, [sp, #28]
 8008a48:	e014      	b.n	8008a74 <_svfiprintf_r+0x110>
 8008a4a:	eba0 0308 	sub.w	r3, r0, r8
 8008a4e:	fa09 f303 	lsl.w	r3, r9, r3
 8008a52:	4313      	orrs	r3, r2
 8008a54:	9304      	str	r3, [sp, #16]
 8008a56:	46a2      	mov	sl, r4
 8008a58:	e7d2      	b.n	8008a00 <_svfiprintf_r+0x9c>
 8008a5a:	9b03      	ldr	r3, [sp, #12]
 8008a5c:	1d19      	adds	r1, r3, #4
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	9103      	str	r1, [sp, #12]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	bfbb      	ittet	lt
 8008a66:	425b      	neglt	r3, r3
 8008a68:	f042 0202 	orrlt.w	r2, r2, #2
 8008a6c:	9307      	strge	r3, [sp, #28]
 8008a6e:	9307      	strlt	r3, [sp, #28]
 8008a70:	bfb8      	it	lt
 8008a72:	9204      	strlt	r2, [sp, #16]
 8008a74:	7823      	ldrb	r3, [r4, #0]
 8008a76:	2b2e      	cmp	r3, #46	; 0x2e
 8008a78:	d10c      	bne.n	8008a94 <_svfiprintf_r+0x130>
 8008a7a:	7863      	ldrb	r3, [r4, #1]
 8008a7c:	2b2a      	cmp	r3, #42	; 0x2a
 8008a7e:	d135      	bne.n	8008aec <_svfiprintf_r+0x188>
 8008a80:	9b03      	ldr	r3, [sp, #12]
 8008a82:	1d1a      	adds	r2, r3, #4
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	9203      	str	r2, [sp, #12]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	bfb8      	it	lt
 8008a8c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008a90:	3402      	adds	r4, #2
 8008a92:	9305      	str	r3, [sp, #20]
 8008a94:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008b60 <_svfiprintf_r+0x1fc>
 8008a98:	7821      	ldrb	r1, [r4, #0]
 8008a9a:	2203      	movs	r2, #3
 8008a9c:	4650      	mov	r0, sl
 8008a9e:	f7f7 fbd7 	bl	8000250 <memchr>
 8008aa2:	b140      	cbz	r0, 8008ab6 <_svfiprintf_r+0x152>
 8008aa4:	2340      	movs	r3, #64	; 0x40
 8008aa6:	eba0 000a 	sub.w	r0, r0, sl
 8008aaa:	fa03 f000 	lsl.w	r0, r3, r0
 8008aae:	9b04      	ldr	r3, [sp, #16]
 8008ab0:	4303      	orrs	r3, r0
 8008ab2:	3401      	adds	r4, #1
 8008ab4:	9304      	str	r3, [sp, #16]
 8008ab6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008aba:	4826      	ldr	r0, [pc, #152]	; (8008b54 <_svfiprintf_r+0x1f0>)
 8008abc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008ac0:	2206      	movs	r2, #6
 8008ac2:	f7f7 fbc5 	bl	8000250 <memchr>
 8008ac6:	2800      	cmp	r0, #0
 8008ac8:	d038      	beq.n	8008b3c <_svfiprintf_r+0x1d8>
 8008aca:	4b23      	ldr	r3, [pc, #140]	; (8008b58 <_svfiprintf_r+0x1f4>)
 8008acc:	bb1b      	cbnz	r3, 8008b16 <_svfiprintf_r+0x1b2>
 8008ace:	9b03      	ldr	r3, [sp, #12]
 8008ad0:	3307      	adds	r3, #7
 8008ad2:	f023 0307 	bic.w	r3, r3, #7
 8008ad6:	3308      	adds	r3, #8
 8008ad8:	9303      	str	r3, [sp, #12]
 8008ada:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008adc:	4433      	add	r3, r6
 8008ade:	9309      	str	r3, [sp, #36]	; 0x24
 8008ae0:	e767      	b.n	80089b2 <_svfiprintf_r+0x4e>
 8008ae2:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ae6:	460c      	mov	r4, r1
 8008ae8:	2001      	movs	r0, #1
 8008aea:	e7a5      	b.n	8008a38 <_svfiprintf_r+0xd4>
 8008aec:	2300      	movs	r3, #0
 8008aee:	3401      	adds	r4, #1
 8008af0:	9305      	str	r3, [sp, #20]
 8008af2:	4619      	mov	r1, r3
 8008af4:	f04f 0c0a 	mov.w	ip, #10
 8008af8:	4620      	mov	r0, r4
 8008afa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008afe:	3a30      	subs	r2, #48	; 0x30
 8008b00:	2a09      	cmp	r2, #9
 8008b02:	d903      	bls.n	8008b0c <_svfiprintf_r+0x1a8>
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d0c5      	beq.n	8008a94 <_svfiprintf_r+0x130>
 8008b08:	9105      	str	r1, [sp, #20]
 8008b0a:	e7c3      	b.n	8008a94 <_svfiprintf_r+0x130>
 8008b0c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b10:	4604      	mov	r4, r0
 8008b12:	2301      	movs	r3, #1
 8008b14:	e7f0      	b.n	8008af8 <_svfiprintf_r+0x194>
 8008b16:	ab03      	add	r3, sp, #12
 8008b18:	9300      	str	r3, [sp, #0]
 8008b1a:	462a      	mov	r2, r5
 8008b1c:	4b0f      	ldr	r3, [pc, #60]	; (8008b5c <_svfiprintf_r+0x1f8>)
 8008b1e:	a904      	add	r1, sp, #16
 8008b20:	4638      	mov	r0, r7
 8008b22:	f3af 8000 	nop.w
 8008b26:	1c42      	adds	r2, r0, #1
 8008b28:	4606      	mov	r6, r0
 8008b2a:	d1d6      	bne.n	8008ada <_svfiprintf_r+0x176>
 8008b2c:	89ab      	ldrh	r3, [r5, #12]
 8008b2e:	065b      	lsls	r3, r3, #25
 8008b30:	f53f af2c 	bmi.w	800898c <_svfiprintf_r+0x28>
 8008b34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008b36:	b01d      	add	sp, #116	; 0x74
 8008b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b3c:	ab03      	add	r3, sp, #12
 8008b3e:	9300      	str	r3, [sp, #0]
 8008b40:	462a      	mov	r2, r5
 8008b42:	4b06      	ldr	r3, [pc, #24]	; (8008b5c <_svfiprintf_r+0x1f8>)
 8008b44:	a904      	add	r1, sp, #16
 8008b46:	4638      	mov	r0, r7
 8008b48:	f000 f9d4 	bl	8008ef4 <_printf_i>
 8008b4c:	e7eb      	b.n	8008b26 <_svfiprintf_r+0x1c2>
 8008b4e:	bf00      	nop
 8008b50:	08009da1 	.word	0x08009da1
 8008b54:	08009dab 	.word	0x08009dab
 8008b58:	00000000 	.word	0x00000000
 8008b5c:	080088ad 	.word	0x080088ad
 8008b60:	08009da7 	.word	0x08009da7

08008b64 <__sfputc_r>:
 8008b64:	6893      	ldr	r3, [r2, #8]
 8008b66:	3b01      	subs	r3, #1
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	b410      	push	{r4}
 8008b6c:	6093      	str	r3, [r2, #8]
 8008b6e:	da08      	bge.n	8008b82 <__sfputc_r+0x1e>
 8008b70:	6994      	ldr	r4, [r2, #24]
 8008b72:	42a3      	cmp	r3, r4
 8008b74:	db01      	blt.n	8008b7a <__sfputc_r+0x16>
 8008b76:	290a      	cmp	r1, #10
 8008b78:	d103      	bne.n	8008b82 <__sfputc_r+0x1e>
 8008b7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b7e:	f000 baef 	b.w	8009160 <__swbuf_r>
 8008b82:	6813      	ldr	r3, [r2, #0]
 8008b84:	1c58      	adds	r0, r3, #1
 8008b86:	6010      	str	r0, [r2, #0]
 8008b88:	7019      	strb	r1, [r3, #0]
 8008b8a:	4608      	mov	r0, r1
 8008b8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b90:	4770      	bx	lr

08008b92 <__sfputs_r>:
 8008b92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b94:	4606      	mov	r6, r0
 8008b96:	460f      	mov	r7, r1
 8008b98:	4614      	mov	r4, r2
 8008b9a:	18d5      	adds	r5, r2, r3
 8008b9c:	42ac      	cmp	r4, r5
 8008b9e:	d101      	bne.n	8008ba4 <__sfputs_r+0x12>
 8008ba0:	2000      	movs	r0, #0
 8008ba2:	e007      	b.n	8008bb4 <__sfputs_r+0x22>
 8008ba4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ba8:	463a      	mov	r2, r7
 8008baa:	4630      	mov	r0, r6
 8008bac:	f7ff ffda 	bl	8008b64 <__sfputc_r>
 8008bb0:	1c43      	adds	r3, r0, #1
 8008bb2:	d1f3      	bne.n	8008b9c <__sfputs_r+0xa>
 8008bb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008bb8 <_vfiprintf_r>:
 8008bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bbc:	460d      	mov	r5, r1
 8008bbe:	b09d      	sub	sp, #116	; 0x74
 8008bc0:	4614      	mov	r4, r2
 8008bc2:	4698      	mov	r8, r3
 8008bc4:	4606      	mov	r6, r0
 8008bc6:	b118      	cbz	r0, 8008bd0 <_vfiprintf_r+0x18>
 8008bc8:	6983      	ldr	r3, [r0, #24]
 8008bca:	b90b      	cbnz	r3, 8008bd0 <_vfiprintf_r+0x18>
 8008bcc:	f000 fcaa 	bl	8009524 <__sinit>
 8008bd0:	4b89      	ldr	r3, [pc, #548]	; (8008df8 <_vfiprintf_r+0x240>)
 8008bd2:	429d      	cmp	r5, r3
 8008bd4:	d11b      	bne.n	8008c0e <_vfiprintf_r+0x56>
 8008bd6:	6875      	ldr	r5, [r6, #4]
 8008bd8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008bda:	07d9      	lsls	r1, r3, #31
 8008bdc:	d405      	bmi.n	8008bea <_vfiprintf_r+0x32>
 8008bde:	89ab      	ldrh	r3, [r5, #12]
 8008be0:	059a      	lsls	r2, r3, #22
 8008be2:	d402      	bmi.n	8008bea <_vfiprintf_r+0x32>
 8008be4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008be6:	f000 fd3b 	bl	8009660 <__retarget_lock_acquire_recursive>
 8008bea:	89ab      	ldrh	r3, [r5, #12]
 8008bec:	071b      	lsls	r3, r3, #28
 8008bee:	d501      	bpl.n	8008bf4 <_vfiprintf_r+0x3c>
 8008bf0:	692b      	ldr	r3, [r5, #16]
 8008bf2:	b9eb      	cbnz	r3, 8008c30 <_vfiprintf_r+0x78>
 8008bf4:	4629      	mov	r1, r5
 8008bf6:	4630      	mov	r0, r6
 8008bf8:	f000 fb04 	bl	8009204 <__swsetup_r>
 8008bfc:	b1c0      	cbz	r0, 8008c30 <_vfiprintf_r+0x78>
 8008bfe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c00:	07dc      	lsls	r4, r3, #31
 8008c02:	d50e      	bpl.n	8008c22 <_vfiprintf_r+0x6a>
 8008c04:	f04f 30ff 	mov.w	r0, #4294967295
 8008c08:	b01d      	add	sp, #116	; 0x74
 8008c0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c0e:	4b7b      	ldr	r3, [pc, #492]	; (8008dfc <_vfiprintf_r+0x244>)
 8008c10:	429d      	cmp	r5, r3
 8008c12:	d101      	bne.n	8008c18 <_vfiprintf_r+0x60>
 8008c14:	68b5      	ldr	r5, [r6, #8]
 8008c16:	e7df      	b.n	8008bd8 <_vfiprintf_r+0x20>
 8008c18:	4b79      	ldr	r3, [pc, #484]	; (8008e00 <_vfiprintf_r+0x248>)
 8008c1a:	429d      	cmp	r5, r3
 8008c1c:	bf08      	it	eq
 8008c1e:	68f5      	ldreq	r5, [r6, #12]
 8008c20:	e7da      	b.n	8008bd8 <_vfiprintf_r+0x20>
 8008c22:	89ab      	ldrh	r3, [r5, #12]
 8008c24:	0598      	lsls	r0, r3, #22
 8008c26:	d4ed      	bmi.n	8008c04 <_vfiprintf_r+0x4c>
 8008c28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c2a:	f000 fd1a 	bl	8009662 <__retarget_lock_release_recursive>
 8008c2e:	e7e9      	b.n	8008c04 <_vfiprintf_r+0x4c>
 8008c30:	2300      	movs	r3, #0
 8008c32:	9309      	str	r3, [sp, #36]	; 0x24
 8008c34:	2320      	movs	r3, #32
 8008c36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008c3a:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c3e:	2330      	movs	r3, #48	; 0x30
 8008c40:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008e04 <_vfiprintf_r+0x24c>
 8008c44:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008c48:	f04f 0901 	mov.w	r9, #1
 8008c4c:	4623      	mov	r3, r4
 8008c4e:	469a      	mov	sl, r3
 8008c50:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c54:	b10a      	cbz	r2, 8008c5a <_vfiprintf_r+0xa2>
 8008c56:	2a25      	cmp	r2, #37	; 0x25
 8008c58:	d1f9      	bne.n	8008c4e <_vfiprintf_r+0x96>
 8008c5a:	ebba 0b04 	subs.w	fp, sl, r4
 8008c5e:	d00b      	beq.n	8008c78 <_vfiprintf_r+0xc0>
 8008c60:	465b      	mov	r3, fp
 8008c62:	4622      	mov	r2, r4
 8008c64:	4629      	mov	r1, r5
 8008c66:	4630      	mov	r0, r6
 8008c68:	f7ff ff93 	bl	8008b92 <__sfputs_r>
 8008c6c:	3001      	adds	r0, #1
 8008c6e:	f000 80aa 	beq.w	8008dc6 <_vfiprintf_r+0x20e>
 8008c72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c74:	445a      	add	r2, fp
 8008c76:	9209      	str	r2, [sp, #36]	; 0x24
 8008c78:	f89a 3000 	ldrb.w	r3, [sl]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	f000 80a2 	beq.w	8008dc6 <_vfiprintf_r+0x20e>
 8008c82:	2300      	movs	r3, #0
 8008c84:	f04f 32ff 	mov.w	r2, #4294967295
 8008c88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c8c:	f10a 0a01 	add.w	sl, sl, #1
 8008c90:	9304      	str	r3, [sp, #16]
 8008c92:	9307      	str	r3, [sp, #28]
 8008c94:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008c98:	931a      	str	r3, [sp, #104]	; 0x68
 8008c9a:	4654      	mov	r4, sl
 8008c9c:	2205      	movs	r2, #5
 8008c9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ca2:	4858      	ldr	r0, [pc, #352]	; (8008e04 <_vfiprintf_r+0x24c>)
 8008ca4:	f7f7 fad4 	bl	8000250 <memchr>
 8008ca8:	9a04      	ldr	r2, [sp, #16]
 8008caa:	b9d8      	cbnz	r0, 8008ce4 <_vfiprintf_r+0x12c>
 8008cac:	06d1      	lsls	r1, r2, #27
 8008cae:	bf44      	itt	mi
 8008cb0:	2320      	movmi	r3, #32
 8008cb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008cb6:	0713      	lsls	r3, r2, #28
 8008cb8:	bf44      	itt	mi
 8008cba:	232b      	movmi	r3, #43	; 0x2b
 8008cbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008cc0:	f89a 3000 	ldrb.w	r3, [sl]
 8008cc4:	2b2a      	cmp	r3, #42	; 0x2a
 8008cc6:	d015      	beq.n	8008cf4 <_vfiprintf_r+0x13c>
 8008cc8:	9a07      	ldr	r2, [sp, #28]
 8008cca:	4654      	mov	r4, sl
 8008ccc:	2000      	movs	r0, #0
 8008cce:	f04f 0c0a 	mov.w	ip, #10
 8008cd2:	4621      	mov	r1, r4
 8008cd4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008cd8:	3b30      	subs	r3, #48	; 0x30
 8008cda:	2b09      	cmp	r3, #9
 8008cdc:	d94e      	bls.n	8008d7c <_vfiprintf_r+0x1c4>
 8008cde:	b1b0      	cbz	r0, 8008d0e <_vfiprintf_r+0x156>
 8008ce0:	9207      	str	r2, [sp, #28]
 8008ce2:	e014      	b.n	8008d0e <_vfiprintf_r+0x156>
 8008ce4:	eba0 0308 	sub.w	r3, r0, r8
 8008ce8:	fa09 f303 	lsl.w	r3, r9, r3
 8008cec:	4313      	orrs	r3, r2
 8008cee:	9304      	str	r3, [sp, #16]
 8008cf0:	46a2      	mov	sl, r4
 8008cf2:	e7d2      	b.n	8008c9a <_vfiprintf_r+0xe2>
 8008cf4:	9b03      	ldr	r3, [sp, #12]
 8008cf6:	1d19      	adds	r1, r3, #4
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	9103      	str	r1, [sp, #12]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	bfbb      	ittet	lt
 8008d00:	425b      	neglt	r3, r3
 8008d02:	f042 0202 	orrlt.w	r2, r2, #2
 8008d06:	9307      	strge	r3, [sp, #28]
 8008d08:	9307      	strlt	r3, [sp, #28]
 8008d0a:	bfb8      	it	lt
 8008d0c:	9204      	strlt	r2, [sp, #16]
 8008d0e:	7823      	ldrb	r3, [r4, #0]
 8008d10:	2b2e      	cmp	r3, #46	; 0x2e
 8008d12:	d10c      	bne.n	8008d2e <_vfiprintf_r+0x176>
 8008d14:	7863      	ldrb	r3, [r4, #1]
 8008d16:	2b2a      	cmp	r3, #42	; 0x2a
 8008d18:	d135      	bne.n	8008d86 <_vfiprintf_r+0x1ce>
 8008d1a:	9b03      	ldr	r3, [sp, #12]
 8008d1c:	1d1a      	adds	r2, r3, #4
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	9203      	str	r2, [sp, #12]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	bfb8      	it	lt
 8008d26:	f04f 33ff 	movlt.w	r3, #4294967295
 8008d2a:	3402      	adds	r4, #2
 8008d2c:	9305      	str	r3, [sp, #20]
 8008d2e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008e14 <_vfiprintf_r+0x25c>
 8008d32:	7821      	ldrb	r1, [r4, #0]
 8008d34:	2203      	movs	r2, #3
 8008d36:	4650      	mov	r0, sl
 8008d38:	f7f7 fa8a 	bl	8000250 <memchr>
 8008d3c:	b140      	cbz	r0, 8008d50 <_vfiprintf_r+0x198>
 8008d3e:	2340      	movs	r3, #64	; 0x40
 8008d40:	eba0 000a 	sub.w	r0, r0, sl
 8008d44:	fa03 f000 	lsl.w	r0, r3, r0
 8008d48:	9b04      	ldr	r3, [sp, #16]
 8008d4a:	4303      	orrs	r3, r0
 8008d4c:	3401      	adds	r4, #1
 8008d4e:	9304      	str	r3, [sp, #16]
 8008d50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d54:	482c      	ldr	r0, [pc, #176]	; (8008e08 <_vfiprintf_r+0x250>)
 8008d56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008d5a:	2206      	movs	r2, #6
 8008d5c:	f7f7 fa78 	bl	8000250 <memchr>
 8008d60:	2800      	cmp	r0, #0
 8008d62:	d03f      	beq.n	8008de4 <_vfiprintf_r+0x22c>
 8008d64:	4b29      	ldr	r3, [pc, #164]	; (8008e0c <_vfiprintf_r+0x254>)
 8008d66:	bb1b      	cbnz	r3, 8008db0 <_vfiprintf_r+0x1f8>
 8008d68:	9b03      	ldr	r3, [sp, #12]
 8008d6a:	3307      	adds	r3, #7
 8008d6c:	f023 0307 	bic.w	r3, r3, #7
 8008d70:	3308      	adds	r3, #8
 8008d72:	9303      	str	r3, [sp, #12]
 8008d74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d76:	443b      	add	r3, r7
 8008d78:	9309      	str	r3, [sp, #36]	; 0x24
 8008d7a:	e767      	b.n	8008c4c <_vfiprintf_r+0x94>
 8008d7c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d80:	460c      	mov	r4, r1
 8008d82:	2001      	movs	r0, #1
 8008d84:	e7a5      	b.n	8008cd2 <_vfiprintf_r+0x11a>
 8008d86:	2300      	movs	r3, #0
 8008d88:	3401      	adds	r4, #1
 8008d8a:	9305      	str	r3, [sp, #20]
 8008d8c:	4619      	mov	r1, r3
 8008d8e:	f04f 0c0a 	mov.w	ip, #10
 8008d92:	4620      	mov	r0, r4
 8008d94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d98:	3a30      	subs	r2, #48	; 0x30
 8008d9a:	2a09      	cmp	r2, #9
 8008d9c:	d903      	bls.n	8008da6 <_vfiprintf_r+0x1ee>
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d0c5      	beq.n	8008d2e <_vfiprintf_r+0x176>
 8008da2:	9105      	str	r1, [sp, #20]
 8008da4:	e7c3      	b.n	8008d2e <_vfiprintf_r+0x176>
 8008da6:	fb0c 2101 	mla	r1, ip, r1, r2
 8008daa:	4604      	mov	r4, r0
 8008dac:	2301      	movs	r3, #1
 8008dae:	e7f0      	b.n	8008d92 <_vfiprintf_r+0x1da>
 8008db0:	ab03      	add	r3, sp, #12
 8008db2:	9300      	str	r3, [sp, #0]
 8008db4:	462a      	mov	r2, r5
 8008db6:	4b16      	ldr	r3, [pc, #88]	; (8008e10 <_vfiprintf_r+0x258>)
 8008db8:	a904      	add	r1, sp, #16
 8008dba:	4630      	mov	r0, r6
 8008dbc:	f3af 8000 	nop.w
 8008dc0:	4607      	mov	r7, r0
 8008dc2:	1c78      	adds	r0, r7, #1
 8008dc4:	d1d6      	bne.n	8008d74 <_vfiprintf_r+0x1bc>
 8008dc6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008dc8:	07d9      	lsls	r1, r3, #31
 8008dca:	d405      	bmi.n	8008dd8 <_vfiprintf_r+0x220>
 8008dcc:	89ab      	ldrh	r3, [r5, #12]
 8008dce:	059a      	lsls	r2, r3, #22
 8008dd0:	d402      	bmi.n	8008dd8 <_vfiprintf_r+0x220>
 8008dd2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008dd4:	f000 fc45 	bl	8009662 <__retarget_lock_release_recursive>
 8008dd8:	89ab      	ldrh	r3, [r5, #12]
 8008dda:	065b      	lsls	r3, r3, #25
 8008ddc:	f53f af12 	bmi.w	8008c04 <_vfiprintf_r+0x4c>
 8008de0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008de2:	e711      	b.n	8008c08 <_vfiprintf_r+0x50>
 8008de4:	ab03      	add	r3, sp, #12
 8008de6:	9300      	str	r3, [sp, #0]
 8008de8:	462a      	mov	r2, r5
 8008dea:	4b09      	ldr	r3, [pc, #36]	; (8008e10 <_vfiprintf_r+0x258>)
 8008dec:	a904      	add	r1, sp, #16
 8008dee:	4630      	mov	r0, r6
 8008df0:	f000 f880 	bl	8008ef4 <_printf_i>
 8008df4:	e7e4      	b.n	8008dc0 <_vfiprintf_r+0x208>
 8008df6:	bf00      	nop
 8008df8:	08009df4 	.word	0x08009df4
 8008dfc:	08009e14 	.word	0x08009e14
 8008e00:	08009dd4 	.word	0x08009dd4
 8008e04:	08009da1 	.word	0x08009da1
 8008e08:	08009dab 	.word	0x08009dab
 8008e0c:	00000000 	.word	0x00000000
 8008e10:	08008b93 	.word	0x08008b93
 8008e14:	08009da7 	.word	0x08009da7

08008e18 <_printf_common>:
 8008e18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e1c:	4616      	mov	r6, r2
 8008e1e:	4699      	mov	r9, r3
 8008e20:	688a      	ldr	r2, [r1, #8]
 8008e22:	690b      	ldr	r3, [r1, #16]
 8008e24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008e28:	4293      	cmp	r3, r2
 8008e2a:	bfb8      	it	lt
 8008e2c:	4613      	movlt	r3, r2
 8008e2e:	6033      	str	r3, [r6, #0]
 8008e30:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008e34:	4607      	mov	r7, r0
 8008e36:	460c      	mov	r4, r1
 8008e38:	b10a      	cbz	r2, 8008e3e <_printf_common+0x26>
 8008e3a:	3301      	adds	r3, #1
 8008e3c:	6033      	str	r3, [r6, #0]
 8008e3e:	6823      	ldr	r3, [r4, #0]
 8008e40:	0699      	lsls	r1, r3, #26
 8008e42:	bf42      	ittt	mi
 8008e44:	6833      	ldrmi	r3, [r6, #0]
 8008e46:	3302      	addmi	r3, #2
 8008e48:	6033      	strmi	r3, [r6, #0]
 8008e4a:	6825      	ldr	r5, [r4, #0]
 8008e4c:	f015 0506 	ands.w	r5, r5, #6
 8008e50:	d106      	bne.n	8008e60 <_printf_common+0x48>
 8008e52:	f104 0a19 	add.w	sl, r4, #25
 8008e56:	68e3      	ldr	r3, [r4, #12]
 8008e58:	6832      	ldr	r2, [r6, #0]
 8008e5a:	1a9b      	subs	r3, r3, r2
 8008e5c:	42ab      	cmp	r3, r5
 8008e5e:	dc26      	bgt.n	8008eae <_printf_common+0x96>
 8008e60:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008e64:	1e13      	subs	r3, r2, #0
 8008e66:	6822      	ldr	r2, [r4, #0]
 8008e68:	bf18      	it	ne
 8008e6a:	2301      	movne	r3, #1
 8008e6c:	0692      	lsls	r2, r2, #26
 8008e6e:	d42b      	bmi.n	8008ec8 <_printf_common+0xb0>
 8008e70:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008e74:	4649      	mov	r1, r9
 8008e76:	4638      	mov	r0, r7
 8008e78:	47c0      	blx	r8
 8008e7a:	3001      	adds	r0, #1
 8008e7c:	d01e      	beq.n	8008ebc <_printf_common+0xa4>
 8008e7e:	6823      	ldr	r3, [r4, #0]
 8008e80:	68e5      	ldr	r5, [r4, #12]
 8008e82:	6832      	ldr	r2, [r6, #0]
 8008e84:	f003 0306 	and.w	r3, r3, #6
 8008e88:	2b04      	cmp	r3, #4
 8008e8a:	bf08      	it	eq
 8008e8c:	1aad      	subeq	r5, r5, r2
 8008e8e:	68a3      	ldr	r3, [r4, #8]
 8008e90:	6922      	ldr	r2, [r4, #16]
 8008e92:	bf0c      	ite	eq
 8008e94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008e98:	2500      	movne	r5, #0
 8008e9a:	4293      	cmp	r3, r2
 8008e9c:	bfc4      	itt	gt
 8008e9e:	1a9b      	subgt	r3, r3, r2
 8008ea0:	18ed      	addgt	r5, r5, r3
 8008ea2:	2600      	movs	r6, #0
 8008ea4:	341a      	adds	r4, #26
 8008ea6:	42b5      	cmp	r5, r6
 8008ea8:	d11a      	bne.n	8008ee0 <_printf_common+0xc8>
 8008eaa:	2000      	movs	r0, #0
 8008eac:	e008      	b.n	8008ec0 <_printf_common+0xa8>
 8008eae:	2301      	movs	r3, #1
 8008eb0:	4652      	mov	r2, sl
 8008eb2:	4649      	mov	r1, r9
 8008eb4:	4638      	mov	r0, r7
 8008eb6:	47c0      	blx	r8
 8008eb8:	3001      	adds	r0, #1
 8008eba:	d103      	bne.n	8008ec4 <_printf_common+0xac>
 8008ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8008ec0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ec4:	3501      	adds	r5, #1
 8008ec6:	e7c6      	b.n	8008e56 <_printf_common+0x3e>
 8008ec8:	18e1      	adds	r1, r4, r3
 8008eca:	1c5a      	adds	r2, r3, #1
 8008ecc:	2030      	movs	r0, #48	; 0x30
 8008ece:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008ed2:	4422      	add	r2, r4
 8008ed4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008ed8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008edc:	3302      	adds	r3, #2
 8008ede:	e7c7      	b.n	8008e70 <_printf_common+0x58>
 8008ee0:	2301      	movs	r3, #1
 8008ee2:	4622      	mov	r2, r4
 8008ee4:	4649      	mov	r1, r9
 8008ee6:	4638      	mov	r0, r7
 8008ee8:	47c0      	blx	r8
 8008eea:	3001      	adds	r0, #1
 8008eec:	d0e6      	beq.n	8008ebc <_printf_common+0xa4>
 8008eee:	3601      	adds	r6, #1
 8008ef0:	e7d9      	b.n	8008ea6 <_printf_common+0x8e>
	...

08008ef4 <_printf_i>:
 8008ef4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ef8:	7e0f      	ldrb	r7, [r1, #24]
 8008efa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008efc:	2f78      	cmp	r7, #120	; 0x78
 8008efe:	4691      	mov	r9, r2
 8008f00:	4680      	mov	r8, r0
 8008f02:	460c      	mov	r4, r1
 8008f04:	469a      	mov	sl, r3
 8008f06:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008f0a:	d807      	bhi.n	8008f1c <_printf_i+0x28>
 8008f0c:	2f62      	cmp	r7, #98	; 0x62
 8008f0e:	d80a      	bhi.n	8008f26 <_printf_i+0x32>
 8008f10:	2f00      	cmp	r7, #0
 8008f12:	f000 80d8 	beq.w	80090c6 <_printf_i+0x1d2>
 8008f16:	2f58      	cmp	r7, #88	; 0x58
 8008f18:	f000 80a3 	beq.w	8009062 <_printf_i+0x16e>
 8008f1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008f20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008f24:	e03a      	b.n	8008f9c <_printf_i+0xa8>
 8008f26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008f2a:	2b15      	cmp	r3, #21
 8008f2c:	d8f6      	bhi.n	8008f1c <_printf_i+0x28>
 8008f2e:	a101      	add	r1, pc, #4	; (adr r1, 8008f34 <_printf_i+0x40>)
 8008f30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008f34:	08008f8d 	.word	0x08008f8d
 8008f38:	08008fa1 	.word	0x08008fa1
 8008f3c:	08008f1d 	.word	0x08008f1d
 8008f40:	08008f1d 	.word	0x08008f1d
 8008f44:	08008f1d 	.word	0x08008f1d
 8008f48:	08008f1d 	.word	0x08008f1d
 8008f4c:	08008fa1 	.word	0x08008fa1
 8008f50:	08008f1d 	.word	0x08008f1d
 8008f54:	08008f1d 	.word	0x08008f1d
 8008f58:	08008f1d 	.word	0x08008f1d
 8008f5c:	08008f1d 	.word	0x08008f1d
 8008f60:	080090ad 	.word	0x080090ad
 8008f64:	08008fd1 	.word	0x08008fd1
 8008f68:	0800908f 	.word	0x0800908f
 8008f6c:	08008f1d 	.word	0x08008f1d
 8008f70:	08008f1d 	.word	0x08008f1d
 8008f74:	080090cf 	.word	0x080090cf
 8008f78:	08008f1d 	.word	0x08008f1d
 8008f7c:	08008fd1 	.word	0x08008fd1
 8008f80:	08008f1d 	.word	0x08008f1d
 8008f84:	08008f1d 	.word	0x08008f1d
 8008f88:	08009097 	.word	0x08009097
 8008f8c:	682b      	ldr	r3, [r5, #0]
 8008f8e:	1d1a      	adds	r2, r3, #4
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	602a      	str	r2, [r5, #0]
 8008f94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008f98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008f9c:	2301      	movs	r3, #1
 8008f9e:	e0a3      	b.n	80090e8 <_printf_i+0x1f4>
 8008fa0:	6820      	ldr	r0, [r4, #0]
 8008fa2:	6829      	ldr	r1, [r5, #0]
 8008fa4:	0606      	lsls	r6, r0, #24
 8008fa6:	f101 0304 	add.w	r3, r1, #4
 8008faa:	d50a      	bpl.n	8008fc2 <_printf_i+0xce>
 8008fac:	680e      	ldr	r6, [r1, #0]
 8008fae:	602b      	str	r3, [r5, #0]
 8008fb0:	2e00      	cmp	r6, #0
 8008fb2:	da03      	bge.n	8008fbc <_printf_i+0xc8>
 8008fb4:	232d      	movs	r3, #45	; 0x2d
 8008fb6:	4276      	negs	r6, r6
 8008fb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008fbc:	485e      	ldr	r0, [pc, #376]	; (8009138 <_printf_i+0x244>)
 8008fbe:	230a      	movs	r3, #10
 8008fc0:	e019      	b.n	8008ff6 <_printf_i+0x102>
 8008fc2:	680e      	ldr	r6, [r1, #0]
 8008fc4:	602b      	str	r3, [r5, #0]
 8008fc6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008fca:	bf18      	it	ne
 8008fcc:	b236      	sxthne	r6, r6
 8008fce:	e7ef      	b.n	8008fb0 <_printf_i+0xbc>
 8008fd0:	682b      	ldr	r3, [r5, #0]
 8008fd2:	6820      	ldr	r0, [r4, #0]
 8008fd4:	1d19      	adds	r1, r3, #4
 8008fd6:	6029      	str	r1, [r5, #0]
 8008fd8:	0601      	lsls	r1, r0, #24
 8008fda:	d501      	bpl.n	8008fe0 <_printf_i+0xec>
 8008fdc:	681e      	ldr	r6, [r3, #0]
 8008fde:	e002      	b.n	8008fe6 <_printf_i+0xf2>
 8008fe0:	0646      	lsls	r6, r0, #25
 8008fe2:	d5fb      	bpl.n	8008fdc <_printf_i+0xe8>
 8008fe4:	881e      	ldrh	r6, [r3, #0]
 8008fe6:	4854      	ldr	r0, [pc, #336]	; (8009138 <_printf_i+0x244>)
 8008fe8:	2f6f      	cmp	r7, #111	; 0x6f
 8008fea:	bf0c      	ite	eq
 8008fec:	2308      	moveq	r3, #8
 8008fee:	230a      	movne	r3, #10
 8008ff0:	2100      	movs	r1, #0
 8008ff2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008ff6:	6865      	ldr	r5, [r4, #4]
 8008ff8:	60a5      	str	r5, [r4, #8]
 8008ffa:	2d00      	cmp	r5, #0
 8008ffc:	bfa2      	ittt	ge
 8008ffe:	6821      	ldrge	r1, [r4, #0]
 8009000:	f021 0104 	bicge.w	r1, r1, #4
 8009004:	6021      	strge	r1, [r4, #0]
 8009006:	b90e      	cbnz	r6, 800900c <_printf_i+0x118>
 8009008:	2d00      	cmp	r5, #0
 800900a:	d04d      	beq.n	80090a8 <_printf_i+0x1b4>
 800900c:	4615      	mov	r5, r2
 800900e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009012:	fb03 6711 	mls	r7, r3, r1, r6
 8009016:	5dc7      	ldrb	r7, [r0, r7]
 8009018:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800901c:	4637      	mov	r7, r6
 800901e:	42bb      	cmp	r3, r7
 8009020:	460e      	mov	r6, r1
 8009022:	d9f4      	bls.n	800900e <_printf_i+0x11a>
 8009024:	2b08      	cmp	r3, #8
 8009026:	d10b      	bne.n	8009040 <_printf_i+0x14c>
 8009028:	6823      	ldr	r3, [r4, #0]
 800902a:	07de      	lsls	r6, r3, #31
 800902c:	d508      	bpl.n	8009040 <_printf_i+0x14c>
 800902e:	6923      	ldr	r3, [r4, #16]
 8009030:	6861      	ldr	r1, [r4, #4]
 8009032:	4299      	cmp	r1, r3
 8009034:	bfde      	ittt	le
 8009036:	2330      	movle	r3, #48	; 0x30
 8009038:	f805 3c01 	strble.w	r3, [r5, #-1]
 800903c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009040:	1b52      	subs	r2, r2, r5
 8009042:	6122      	str	r2, [r4, #16]
 8009044:	f8cd a000 	str.w	sl, [sp]
 8009048:	464b      	mov	r3, r9
 800904a:	aa03      	add	r2, sp, #12
 800904c:	4621      	mov	r1, r4
 800904e:	4640      	mov	r0, r8
 8009050:	f7ff fee2 	bl	8008e18 <_printf_common>
 8009054:	3001      	adds	r0, #1
 8009056:	d14c      	bne.n	80090f2 <_printf_i+0x1fe>
 8009058:	f04f 30ff 	mov.w	r0, #4294967295
 800905c:	b004      	add	sp, #16
 800905e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009062:	4835      	ldr	r0, [pc, #212]	; (8009138 <_printf_i+0x244>)
 8009064:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009068:	6829      	ldr	r1, [r5, #0]
 800906a:	6823      	ldr	r3, [r4, #0]
 800906c:	f851 6b04 	ldr.w	r6, [r1], #4
 8009070:	6029      	str	r1, [r5, #0]
 8009072:	061d      	lsls	r5, r3, #24
 8009074:	d514      	bpl.n	80090a0 <_printf_i+0x1ac>
 8009076:	07df      	lsls	r7, r3, #31
 8009078:	bf44      	itt	mi
 800907a:	f043 0320 	orrmi.w	r3, r3, #32
 800907e:	6023      	strmi	r3, [r4, #0]
 8009080:	b91e      	cbnz	r6, 800908a <_printf_i+0x196>
 8009082:	6823      	ldr	r3, [r4, #0]
 8009084:	f023 0320 	bic.w	r3, r3, #32
 8009088:	6023      	str	r3, [r4, #0]
 800908a:	2310      	movs	r3, #16
 800908c:	e7b0      	b.n	8008ff0 <_printf_i+0xfc>
 800908e:	6823      	ldr	r3, [r4, #0]
 8009090:	f043 0320 	orr.w	r3, r3, #32
 8009094:	6023      	str	r3, [r4, #0]
 8009096:	2378      	movs	r3, #120	; 0x78
 8009098:	4828      	ldr	r0, [pc, #160]	; (800913c <_printf_i+0x248>)
 800909a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800909e:	e7e3      	b.n	8009068 <_printf_i+0x174>
 80090a0:	0659      	lsls	r1, r3, #25
 80090a2:	bf48      	it	mi
 80090a4:	b2b6      	uxthmi	r6, r6
 80090a6:	e7e6      	b.n	8009076 <_printf_i+0x182>
 80090a8:	4615      	mov	r5, r2
 80090aa:	e7bb      	b.n	8009024 <_printf_i+0x130>
 80090ac:	682b      	ldr	r3, [r5, #0]
 80090ae:	6826      	ldr	r6, [r4, #0]
 80090b0:	6961      	ldr	r1, [r4, #20]
 80090b2:	1d18      	adds	r0, r3, #4
 80090b4:	6028      	str	r0, [r5, #0]
 80090b6:	0635      	lsls	r5, r6, #24
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	d501      	bpl.n	80090c0 <_printf_i+0x1cc>
 80090bc:	6019      	str	r1, [r3, #0]
 80090be:	e002      	b.n	80090c6 <_printf_i+0x1d2>
 80090c0:	0670      	lsls	r0, r6, #25
 80090c2:	d5fb      	bpl.n	80090bc <_printf_i+0x1c8>
 80090c4:	8019      	strh	r1, [r3, #0]
 80090c6:	2300      	movs	r3, #0
 80090c8:	6123      	str	r3, [r4, #16]
 80090ca:	4615      	mov	r5, r2
 80090cc:	e7ba      	b.n	8009044 <_printf_i+0x150>
 80090ce:	682b      	ldr	r3, [r5, #0]
 80090d0:	1d1a      	adds	r2, r3, #4
 80090d2:	602a      	str	r2, [r5, #0]
 80090d4:	681d      	ldr	r5, [r3, #0]
 80090d6:	6862      	ldr	r2, [r4, #4]
 80090d8:	2100      	movs	r1, #0
 80090da:	4628      	mov	r0, r5
 80090dc:	f7f7 f8b8 	bl	8000250 <memchr>
 80090e0:	b108      	cbz	r0, 80090e6 <_printf_i+0x1f2>
 80090e2:	1b40      	subs	r0, r0, r5
 80090e4:	6060      	str	r0, [r4, #4]
 80090e6:	6863      	ldr	r3, [r4, #4]
 80090e8:	6123      	str	r3, [r4, #16]
 80090ea:	2300      	movs	r3, #0
 80090ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80090f0:	e7a8      	b.n	8009044 <_printf_i+0x150>
 80090f2:	6923      	ldr	r3, [r4, #16]
 80090f4:	462a      	mov	r2, r5
 80090f6:	4649      	mov	r1, r9
 80090f8:	4640      	mov	r0, r8
 80090fa:	47d0      	blx	sl
 80090fc:	3001      	adds	r0, #1
 80090fe:	d0ab      	beq.n	8009058 <_printf_i+0x164>
 8009100:	6823      	ldr	r3, [r4, #0]
 8009102:	079b      	lsls	r3, r3, #30
 8009104:	d413      	bmi.n	800912e <_printf_i+0x23a>
 8009106:	68e0      	ldr	r0, [r4, #12]
 8009108:	9b03      	ldr	r3, [sp, #12]
 800910a:	4298      	cmp	r0, r3
 800910c:	bfb8      	it	lt
 800910e:	4618      	movlt	r0, r3
 8009110:	e7a4      	b.n	800905c <_printf_i+0x168>
 8009112:	2301      	movs	r3, #1
 8009114:	4632      	mov	r2, r6
 8009116:	4649      	mov	r1, r9
 8009118:	4640      	mov	r0, r8
 800911a:	47d0      	blx	sl
 800911c:	3001      	adds	r0, #1
 800911e:	d09b      	beq.n	8009058 <_printf_i+0x164>
 8009120:	3501      	adds	r5, #1
 8009122:	68e3      	ldr	r3, [r4, #12]
 8009124:	9903      	ldr	r1, [sp, #12]
 8009126:	1a5b      	subs	r3, r3, r1
 8009128:	42ab      	cmp	r3, r5
 800912a:	dcf2      	bgt.n	8009112 <_printf_i+0x21e>
 800912c:	e7eb      	b.n	8009106 <_printf_i+0x212>
 800912e:	2500      	movs	r5, #0
 8009130:	f104 0619 	add.w	r6, r4, #25
 8009134:	e7f5      	b.n	8009122 <_printf_i+0x22e>
 8009136:	bf00      	nop
 8009138:	08009db2 	.word	0x08009db2
 800913c:	08009dc3 	.word	0x08009dc3

08009140 <_sbrk_r>:
 8009140:	b538      	push	{r3, r4, r5, lr}
 8009142:	4d06      	ldr	r5, [pc, #24]	; (800915c <_sbrk_r+0x1c>)
 8009144:	2300      	movs	r3, #0
 8009146:	4604      	mov	r4, r0
 8009148:	4608      	mov	r0, r1
 800914a:	602b      	str	r3, [r5, #0]
 800914c:	f7f8 fa5a 	bl	8001604 <_sbrk>
 8009150:	1c43      	adds	r3, r0, #1
 8009152:	d102      	bne.n	800915a <_sbrk_r+0x1a>
 8009154:	682b      	ldr	r3, [r5, #0]
 8009156:	b103      	cbz	r3, 800915a <_sbrk_r+0x1a>
 8009158:	6023      	str	r3, [r4, #0]
 800915a:	bd38      	pop	{r3, r4, r5, pc}
 800915c:	20000328 	.word	0x20000328

08009160 <__swbuf_r>:
 8009160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009162:	460e      	mov	r6, r1
 8009164:	4614      	mov	r4, r2
 8009166:	4605      	mov	r5, r0
 8009168:	b118      	cbz	r0, 8009172 <__swbuf_r+0x12>
 800916a:	6983      	ldr	r3, [r0, #24]
 800916c:	b90b      	cbnz	r3, 8009172 <__swbuf_r+0x12>
 800916e:	f000 f9d9 	bl	8009524 <__sinit>
 8009172:	4b21      	ldr	r3, [pc, #132]	; (80091f8 <__swbuf_r+0x98>)
 8009174:	429c      	cmp	r4, r3
 8009176:	d12b      	bne.n	80091d0 <__swbuf_r+0x70>
 8009178:	686c      	ldr	r4, [r5, #4]
 800917a:	69a3      	ldr	r3, [r4, #24]
 800917c:	60a3      	str	r3, [r4, #8]
 800917e:	89a3      	ldrh	r3, [r4, #12]
 8009180:	071a      	lsls	r2, r3, #28
 8009182:	d52f      	bpl.n	80091e4 <__swbuf_r+0x84>
 8009184:	6923      	ldr	r3, [r4, #16]
 8009186:	b36b      	cbz	r3, 80091e4 <__swbuf_r+0x84>
 8009188:	6923      	ldr	r3, [r4, #16]
 800918a:	6820      	ldr	r0, [r4, #0]
 800918c:	1ac0      	subs	r0, r0, r3
 800918e:	6963      	ldr	r3, [r4, #20]
 8009190:	b2f6      	uxtb	r6, r6
 8009192:	4283      	cmp	r3, r0
 8009194:	4637      	mov	r7, r6
 8009196:	dc04      	bgt.n	80091a2 <__swbuf_r+0x42>
 8009198:	4621      	mov	r1, r4
 800919a:	4628      	mov	r0, r5
 800919c:	f000 f92e 	bl	80093fc <_fflush_r>
 80091a0:	bb30      	cbnz	r0, 80091f0 <__swbuf_r+0x90>
 80091a2:	68a3      	ldr	r3, [r4, #8]
 80091a4:	3b01      	subs	r3, #1
 80091a6:	60a3      	str	r3, [r4, #8]
 80091a8:	6823      	ldr	r3, [r4, #0]
 80091aa:	1c5a      	adds	r2, r3, #1
 80091ac:	6022      	str	r2, [r4, #0]
 80091ae:	701e      	strb	r6, [r3, #0]
 80091b0:	6963      	ldr	r3, [r4, #20]
 80091b2:	3001      	adds	r0, #1
 80091b4:	4283      	cmp	r3, r0
 80091b6:	d004      	beq.n	80091c2 <__swbuf_r+0x62>
 80091b8:	89a3      	ldrh	r3, [r4, #12]
 80091ba:	07db      	lsls	r3, r3, #31
 80091bc:	d506      	bpl.n	80091cc <__swbuf_r+0x6c>
 80091be:	2e0a      	cmp	r6, #10
 80091c0:	d104      	bne.n	80091cc <__swbuf_r+0x6c>
 80091c2:	4621      	mov	r1, r4
 80091c4:	4628      	mov	r0, r5
 80091c6:	f000 f919 	bl	80093fc <_fflush_r>
 80091ca:	b988      	cbnz	r0, 80091f0 <__swbuf_r+0x90>
 80091cc:	4638      	mov	r0, r7
 80091ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091d0:	4b0a      	ldr	r3, [pc, #40]	; (80091fc <__swbuf_r+0x9c>)
 80091d2:	429c      	cmp	r4, r3
 80091d4:	d101      	bne.n	80091da <__swbuf_r+0x7a>
 80091d6:	68ac      	ldr	r4, [r5, #8]
 80091d8:	e7cf      	b.n	800917a <__swbuf_r+0x1a>
 80091da:	4b09      	ldr	r3, [pc, #36]	; (8009200 <__swbuf_r+0xa0>)
 80091dc:	429c      	cmp	r4, r3
 80091de:	bf08      	it	eq
 80091e0:	68ec      	ldreq	r4, [r5, #12]
 80091e2:	e7ca      	b.n	800917a <__swbuf_r+0x1a>
 80091e4:	4621      	mov	r1, r4
 80091e6:	4628      	mov	r0, r5
 80091e8:	f000 f80c 	bl	8009204 <__swsetup_r>
 80091ec:	2800      	cmp	r0, #0
 80091ee:	d0cb      	beq.n	8009188 <__swbuf_r+0x28>
 80091f0:	f04f 37ff 	mov.w	r7, #4294967295
 80091f4:	e7ea      	b.n	80091cc <__swbuf_r+0x6c>
 80091f6:	bf00      	nop
 80091f8:	08009df4 	.word	0x08009df4
 80091fc:	08009e14 	.word	0x08009e14
 8009200:	08009dd4 	.word	0x08009dd4

08009204 <__swsetup_r>:
 8009204:	4b32      	ldr	r3, [pc, #200]	; (80092d0 <__swsetup_r+0xcc>)
 8009206:	b570      	push	{r4, r5, r6, lr}
 8009208:	681d      	ldr	r5, [r3, #0]
 800920a:	4606      	mov	r6, r0
 800920c:	460c      	mov	r4, r1
 800920e:	b125      	cbz	r5, 800921a <__swsetup_r+0x16>
 8009210:	69ab      	ldr	r3, [r5, #24]
 8009212:	b913      	cbnz	r3, 800921a <__swsetup_r+0x16>
 8009214:	4628      	mov	r0, r5
 8009216:	f000 f985 	bl	8009524 <__sinit>
 800921a:	4b2e      	ldr	r3, [pc, #184]	; (80092d4 <__swsetup_r+0xd0>)
 800921c:	429c      	cmp	r4, r3
 800921e:	d10f      	bne.n	8009240 <__swsetup_r+0x3c>
 8009220:	686c      	ldr	r4, [r5, #4]
 8009222:	89a3      	ldrh	r3, [r4, #12]
 8009224:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009228:	0719      	lsls	r1, r3, #28
 800922a:	d42c      	bmi.n	8009286 <__swsetup_r+0x82>
 800922c:	06dd      	lsls	r5, r3, #27
 800922e:	d411      	bmi.n	8009254 <__swsetup_r+0x50>
 8009230:	2309      	movs	r3, #9
 8009232:	6033      	str	r3, [r6, #0]
 8009234:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009238:	81a3      	strh	r3, [r4, #12]
 800923a:	f04f 30ff 	mov.w	r0, #4294967295
 800923e:	e03e      	b.n	80092be <__swsetup_r+0xba>
 8009240:	4b25      	ldr	r3, [pc, #148]	; (80092d8 <__swsetup_r+0xd4>)
 8009242:	429c      	cmp	r4, r3
 8009244:	d101      	bne.n	800924a <__swsetup_r+0x46>
 8009246:	68ac      	ldr	r4, [r5, #8]
 8009248:	e7eb      	b.n	8009222 <__swsetup_r+0x1e>
 800924a:	4b24      	ldr	r3, [pc, #144]	; (80092dc <__swsetup_r+0xd8>)
 800924c:	429c      	cmp	r4, r3
 800924e:	bf08      	it	eq
 8009250:	68ec      	ldreq	r4, [r5, #12]
 8009252:	e7e6      	b.n	8009222 <__swsetup_r+0x1e>
 8009254:	0758      	lsls	r0, r3, #29
 8009256:	d512      	bpl.n	800927e <__swsetup_r+0x7a>
 8009258:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800925a:	b141      	cbz	r1, 800926e <__swsetup_r+0x6a>
 800925c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009260:	4299      	cmp	r1, r3
 8009262:	d002      	beq.n	800926a <__swsetup_r+0x66>
 8009264:	4630      	mov	r0, r6
 8009266:	f7ff fa41 	bl	80086ec <_free_r>
 800926a:	2300      	movs	r3, #0
 800926c:	6363      	str	r3, [r4, #52]	; 0x34
 800926e:	89a3      	ldrh	r3, [r4, #12]
 8009270:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009274:	81a3      	strh	r3, [r4, #12]
 8009276:	2300      	movs	r3, #0
 8009278:	6063      	str	r3, [r4, #4]
 800927a:	6923      	ldr	r3, [r4, #16]
 800927c:	6023      	str	r3, [r4, #0]
 800927e:	89a3      	ldrh	r3, [r4, #12]
 8009280:	f043 0308 	orr.w	r3, r3, #8
 8009284:	81a3      	strh	r3, [r4, #12]
 8009286:	6923      	ldr	r3, [r4, #16]
 8009288:	b94b      	cbnz	r3, 800929e <__swsetup_r+0x9a>
 800928a:	89a3      	ldrh	r3, [r4, #12]
 800928c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009290:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009294:	d003      	beq.n	800929e <__swsetup_r+0x9a>
 8009296:	4621      	mov	r1, r4
 8009298:	4630      	mov	r0, r6
 800929a:	f000 fa09 	bl	80096b0 <__smakebuf_r>
 800929e:	89a0      	ldrh	r0, [r4, #12]
 80092a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80092a4:	f010 0301 	ands.w	r3, r0, #1
 80092a8:	d00a      	beq.n	80092c0 <__swsetup_r+0xbc>
 80092aa:	2300      	movs	r3, #0
 80092ac:	60a3      	str	r3, [r4, #8]
 80092ae:	6963      	ldr	r3, [r4, #20]
 80092b0:	425b      	negs	r3, r3
 80092b2:	61a3      	str	r3, [r4, #24]
 80092b4:	6923      	ldr	r3, [r4, #16]
 80092b6:	b943      	cbnz	r3, 80092ca <__swsetup_r+0xc6>
 80092b8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80092bc:	d1ba      	bne.n	8009234 <__swsetup_r+0x30>
 80092be:	bd70      	pop	{r4, r5, r6, pc}
 80092c0:	0781      	lsls	r1, r0, #30
 80092c2:	bf58      	it	pl
 80092c4:	6963      	ldrpl	r3, [r4, #20]
 80092c6:	60a3      	str	r3, [r4, #8]
 80092c8:	e7f4      	b.n	80092b4 <__swsetup_r+0xb0>
 80092ca:	2000      	movs	r0, #0
 80092cc:	e7f7      	b.n	80092be <__swsetup_r+0xba>
 80092ce:	bf00      	nop
 80092d0:	200000a8 	.word	0x200000a8
 80092d4:	08009df4 	.word	0x08009df4
 80092d8:	08009e14 	.word	0x08009e14
 80092dc:	08009dd4 	.word	0x08009dd4

080092e0 <abort>:
 80092e0:	b508      	push	{r3, lr}
 80092e2:	2006      	movs	r0, #6
 80092e4:	f000 fab0 	bl	8009848 <raise>
 80092e8:	2001      	movs	r0, #1
 80092ea:	f7f8 f913 	bl	8001514 <_exit>
	...

080092f0 <__sflush_r>:
 80092f0:	898a      	ldrh	r2, [r1, #12]
 80092f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092f6:	4605      	mov	r5, r0
 80092f8:	0710      	lsls	r0, r2, #28
 80092fa:	460c      	mov	r4, r1
 80092fc:	d458      	bmi.n	80093b0 <__sflush_r+0xc0>
 80092fe:	684b      	ldr	r3, [r1, #4]
 8009300:	2b00      	cmp	r3, #0
 8009302:	dc05      	bgt.n	8009310 <__sflush_r+0x20>
 8009304:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009306:	2b00      	cmp	r3, #0
 8009308:	dc02      	bgt.n	8009310 <__sflush_r+0x20>
 800930a:	2000      	movs	r0, #0
 800930c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009310:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009312:	2e00      	cmp	r6, #0
 8009314:	d0f9      	beq.n	800930a <__sflush_r+0x1a>
 8009316:	2300      	movs	r3, #0
 8009318:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800931c:	682f      	ldr	r7, [r5, #0]
 800931e:	602b      	str	r3, [r5, #0]
 8009320:	d032      	beq.n	8009388 <__sflush_r+0x98>
 8009322:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009324:	89a3      	ldrh	r3, [r4, #12]
 8009326:	075a      	lsls	r2, r3, #29
 8009328:	d505      	bpl.n	8009336 <__sflush_r+0x46>
 800932a:	6863      	ldr	r3, [r4, #4]
 800932c:	1ac0      	subs	r0, r0, r3
 800932e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009330:	b10b      	cbz	r3, 8009336 <__sflush_r+0x46>
 8009332:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009334:	1ac0      	subs	r0, r0, r3
 8009336:	2300      	movs	r3, #0
 8009338:	4602      	mov	r2, r0
 800933a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800933c:	6a21      	ldr	r1, [r4, #32]
 800933e:	4628      	mov	r0, r5
 8009340:	47b0      	blx	r6
 8009342:	1c43      	adds	r3, r0, #1
 8009344:	89a3      	ldrh	r3, [r4, #12]
 8009346:	d106      	bne.n	8009356 <__sflush_r+0x66>
 8009348:	6829      	ldr	r1, [r5, #0]
 800934a:	291d      	cmp	r1, #29
 800934c:	d82c      	bhi.n	80093a8 <__sflush_r+0xb8>
 800934e:	4a2a      	ldr	r2, [pc, #168]	; (80093f8 <__sflush_r+0x108>)
 8009350:	40ca      	lsrs	r2, r1
 8009352:	07d6      	lsls	r6, r2, #31
 8009354:	d528      	bpl.n	80093a8 <__sflush_r+0xb8>
 8009356:	2200      	movs	r2, #0
 8009358:	6062      	str	r2, [r4, #4]
 800935a:	04d9      	lsls	r1, r3, #19
 800935c:	6922      	ldr	r2, [r4, #16]
 800935e:	6022      	str	r2, [r4, #0]
 8009360:	d504      	bpl.n	800936c <__sflush_r+0x7c>
 8009362:	1c42      	adds	r2, r0, #1
 8009364:	d101      	bne.n	800936a <__sflush_r+0x7a>
 8009366:	682b      	ldr	r3, [r5, #0]
 8009368:	b903      	cbnz	r3, 800936c <__sflush_r+0x7c>
 800936a:	6560      	str	r0, [r4, #84]	; 0x54
 800936c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800936e:	602f      	str	r7, [r5, #0]
 8009370:	2900      	cmp	r1, #0
 8009372:	d0ca      	beq.n	800930a <__sflush_r+0x1a>
 8009374:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009378:	4299      	cmp	r1, r3
 800937a:	d002      	beq.n	8009382 <__sflush_r+0x92>
 800937c:	4628      	mov	r0, r5
 800937e:	f7ff f9b5 	bl	80086ec <_free_r>
 8009382:	2000      	movs	r0, #0
 8009384:	6360      	str	r0, [r4, #52]	; 0x34
 8009386:	e7c1      	b.n	800930c <__sflush_r+0x1c>
 8009388:	6a21      	ldr	r1, [r4, #32]
 800938a:	2301      	movs	r3, #1
 800938c:	4628      	mov	r0, r5
 800938e:	47b0      	blx	r6
 8009390:	1c41      	adds	r1, r0, #1
 8009392:	d1c7      	bne.n	8009324 <__sflush_r+0x34>
 8009394:	682b      	ldr	r3, [r5, #0]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d0c4      	beq.n	8009324 <__sflush_r+0x34>
 800939a:	2b1d      	cmp	r3, #29
 800939c:	d001      	beq.n	80093a2 <__sflush_r+0xb2>
 800939e:	2b16      	cmp	r3, #22
 80093a0:	d101      	bne.n	80093a6 <__sflush_r+0xb6>
 80093a2:	602f      	str	r7, [r5, #0]
 80093a4:	e7b1      	b.n	800930a <__sflush_r+0x1a>
 80093a6:	89a3      	ldrh	r3, [r4, #12]
 80093a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093ac:	81a3      	strh	r3, [r4, #12]
 80093ae:	e7ad      	b.n	800930c <__sflush_r+0x1c>
 80093b0:	690f      	ldr	r7, [r1, #16]
 80093b2:	2f00      	cmp	r7, #0
 80093b4:	d0a9      	beq.n	800930a <__sflush_r+0x1a>
 80093b6:	0793      	lsls	r3, r2, #30
 80093b8:	680e      	ldr	r6, [r1, #0]
 80093ba:	bf08      	it	eq
 80093bc:	694b      	ldreq	r3, [r1, #20]
 80093be:	600f      	str	r7, [r1, #0]
 80093c0:	bf18      	it	ne
 80093c2:	2300      	movne	r3, #0
 80093c4:	eba6 0807 	sub.w	r8, r6, r7
 80093c8:	608b      	str	r3, [r1, #8]
 80093ca:	f1b8 0f00 	cmp.w	r8, #0
 80093ce:	dd9c      	ble.n	800930a <__sflush_r+0x1a>
 80093d0:	6a21      	ldr	r1, [r4, #32]
 80093d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80093d4:	4643      	mov	r3, r8
 80093d6:	463a      	mov	r2, r7
 80093d8:	4628      	mov	r0, r5
 80093da:	47b0      	blx	r6
 80093dc:	2800      	cmp	r0, #0
 80093de:	dc06      	bgt.n	80093ee <__sflush_r+0xfe>
 80093e0:	89a3      	ldrh	r3, [r4, #12]
 80093e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093e6:	81a3      	strh	r3, [r4, #12]
 80093e8:	f04f 30ff 	mov.w	r0, #4294967295
 80093ec:	e78e      	b.n	800930c <__sflush_r+0x1c>
 80093ee:	4407      	add	r7, r0
 80093f0:	eba8 0800 	sub.w	r8, r8, r0
 80093f4:	e7e9      	b.n	80093ca <__sflush_r+0xda>
 80093f6:	bf00      	nop
 80093f8:	20400001 	.word	0x20400001

080093fc <_fflush_r>:
 80093fc:	b538      	push	{r3, r4, r5, lr}
 80093fe:	690b      	ldr	r3, [r1, #16]
 8009400:	4605      	mov	r5, r0
 8009402:	460c      	mov	r4, r1
 8009404:	b913      	cbnz	r3, 800940c <_fflush_r+0x10>
 8009406:	2500      	movs	r5, #0
 8009408:	4628      	mov	r0, r5
 800940a:	bd38      	pop	{r3, r4, r5, pc}
 800940c:	b118      	cbz	r0, 8009416 <_fflush_r+0x1a>
 800940e:	6983      	ldr	r3, [r0, #24]
 8009410:	b90b      	cbnz	r3, 8009416 <_fflush_r+0x1a>
 8009412:	f000 f887 	bl	8009524 <__sinit>
 8009416:	4b14      	ldr	r3, [pc, #80]	; (8009468 <_fflush_r+0x6c>)
 8009418:	429c      	cmp	r4, r3
 800941a:	d11b      	bne.n	8009454 <_fflush_r+0x58>
 800941c:	686c      	ldr	r4, [r5, #4]
 800941e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d0ef      	beq.n	8009406 <_fflush_r+0xa>
 8009426:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009428:	07d0      	lsls	r0, r2, #31
 800942a:	d404      	bmi.n	8009436 <_fflush_r+0x3a>
 800942c:	0599      	lsls	r1, r3, #22
 800942e:	d402      	bmi.n	8009436 <_fflush_r+0x3a>
 8009430:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009432:	f000 f915 	bl	8009660 <__retarget_lock_acquire_recursive>
 8009436:	4628      	mov	r0, r5
 8009438:	4621      	mov	r1, r4
 800943a:	f7ff ff59 	bl	80092f0 <__sflush_r>
 800943e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009440:	07da      	lsls	r2, r3, #31
 8009442:	4605      	mov	r5, r0
 8009444:	d4e0      	bmi.n	8009408 <_fflush_r+0xc>
 8009446:	89a3      	ldrh	r3, [r4, #12]
 8009448:	059b      	lsls	r3, r3, #22
 800944a:	d4dd      	bmi.n	8009408 <_fflush_r+0xc>
 800944c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800944e:	f000 f908 	bl	8009662 <__retarget_lock_release_recursive>
 8009452:	e7d9      	b.n	8009408 <_fflush_r+0xc>
 8009454:	4b05      	ldr	r3, [pc, #20]	; (800946c <_fflush_r+0x70>)
 8009456:	429c      	cmp	r4, r3
 8009458:	d101      	bne.n	800945e <_fflush_r+0x62>
 800945a:	68ac      	ldr	r4, [r5, #8]
 800945c:	e7df      	b.n	800941e <_fflush_r+0x22>
 800945e:	4b04      	ldr	r3, [pc, #16]	; (8009470 <_fflush_r+0x74>)
 8009460:	429c      	cmp	r4, r3
 8009462:	bf08      	it	eq
 8009464:	68ec      	ldreq	r4, [r5, #12]
 8009466:	e7da      	b.n	800941e <_fflush_r+0x22>
 8009468:	08009df4 	.word	0x08009df4
 800946c:	08009e14 	.word	0x08009e14
 8009470:	08009dd4 	.word	0x08009dd4

08009474 <std>:
 8009474:	2300      	movs	r3, #0
 8009476:	b510      	push	{r4, lr}
 8009478:	4604      	mov	r4, r0
 800947a:	e9c0 3300 	strd	r3, r3, [r0]
 800947e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009482:	6083      	str	r3, [r0, #8]
 8009484:	8181      	strh	r1, [r0, #12]
 8009486:	6643      	str	r3, [r0, #100]	; 0x64
 8009488:	81c2      	strh	r2, [r0, #14]
 800948a:	6183      	str	r3, [r0, #24]
 800948c:	4619      	mov	r1, r3
 800948e:	2208      	movs	r2, #8
 8009490:	305c      	adds	r0, #92	; 0x5c
 8009492:	f7fe ffe3 	bl	800845c <memset>
 8009496:	4b05      	ldr	r3, [pc, #20]	; (80094ac <std+0x38>)
 8009498:	6263      	str	r3, [r4, #36]	; 0x24
 800949a:	4b05      	ldr	r3, [pc, #20]	; (80094b0 <std+0x3c>)
 800949c:	62a3      	str	r3, [r4, #40]	; 0x28
 800949e:	4b05      	ldr	r3, [pc, #20]	; (80094b4 <std+0x40>)
 80094a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80094a2:	4b05      	ldr	r3, [pc, #20]	; (80094b8 <std+0x44>)
 80094a4:	6224      	str	r4, [r4, #32]
 80094a6:	6323      	str	r3, [r4, #48]	; 0x30
 80094a8:	bd10      	pop	{r4, pc}
 80094aa:	bf00      	nop
 80094ac:	08009881 	.word	0x08009881
 80094b0:	080098a3 	.word	0x080098a3
 80094b4:	080098db 	.word	0x080098db
 80094b8:	080098ff 	.word	0x080098ff

080094bc <_cleanup_r>:
 80094bc:	4901      	ldr	r1, [pc, #4]	; (80094c4 <_cleanup_r+0x8>)
 80094be:	f000 b8af 	b.w	8009620 <_fwalk_reent>
 80094c2:	bf00      	nop
 80094c4:	080093fd 	.word	0x080093fd

080094c8 <__sfmoreglue>:
 80094c8:	b570      	push	{r4, r5, r6, lr}
 80094ca:	2268      	movs	r2, #104	; 0x68
 80094cc:	1e4d      	subs	r5, r1, #1
 80094ce:	4355      	muls	r5, r2
 80094d0:	460e      	mov	r6, r1
 80094d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80094d6:	f7ff f975 	bl	80087c4 <_malloc_r>
 80094da:	4604      	mov	r4, r0
 80094dc:	b140      	cbz	r0, 80094f0 <__sfmoreglue+0x28>
 80094de:	2100      	movs	r1, #0
 80094e0:	e9c0 1600 	strd	r1, r6, [r0]
 80094e4:	300c      	adds	r0, #12
 80094e6:	60a0      	str	r0, [r4, #8]
 80094e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80094ec:	f7fe ffb6 	bl	800845c <memset>
 80094f0:	4620      	mov	r0, r4
 80094f2:	bd70      	pop	{r4, r5, r6, pc}

080094f4 <__sfp_lock_acquire>:
 80094f4:	4801      	ldr	r0, [pc, #4]	; (80094fc <__sfp_lock_acquire+0x8>)
 80094f6:	f000 b8b3 	b.w	8009660 <__retarget_lock_acquire_recursive>
 80094fa:	bf00      	nop
 80094fc:	20000325 	.word	0x20000325

08009500 <__sfp_lock_release>:
 8009500:	4801      	ldr	r0, [pc, #4]	; (8009508 <__sfp_lock_release+0x8>)
 8009502:	f000 b8ae 	b.w	8009662 <__retarget_lock_release_recursive>
 8009506:	bf00      	nop
 8009508:	20000325 	.word	0x20000325

0800950c <__sinit_lock_acquire>:
 800950c:	4801      	ldr	r0, [pc, #4]	; (8009514 <__sinit_lock_acquire+0x8>)
 800950e:	f000 b8a7 	b.w	8009660 <__retarget_lock_acquire_recursive>
 8009512:	bf00      	nop
 8009514:	20000326 	.word	0x20000326

08009518 <__sinit_lock_release>:
 8009518:	4801      	ldr	r0, [pc, #4]	; (8009520 <__sinit_lock_release+0x8>)
 800951a:	f000 b8a2 	b.w	8009662 <__retarget_lock_release_recursive>
 800951e:	bf00      	nop
 8009520:	20000326 	.word	0x20000326

08009524 <__sinit>:
 8009524:	b510      	push	{r4, lr}
 8009526:	4604      	mov	r4, r0
 8009528:	f7ff fff0 	bl	800950c <__sinit_lock_acquire>
 800952c:	69a3      	ldr	r3, [r4, #24]
 800952e:	b11b      	cbz	r3, 8009538 <__sinit+0x14>
 8009530:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009534:	f7ff bff0 	b.w	8009518 <__sinit_lock_release>
 8009538:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800953c:	6523      	str	r3, [r4, #80]	; 0x50
 800953e:	4b13      	ldr	r3, [pc, #76]	; (800958c <__sinit+0x68>)
 8009540:	4a13      	ldr	r2, [pc, #76]	; (8009590 <__sinit+0x6c>)
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	62a2      	str	r2, [r4, #40]	; 0x28
 8009546:	42a3      	cmp	r3, r4
 8009548:	bf04      	itt	eq
 800954a:	2301      	moveq	r3, #1
 800954c:	61a3      	streq	r3, [r4, #24]
 800954e:	4620      	mov	r0, r4
 8009550:	f000 f820 	bl	8009594 <__sfp>
 8009554:	6060      	str	r0, [r4, #4]
 8009556:	4620      	mov	r0, r4
 8009558:	f000 f81c 	bl	8009594 <__sfp>
 800955c:	60a0      	str	r0, [r4, #8]
 800955e:	4620      	mov	r0, r4
 8009560:	f000 f818 	bl	8009594 <__sfp>
 8009564:	2200      	movs	r2, #0
 8009566:	60e0      	str	r0, [r4, #12]
 8009568:	2104      	movs	r1, #4
 800956a:	6860      	ldr	r0, [r4, #4]
 800956c:	f7ff ff82 	bl	8009474 <std>
 8009570:	68a0      	ldr	r0, [r4, #8]
 8009572:	2201      	movs	r2, #1
 8009574:	2109      	movs	r1, #9
 8009576:	f7ff ff7d 	bl	8009474 <std>
 800957a:	68e0      	ldr	r0, [r4, #12]
 800957c:	2202      	movs	r2, #2
 800957e:	2112      	movs	r1, #18
 8009580:	f7ff ff78 	bl	8009474 <std>
 8009584:	2301      	movs	r3, #1
 8009586:	61a3      	str	r3, [r4, #24]
 8009588:	e7d2      	b.n	8009530 <__sinit+0xc>
 800958a:	bf00      	nop
 800958c:	08009bec 	.word	0x08009bec
 8009590:	080094bd 	.word	0x080094bd

08009594 <__sfp>:
 8009594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009596:	4607      	mov	r7, r0
 8009598:	f7ff ffac 	bl	80094f4 <__sfp_lock_acquire>
 800959c:	4b1e      	ldr	r3, [pc, #120]	; (8009618 <__sfp+0x84>)
 800959e:	681e      	ldr	r6, [r3, #0]
 80095a0:	69b3      	ldr	r3, [r6, #24]
 80095a2:	b913      	cbnz	r3, 80095aa <__sfp+0x16>
 80095a4:	4630      	mov	r0, r6
 80095a6:	f7ff ffbd 	bl	8009524 <__sinit>
 80095aa:	3648      	adds	r6, #72	; 0x48
 80095ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80095b0:	3b01      	subs	r3, #1
 80095b2:	d503      	bpl.n	80095bc <__sfp+0x28>
 80095b4:	6833      	ldr	r3, [r6, #0]
 80095b6:	b30b      	cbz	r3, 80095fc <__sfp+0x68>
 80095b8:	6836      	ldr	r6, [r6, #0]
 80095ba:	e7f7      	b.n	80095ac <__sfp+0x18>
 80095bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80095c0:	b9d5      	cbnz	r5, 80095f8 <__sfp+0x64>
 80095c2:	4b16      	ldr	r3, [pc, #88]	; (800961c <__sfp+0x88>)
 80095c4:	60e3      	str	r3, [r4, #12]
 80095c6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80095ca:	6665      	str	r5, [r4, #100]	; 0x64
 80095cc:	f000 f847 	bl	800965e <__retarget_lock_init_recursive>
 80095d0:	f7ff ff96 	bl	8009500 <__sfp_lock_release>
 80095d4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80095d8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80095dc:	6025      	str	r5, [r4, #0]
 80095de:	61a5      	str	r5, [r4, #24]
 80095e0:	2208      	movs	r2, #8
 80095e2:	4629      	mov	r1, r5
 80095e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80095e8:	f7fe ff38 	bl	800845c <memset>
 80095ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80095f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80095f4:	4620      	mov	r0, r4
 80095f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095f8:	3468      	adds	r4, #104	; 0x68
 80095fa:	e7d9      	b.n	80095b0 <__sfp+0x1c>
 80095fc:	2104      	movs	r1, #4
 80095fe:	4638      	mov	r0, r7
 8009600:	f7ff ff62 	bl	80094c8 <__sfmoreglue>
 8009604:	4604      	mov	r4, r0
 8009606:	6030      	str	r0, [r6, #0]
 8009608:	2800      	cmp	r0, #0
 800960a:	d1d5      	bne.n	80095b8 <__sfp+0x24>
 800960c:	f7ff ff78 	bl	8009500 <__sfp_lock_release>
 8009610:	230c      	movs	r3, #12
 8009612:	603b      	str	r3, [r7, #0]
 8009614:	e7ee      	b.n	80095f4 <__sfp+0x60>
 8009616:	bf00      	nop
 8009618:	08009bec 	.word	0x08009bec
 800961c:	ffff0001 	.word	0xffff0001

08009620 <_fwalk_reent>:
 8009620:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009624:	4606      	mov	r6, r0
 8009626:	4688      	mov	r8, r1
 8009628:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800962c:	2700      	movs	r7, #0
 800962e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009632:	f1b9 0901 	subs.w	r9, r9, #1
 8009636:	d505      	bpl.n	8009644 <_fwalk_reent+0x24>
 8009638:	6824      	ldr	r4, [r4, #0]
 800963a:	2c00      	cmp	r4, #0
 800963c:	d1f7      	bne.n	800962e <_fwalk_reent+0xe>
 800963e:	4638      	mov	r0, r7
 8009640:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009644:	89ab      	ldrh	r3, [r5, #12]
 8009646:	2b01      	cmp	r3, #1
 8009648:	d907      	bls.n	800965a <_fwalk_reent+0x3a>
 800964a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800964e:	3301      	adds	r3, #1
 8009650:	d003      	beq.n	800965a <_fwalk_reent+0x3a>
 8009652:	4629      	mov	r1, r5
 8009654:	4630      	mov	r0, r6
 8009656:	47c0      	blx	r8
 8009658:	4307      	orrs	r7, r0
 800965a:	3568      	adds	r5, #104	; 0x68
 800965c:	e7e9      	b.n	8009632 <_fwalk_reent+0x12>

0800965e <__retarget_lock_init_recursive>:
 800965e:	4770      	bx	lr

08009660 <__retarget_lock_acquire_recursive>:
 8009660:	4770      	bx	lr

08009662 <__retarget_lock_release_recursive>:
 8009662:	4770      	bx	lr

08009664 <__swhatbuf_r>:
 8009664:	b570      	push	{r4, r5, r6, lr}
 8009666:	460e      	mov	r6, r1
 8009668:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800966c:	2900      	cmp	r1, #0
 800966e:	b096      	sub	sp, #88	; 0x58
 8009670:	4614      	mov	r4, r2
 8009672:	461d      	mov	r5, r3
 8009674:	da08      	bge.n	8009688 <__swhatbuf_r+0x24>
 8009676:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800967a:	2200      	movs	r2, #0
 800967c:	602a      	str	r2, [r5, #0]
 800967e:	061a      	lsls	r2, r3, #24
 8009680:	d410      	bmi.n	80096a4 <__swhatbuf_r+0x40>
 8009682:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009686:	e00e      	b.n	80096a6 <__swhatbuf_r+0x42>
 8009688:	466a      	mov	r2, sp
 800968a:	f000 f95f 	bl	800994c <_fstat_r>
 800968e:	2800      	cmp	r0, #0
 8009690:	dbf1      	blt.n	8009676 <__swhatbuf_r+0x12>
 8009692:	9a01      	ldr	r2, [sp, #4]
 8009694:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009698:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800969c:	425a      	negs	r2, r3
 800969e:	415a      	adcs	r2, r3
 80096a0:	602a      	str	r2, [r5, #0]
 80096a2:	e7ee      	b.n	8009682 <__swhatbuf_r+0x1e>
 80096a4:	2340      	movs	r3, #64	; 0x40
 80096a6:	2000      	movs	r0, #0
 80096a8:	6023      	str	r3, [r4, #0]
 80096aa:	b016      	add	sp, #88	; 0x58
 80096ac:	bd70      	pop	{r4, r5, r6, pc}
	...

080096b0 <__smakebuf_r>:
 80096b0:	898b      	ldrh	r3, [r1, #12]
 80096b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80096b4:	079d      	lsls	r5, r3, #30
 80096b6:	4606      	mov	r6, r0
 80096b8:	460c      	mov	r4, r1
 80096ba:	d507      	bpl.n	80096cc <__smakebuf_r+0x1c>
 80096bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80096c0:	6023      	str	r3, [r4, #0]
 80096c2:	6123      	str	r3, [r4, #16]
 80096c4:	2301      	movs	r3, #1
 80096c6:	6163      	str	r3, [r4, #20]
 80096c8:	b002      	add	sp, #8
 80096ca:	bd70      	pop	{r4, r5, r6, pc}
 80096cc:	ab01      	add	r3, sp, #4
 80096ce:	466a      	mov	r2, sp
 80096d0:	f7ff ffc8 	bl	8009664 <__swhatbuf_r>
 80096d4:	9900      	ldr	r1, [sp, #0]
 80096d6:	4605      	mov	r5, r0
 80096d8:	4630      	mov	r0, r6
 80096da:	f7ff f873 	bl	80087c4 <_malloc_r>
 80096de:	b948      	cbnz	r0, 80096f4 <__smakebuf_r+0x44>
 80096e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096e4:	059a      	lsls	r2, r3, #22
 80096e6:	d4ef      	bmi.n	80096c8 <__smakebuf_r+0x18>
 80096e8:	f023 0303 	bic.w	r3, r3, #3
 80096ec:	f043 0302 	orr.w	r3, r3, #2
 80096f0:	81a3      	strh	r3, [r4, #12]
 80096f2:	e7e3      	b.n	80096bc <__smakebuf_r+0xc>
 80096f4:	4b0d      	ldr	r3, [pc, #52]	; (800972c <__smakebuf_r+0x7c>)
 80096f6:	62b3      	str	r3, [r6, #40]	; 0x28
 80096f8:	89a3      	ldrh	r3, [r4, #12]
 80096fa:	6020      	str	r0, [r4, #0]
 80096fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009700:	81a3      	strh	r3, [r4, #12]
 8009702:	9b00      	ldr	r3, [sp, #0]
 8009704:	6163      	str	r3, [r4, #20]
 8009706:	9b01      	ldr	r3, [sp, #4]
 8009708:	6120      	str	r0, [r4, #16]
 800970a:	b15b      	cbz	r3, 8009724 <__smakebuf_r+0x74>
 800970c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009710:	4630      	mov	r0, r6
 8009712:	f000 f92d 	bl	8009970 <_isatty_r>
 8009716:	b128      	cbz	r0, 8009724 <__smakebuf_r+0x74>
 8009718:	89a3      	ldrh	r3, [r4, #12]
 800971a:	f023 0303 	bic.w	r3, r3, #3
 800971e:	f043 0301 	orr.w	r3, r3, #1
 8009722:	81a3      	strh	r3, [r4, #12]
 8009724:	89a0      	ldrh	r0, [r4, #12]
 8009726:	4305      	orrs	r5, r0
 8009728:	81a5      	strh	r5, [r4, #12]
 800972a:	e7cd      	b.n	80096c8 <__smakebuf_r+0x18>
 800972c:	080094bd 	.word	0x080094bd

08009730 <memcpy>:
 8009730:	440a      	add	r2, r1
 8009732:	4291      	cmp	r1, r2
 8009734:	f100 33ff 	add.w	r3, r0, #4294967295
 8009738:	d100      	bne.n	800973c <memcpy+0xc>
 800973a:	4770      	bx	lr
 800973c:	b510      	push	{r4, lr}
 800973e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009742:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009746:	4291      	cmp	r1, r2
 8009748:	d1f9      	bne.n	800973e <memcpy+0xe>
 800974a:	bd10      	pop	{r4, pc}

0800974c <memmove>:
 800974c:	4288      	cmp	r0, r1
 800974e:	b510      	push	{r4, lr}
 8009750:	eb01 0402 	add.w	r4, r1, r2
 8009754:	d902      	bls.n	800975c <memmove+0x10>
 8009756:	4284      	cmp	r4, r0
 8009758:	4623      	mov	r3, r4
 800975a:	d807      	bhi.n	800976c <memmove+0x20>
 800975c:	1e43      	subs	r3, r0, #1
 800975e:	42a1      	cmp	r1, r4
 8009760:	d008      	beq.n	8009774 <memmove+0x28>
 8009762:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009766:	f803 2f01 	strb.w	r2, [r3, #1]!
 800976a:	e7f8      	b.n	800975e <memmove+0x12>
 800976c:	4402      	add	r2, r0
 800976e:	4601      	mov	r1, r0
 8009770:	428a      	cmp	r2, r1
 8009772:	d100      	bne.n	8009776 <memmove+0x2a>
 8009774:	bd10      	pop	{r4, pc}
 8009776:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800977a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800977e:	e7f7      	b.n	8009770 <memmove+0x24>

08009780 <__malloc_lock>:
 8009780:	4801      	ldr	r0, [pc, #4]	; (8009788 <__malloc_lock+0x8>)
 8009782:	f7ff bf6d 	b.w	8009660 <__retarget_lock_acquire_recursive>
 8009786:	bf00      	nop
 8009788:	20000324 	.word	0x20000324

0800978c <__malloc_unlock>:
 800978c:	4801      	ldr	r0, [pc, #4]	; (8009794 <__malloc_unlock+0x8>)
 800978e:	f7ff bf68 	b.w	8009662 <__retarget_lock_release_recursive>
 8009792:	bf00      	nop
 8009794:	20000324 	.word	0x20000324

08009798 <_realloc_r>:
 8009798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800979c:	4680      	mov	r8, r0
 800979e:	4614      	mov	r4, r2
 80097a0:	460e      	mov	r6, r1
 80097a2:	b921      	cbnz	r1, 80097ae <_realloc_r+0x16>
 80097a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80097a8:	4611      	mov	r1, r2
 80097aa:	f7ff b80b 	b.w	80087c4 <_malloc_r>
 80097ae:	b92a      	cbnz	r2, 80097bc <_realloc_r+0x24>
 80097b0:	f7fe ff9c 	bl	80086ec <_free_r>
 80097b4:	4625      	mov	r5, r4
 80097b6:	4628      	mov	r0, r5
 80097b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097bc:	f000 f8fa 	bl	80099b4 <_malloc_usable_size_r>
 80097c0:	4284      	cmp	r4, r0
 80097c2:	4607      	mov	r7, r0
 80097c4:	d802      	bhi.n	80097cc <_realloc_r+0x34>
 80097c6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80097ca:	d812      	bhi.n	80097f2 <_realloc_r+0x5a>
 80097cc:	4621      	mov	r1, r4
 80097ce:	4640      	mov	r0, r8
 80097d0:	f7fe fff8 	bl	80087c4 <_malloc_r>
 80097d4:	4605      	mov	r5, r0
 80097d6:	2800      	cmp	r0, #0
 80097d8:	d0ed      	beq.n	80097b6 <_realloc_r+0x1e>
 80097da:	42bc      	cmp	r4, r7
 80097dc:	4622      	mov	r2, r4
 80097de:	4631      	mov	r1, r6
 80097e0:	bf28      	it	cs
 80097e2:	463a      	movcs	r2, r7
 80097e4:	f7ff ffa4 	bl	8009730 <memcpy>
 80097e8:	4631      	mov	r1, r6
 80097ea:	4640      	mov	r0, r8
 80097ec:	f7fe ff7e 	bl	80086ec <_free_r>
 80097f0:	e7e1      	b.n	80097b6 <_realloc_r+0x1e>
 80097f2:	4635      	mov	r5, r6
 80097f4:	e7df      	b.n	80097b6 <_realloc_r+0x1e>

080097f6 <_raise_r>:
 80097f6:	291f      	cmp	r1, #31
 80097f8:	b538      	push	{r3, r4, r5, lr}
 80097fa:	4604      	mov	r4, r0
 80097fc:	460d      	mov	r5, r1
 80097fe:	d904      	bls.n	800980a <_raise_r+0x14>
 8009800:	2316      	movs	r3, #22
 8009802:	6003      	str	r3, [r0, #0]
 8009804:	f04f 30ff 	mov.w	r0, #4294967295
 8009808:	bd38      	pop	{r3, r4, r5, pc}
 800980a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800980c:	b112      	cbz	r2, 8009814 <_raise_r+0x1e>
 800980e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009812:	b94b      	cbnz	r3, 8009828 <_raise_r+0x32>
 8009814:	4620      	mov	r0, r4
 8009816:	f000 f831 	bl	800987c <_getpid_r>
 800981a:	462a      	mov	r2, r5
 800981c:	4601      	mov	r1, r0
 800981e:	4620      	mov	r0, r4
 8009820:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009824:	f000 b818 	b.w	8009858 <_kill_r>
 8009828:	2b01      	cmp	r3, #1
 800982a:	d00a      	beq.n	8009842 <_raise_r+0x4c>
 800982c:	1c59      	adds	r1, r3, #1
 800982e:	d103      	bne.n	8009838 <_raise_r+0x42>
 8009830:	2316      	movs	r3, #22
 8009832:	6003      	str	r3, [r0, #0]
 8009834:	2001      	movs	r0, #1
 8009836:	e7e7      	b.n	8009808 <_raise_r+0x12>
 8009838:	2400      	movs	r4, #0
 800983a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800983e:	4628      	mov	r0, r5
 8009840:	4798      	blx	r3
 8009842:	2000      	movs	r0, #0
 8009844:	e7e0      	b.n	8009808 <_raise_r+0x12>
	...

08009848 <raise>:
 8009848:	4b02      	ldr	r3, [pc, #8]	; (8009854 <raise+0xc>)
 800984a:	4601      	mov	r1, r0
 800984c:	6818      	ldr	r0, [r3, #0]
 800984e:	f7ff bfd2 	b.w	80097f6 <_raise_r>
 8009852:	bf00      	nop
 8009854:	200000a8 	.word	0x200000a8

08009858 <_kill_r>:
 8009858:	b538      	push	{r3, r4, r5, lr}
 800985a:	4d07      	ldr	r5, [pc, #28]	; (8009878 <_kill_r+0x20>)
 800985c:	2300      	movs	r3, #0
 800985e:	4604      	mov	r4, r0
 8009860:	4608      	mov	r0, r1
 8009862:	4611      	mov	r1, r2
 8009864:	602b      	str	r3, [r5, #0]
 8009866:	f7f7 fe45 	bl	80014f4 <_kill>
 800986a:	1c43      	adds	r3, r0, #1
 800986c:	d102      	bne.n	8009874 <_kill_r+0x1c>
 800986e:	682b      	ldr	r3, [r5, #0]
 8009870:	b103      	cbz	r3, 8009874 <_kill_r+0x1c>
 8009872:	6023      	str	r3, [r4, #0]
 8009874:	bd38      	pop	{r3, r4, r5, pc}
 8009876:	bf00      	nop
 8009878:	20000328 	.word	0x20000328

0800987c <_getpid_r>:
 800987c:	f7f7 be32 	b.w	80014e4 <_getpid>

08009880 <__sread>:
 8009880:	b510      	push	{r4, lr}
 8009882:	460c      	mov	r4, r1
 8009884:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009888:	f000 f89c 	bl	80099c4 <_read_r>
 800988c:	2800      	cmp	r0, #0
 800988e:	bfab      	itete	ge
 8009890:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009892:	89a3      	ldrhlt	r3, [r4, #12]
 8009894:	181b      	addge	r3, r3, r0
 8009896:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800989a:	bfac      	ite	ge
 800989c:	6563      	strge	r3, [r4, #84]	; 0x54
 800989e:	81a3      	strhlt	r3, [r4, #12]
 80098a0:	bd10      	pop	{r4, pc}

080098a2 <__swrite>:
 80098a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098a6:	461f      	mov	r7, r3
 80098a8:	898b      	ldrh	r3, [r1, #12]
 80098aa:	05db      	lsls	r3, r3, #23
 80098ac:	4605      	mov	r5, r0
 80098ae:	460c      	mov	r4, r1
 80098b0:	4616      	mov	r6, r2
 80098b2:	d505      	bpl.n	80098c0 <__swrite+0x1e>
 80098b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098b8:	2302      	movs	r3, #2
 80098ba:	2200      	movs	r2, #0
 80098bc:	f000 f868 	bl	8009990 <_lseek_r>
 80098c0:	89a3      	ldrh	r3, [r4, #12]
 80098c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80098c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80098ca:	81a3      	strh	r3, [r4, #12]
 80098cc:	4632      	mov	r2, r6
 80098ce:	463b      	mov	r3, r7
 80098d0:	4628      	mov	r0, r5
 80098d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80098d6:	f000 b817 	b.w	8009908 <_write_r>

080098da <__sseek>:
 80098da:	b510      	push	{r4, lr}
 80098dc:	460c      	mov	r4, r1
 80098de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098e2:	f000 f855 	bl	8009990 <_lseek_r>
 80098e6:	1c43      	adds	r3, r0, #1
 80098e8:	89a3      	ldrh	r3, [r4, #12]
 80098ea:	bf15      	itete	ne
 80098ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80098ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80098f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80098f6:	81a3      	strheq	r3, [r4, #12]
 80098f8:	bf18      	it	ne
 80098fa:	81a3      	strhne	r3, [r4, #12]
 80098fc:	bd10      	pop	{r4, pc}

080098fe <__sclose>:
 80098fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009902:	f000 b813 	b.w	800992c <_close_r>
	...

08009908 <_write_r>:
 8009908:	b538      	push	{r3, r4, r5, lr}
 800990a:	4d07      	ldr	r5, [pc, #28]	; (8009928 <_write_r+0x20>)
 800990c:	4604      	mov	r4, r0
 800990e:	4608      	mov	r0, r1
 8009910:	4611      	mov	r1, r2
 8009912:	2200      	movs	r2, #0
 8009914:	602a      	str	r2, [r5, #0]
 8009916:	461a      	mov	r2, r3
 8009918:	f7f7 fe23 	bl	8001562 <_write>
 800991c:	1c43      	adds	r3, r0, #1
 800991e:	d102      	bne.n	8009926 <_write_r+0x1e>
 8009920:	682b      	ldr	r3, [r5, #0]
 8009922:	b103      	cbz	r3, 8009926 <_write_r+0x1e>
 8009924:	6023      	str	r3, [r4, #0]
 8009926:	bd38      	pop	{r3, r4, r5, pc}
 8009928:	20000328 	.word	0x20000328

0800992c <_close_r>:
 800992c:	b538      	push	{r3, r4, r5, lr}
 800992e:	4d06      	ldr	r5, [pc, #24]	; (8009948 <_close_r+0x1c>)
 8009930:	2300      	movs	r3, #0
 8009932:	4604      	mov	r4, r0
 8009934:	4608      	mov	r0, r1
 8009936:	602b      	str	r3, [r5, #0]
 8009938:	f7f7 fe2f 	bl	800159a <_close>
 800993c:	1c43      	adds	r3, r0, #1
 800993e:	d102      	bne.n	8009946 <_close_r+0x1a>
 8009940:	682b      	ldr	r3, [r5, #0]
 8009942:	b103      	cbz	r3, 8009946 <_close_r+0x1a>
 8009944:	6023      	str	r3, [r4, #0]
 8009946:	bd38      	pop	{r3, r4, r5, pc}
 8009948:	20000328 	.word	0x20000328

0800994c <_fstat_r>:
 800994c:	b538      	push	{r3, r4, r5, lr}
 800994e:	4d07      	ldr	r5, [pc, #28]	; (800996c <_fstat_r+0x20>)
 8009950:	2300      	movs	r3, #0
 8009952:	4604      	mov	r4, r0
 8009954:	4608      	mov	r0, r1
 8009956:	4611      	mov	r1, r2
 8009958:	602b      	str	r3, [r5, #0]
 800995a:	f7f7 fe2a 	bl	80015b2 <_fstat>
 800995e:	1c43      	adds	r3, r0, #1
 8009960:	d102      	bne.n	8009968 <_fstat_r+0x1c>
 8009962:	682b      	ldr	r3, [r5, #0]
 8009964:	b103      	cbz	r3, 8009968 <_fstat_r+0x1c>
 8009966:	6023      	str	r3, [r4, #0]
 8009968:	bd38      	pop	{r3, r4, r5, pc}
 800996a:	bf00      	nop
 800996c:	20000328 	.word	0x20000328

08009970 <_isatty_r>:
 8009970:	b538      	push	{r3, r4, r5, lr}
 8009972:	4d06      	ldr	r5, [pc, #24]	; (800998c <_isatty_r+0x1c>)
 8009974:	2300      	movs	r3, #0
 8009976:	4604      	mov	r4, r0
 8009978:	4608      	mov	r0, r1
 800997a:	602b      	str	r3, [r5, #0]
 800997c:	f7f7 fe29 	bl	80015d2 <_isatty>
 8009980:	1c43      	adds	r3, r0, #1
 8009982:	d102      	bne.n	800998a <_isatty_r+0x1a>
 8009984:	682b      	ldr	r3, [r5, #0]
 8009986:	b103      	cbz	r3, 800998a <_isatty_r+0x1a>
 8009988:	6023      	str	r3, [r4, #0]
 800998a:	bd38      	pop	{r3, r4, r5, pc}
 800998c:	20000328 	.word	0x20000328

08009990 <_lseek_r>:
 8009990:	b538      	push	{r3, r4, r5, lr}
 8009992:	4d07      	ldr	r5, [pc, #28]	; (80099b0 <_lseek_r+0x20>)
 8009994:	4604      	mov	r4, r0
 8009996:	4608      	mov	r0, r1
 8009998:	4611      	mov	r1, r2
 800999a:	2200      	movs	r2, #0
 800999c:	602a      	str	r2, [r5, #0]
 800999e:	461a      	mov	r2, r3
 80099a0:	f7f7 fe22 	bl	80015e8 <_lseek>
 80099a4:	1c43      	adds	r3, r0, #1
 80099a6:	d102      	bne.n	80099ae <_lseek_r+0x1e>
 80099a8:	682b      	ldr	r3, [r5, #0]
 80099aa:	b103      	cbz	r3, 80099ae <_lseek_r+0x1e>
 80099ac:	6023      	str	r3, [r4, #0]
 80099ae:	bd38      	pop	{r3, r4, r5, pc}
 80099b0:	20000328 	.word	0x20000328

080099b4 <_malloc_usable_size_r>:
 80099b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099b8:	1f18      	subs	r0, r3, #4
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	bfbc      	itt	lt
 80099be:	580b      	ldrlt	r3, [r1, r0]
 80099c0:	18c0      	addlt	r0, r0, r3
 80099c2:	4770      	bx	lr

080099c4 <_read_r>:
 80099c4:	b538      	push	{r3, r4, r5, lr}
 80099c6:	4d07      	ldr	r5, [pc, #28]	; (80099e4 <_read_r+0x20>)
 80099c8:	4604      	mov	r4, r0
 80099ca:	4608      	mov	r0, r1
 80099cc:	4611      	mov	r1, r2
 80099ce:	2200      	movs	r2, #0
 80099d0:	602a      	str	r2, [r5, #0]
 80099d2:	461a      	mov	r2, r3
 80099d4:	f7f7 fda8 	bl	8001528 <_read>
 80099d8:	1c43      	adds	r3, r0, #1
 80099da:	d102      	bne.n	80099e2 <_read_r+0x1e>
 80099dc:	682b      	ldr	r3, [r5, #0]
 80099de:	b103      	cbz	r3, 80099e2 <_read_r+0x1e>
 80099e0:	6023      	str	r3, [r4, #0]
 80099e2:	bd38      	pop	{r3, r4, r5, pc}
 80099e4:	20000328 	.word	0x20000328

080099e8 <_init>:
 80099e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099ea:	bf00      	nop
 80099ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099ee:	bc08      	pop	{r3}
 80099f0:	469e      	mov	lr, r3
 80099f2:	4770      	bx	lr

080099f4 <_fini>:
 80099f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099f6:	bf00      	nop
 80099f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099fa:	bc08      	pop	{r3}
 80099fc:	469e      	mov	lr, r3
 80099fe:	4770      	bx	lr
