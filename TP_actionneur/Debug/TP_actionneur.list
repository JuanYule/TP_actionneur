
TP_actionneur.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000073cc  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ec  080075ac  080075ac  000175ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007998  08007998  00020108  2**0
                  CONTENTS
  4 .ARM          00000008  08007998  08007998  00017998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080079a0  080079a0  00020108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080079a0  080079a0  000179a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080079a4  080079a4  000179a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000108  20000000  080079a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  20000108  08007ab0  00020108  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000260  08007ab0  00020260  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013d6a  00000000  00000000  00020138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025b2  00000000  00000000  00033ea2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010e0  00000000  00000000  00036458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ff8  00000000  00000000  00037538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027242  00000000  00000000  00038530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000132e9  00000000  00000000  0005f772  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fd377  00000000  00000000  00072a5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016fdd2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053bc  00000000  00000000  0016fe24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000108 	.word	0x20000108
 80001fc:	00000000 	.word	0x00000000
 8000200:	08007594 	.word	0x08007594

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000010c 	.word	0x2000010c
 800021c:	08007594 	.word	0x08007594

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b09e      	sub	sp, #120	; 0x78
 80005e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char	 	cmdBuffer[CMD_BUFFER_SIZE];
	int 		idx_cmd = 0;
 80005ea:	2300      	movs	r3, #0
 80005ec:	677b      	str	r3, [r7, #116]	; 0x74
	char* 		argv[MAX_ARGS];
	int		 	argc = 0;
 80005ee:	2300      	movs	r3, #0
 80005f0:	673b      	str	r3, [r7, #112]	; 0x70
	char*		token;
	int 		newCmdReady = 0;
 80005f2:	2300      	movs	r3, #0
 80005f4:	66bb      	str	r3, [r7, #104]	; 0x68
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f6:	f000 fd54 	bl	80010a2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fa:	f000 f965 	bl	80008c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fe:	f000 fab9 	bl	8000b74 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000602:	f000 f9ad 	bl	8000960 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8000606:	f000 fa69 	bl	8000adc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800060a:	2100      	movs	r1, #0
 800060c:	4898      	ldr	r0, [pc, #608]	; (8000870 <main+0x28c>)
 800060e:	f002 fa57 	bl	8002ac0 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1); // turn on complementary channel
 8000612:	2100      	movs	r1, #0
 8000614:	4896      	ldr	r0, [pc, #600]	; (8000870 <main+0x28c>)
 8000616:	f003 fa23 	bl	8003a60 <HAL_TIMEx_PWMN_Start>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800061a:	2104      	movs	r1, #4
 800061c:	4894      	ldr	r0, [pc, #592]	; (8000870 <main+0x28c>)
 800061e:	f002 fa4f 	bl	8002ac0 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2); // turn on complementary channel
 8000622:	2104      	movs	r1, #4
 8000624:	4892      	ldr	r0, [pc, #584]	; (8000870 <main+0x28c>)
 8000626:	f003 fa1b 	bl	8003a60 <HAL_TIMEx_PWMN_Start>


	memset(argv,NULL,MAX_ARGS*sizeof(char*));
 800062a:	1d3b      	adds	r3, r7, #4
 800062c:	2224      	movs	r2, #36	; 0x24
 800062e:	2100      	movs	r1, #0
 8000630:	4618      	mov	r0, r3
 8000632:	f005 fce9 	bl	8006008 <memset>
	memset(cmdBuffer,NULL,CMD_BUFFER_SIZE*sizeof(char));
 8000636:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800063a:	2240      	movs	r2, #64	; 0x40
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f005 fce2 	bl	8006008 <memset>
 8000644:	4b8b      	ldr	r3, [pc, #556]	; (8000874 <main+0x290>)
 8000646:	2200      	movs	r2, #0
 8000648:	701a      	strb	r2, [r3, #0]
	memset(uartRxBuffer,NULL,UART_RX_BUFFER_SIZE*sizeof(char));
	memset(uartTxBuffer,NULL,UART_TX_BUFFER_SIZE*sizeof(char));
 800064a:	2240      	movs	r2, #64	; 0x40
 800064c:	2100      	movs	r1, #0
 800064e:	488a      	ldr	r0, [pc, #552]	; (8000878 <main+0x294>)
 8000650:	f005 fcda 	bl	8006008 <memset>

	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8000654:	2201      	movs	r2, #1
 8000656:	4987      	ldr	r1, [pc, #540]	; (8000874 <main+0x290>)
 8000658:	4888      	ldr	r0, [pc, #544]	; (800087c <main+0x298>)
 800065a:	f003 fd17 	bl	800408c <HAL_UART_Receive_IT>
	HAL_Delay(10);
 800065e:	200a      	movs	r0, #10
 8000660:	f000 fd90 	bl	8001184 <HAL_Delay>
	HAL_UART_Transmit(&huart2, started, sizeof(started), HAL_MAX_DELAY);
 8000664:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000668:	2266      	movs	r2, #102	; 0x66
 800066a:	4985      	ldr	r1, [pc, #532]	; (8000880 <main+0x29c>)
 800066c:	4883      	ldr	r0, [pc, #524]	; (800087c <main+0x298>)
 800066e:	f003 fc76 	bl	8003f5e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8000672:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000676:	2218      	movs	r2, #24
 8000678:	4982      	ldr	r1, [pc, #520]	; (8000884 <main+0x2a0>)
 800067a:	4880      	ldr	r0, [pc, #512]	; (800087c <main+0x298>)
 800067c:	f003 fc6f 	bl	8003f5e <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		// uartRxReceived is set to 1 when a new character is received on uart 1
		if(uartRxReceived){
 8000680:	4b81      	ldr	r3, [pc, #516]	; (8000888 <main+0x2a4>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d058      	beq.n	800073a <main+0x156>
			switch(uartRxBuffer[0]){
 8000688:	4b7a      	ldr	r3, [pc, #488]	; (8000874 <main+0x290>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	2b0d      	cmp	r3, #13
 800068e:	d002      	beq.n	8000696 <main+0xb2>
 8000690:	2b7f      	cmp	r3, #127	; 0x7f
 8000692:	d02f      	beq.n	80006f4 <main+0x110>
 8000694:	e03e      	b.n	8000714 <main+0x130>
			// Nouvelle ligne, instruction à traiter
			case ASCII_CR:
				HAL_UART_Transmit(&huart2, newline, sizeof(newline), HAL_MAX_DELAY);
 8000696:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800069a:	2203      	movs	r2, #3
 800069c:	497b      	ldr	r1, [pc, #492]	; (800088c <main+0x2a8>)
 800069e:	4877      	ldr	r0, [pc, #476]	; (800087c <main+0x298>)
 80006a0:	f003 fc5d 	bl	8003f5e <HAL_UART_Transmit>
				cmdBuffer[idx_cmd] = '\0';
 80006a4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80006a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80006aa:	4413      	add	r3, r2
 80006ac:	2200      	movs	r2, #0
 80006ae:	701a      	strb	r2, [r3, #0]
				argc = 0;
 80006b0:	2300      	movs	r3, #0
 80006b2:	673b      	str	r3, [r7, #112]	; 0x70
				token = strtok(cmdBuffer, " ");
 80006b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006b8:	4975      	ldr	r1, [pc, #468]	; (8000890 <main+0x2ac>)
 80006ba:	4618      	mov	r0, r3
 80006bc:	f005 fccc 	bl	8006058 <strtok>
 80006c0:	4603      	mov	r3, r0
 80006c2:	66fb      	str	r3, [r7, #108]	; 0x6c
				while(token!=NULL){
 80006c4:	e00e      	b.n	80006e4 <main+0x100>
					argv[argc++] = token;
 80006c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80006c8:	1c5a      	adds	r2, r3, #1
 80006ca:	673a      	str	r2, [r7, #112]	; 0x70
 80006cc:	009b      	lsls	r3, r3, #2
 80006ce:	3378      	adds	r3, #120	; 0x78
 80006d0:	443b      	add	r3, r7
 80006d2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80006d4:	f843 2c74 	str.w	r2, [r3, #-116]
					token = strtok(NULL, " ");
 80006d8:	496d      	ldr	r1, [pc, #436]	; (8000890 <main+0x2ac>)
 80006da:	2000      	movs	r0, #0
 80006dc:	f005 fcbc 	bl	8006058 <strtok>
 80006e0:	4603      	mov	r3, r0
 80006e2:	66fb      	str	r3, [r7, #108]	; 0x6c
				while(token!=NULL){
 80006e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d1ed      	bne.n	80006c6 <main+0xe2>
				}

				idx_cmd = 0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	677b      	str	r3, [r7, #116]	; 0x74
				newCmdReady = 1;
 80006ee:	2301      	movs	r3, #1
 80006f0:	66bb      	str	r3, [r7, #104]	; 0x68
				break;
 80006f2:	e01f      	b.n	8000734 <main+0x150>
				// Suppression du dernier caractère
			case ASCII_DEL:
				cmdBuffer[idx_cmd--] = '\0';
 80006f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80006f6:	1e5a      	subs	r2, r3, #1
 80006f8:	677a      	str	r2, [r7, #116]	; 0x74
 80006fa:	3378      	adds	r3, #120	; 0x78
 80006fc:	443b      	add	r3, r7
 80006fe:	2200      	movs	r2, #0
 8000700:	f803 2c50 	strb.w	r2, [r3, #-80]
				HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 8000704:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000708:	2201      	movs	r2, #1
 800070a:	495a      	ldr	r1, [pc, #360]	; (8000874 <main+0x290>)
 800070c:	485b      	ldr	r0, [pc, #364]	; (800087c <main+0x298>)
 800070e:	f003 fc26 	bl	8003f5e <HAL_UART_Transmit>
				break;
 8000712:	e00f      	b.n	8000734 <main+0x150>
				// Nouveau caractère
			default:
				cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 8000714:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000716:	1c5a      	adds	r2, r3, #1
 8000718:	677a      	str	r2, [r7, #116]	; 0x74
 800071a:	4a56      	ldr	r2, [pc, #344]	; (8000874 <main+0x290>)
 800071c:	7812      	ldrb	r2, [r2, #0]
 800071e:	3378      	adds	r3, #120	; 0x78
 8000720:	443b      	add	r3, r7
 8000722:	f803 2c50 	strb.w	r2, [r3, #-80]
				HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 8000726:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800072a:	2201      	movs	r2, #1
 800072c:	4951      	ldr	r1, [pc, #324]	; (8000874 <main+0x290>)
 800072e:	4853      	ldr	r0, [pc, #332]	; (800087c <main+0x298>)
 8000730:	f003 fc15 	bl	8003f5e <HAL_UART_Transmit>
			}
			uartRxReceived = 0;
 8000734:	4b54      	ldr	r3, [pc, #336]	; (8000888 <main+0x2a4>)
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
		}

		if(newCmdReady){
 800073a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800073c:	2b00      	cmp	r3, #0
 800073e:	d09f      	beq.n	8000680 <main+0x9c>
			if(strcmp(argv[0],"set")==0){
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	4954      	ldr	r1, [pc, #336]	; (8000894 <main+0x2b0>)
 8000744:	4618      	mov	r0, r3
 8000746:	f7ff fd6b 	bl	8000220 <strcmp>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d12d      	bne.n	80007ac <main+0x1c8>
				if(strcmp(argv[1],"PA5")==0){
 8000750:	68bb      	ldr	r3, [r7, #8]
 8000752:	4951      	ldr	r1, [pc, #324]	; (8000898 <main+0x2b4>)
 8000754:	4618      	mov	r0, r3
 8000756:	f7ff fd63 	bl	8000220 <strcmp>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d11d      	bne.n	800079c <main+0x1b8>
					HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, atoi(argv[2]));
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	4618      	mov	r0, r3
 8000764:	f005 fc22 	bl	8005fac <atoi>
 8000768:	4603      	mov	r3, r0
 800076a:	b2db      	uxtb	r3, r3
 800076c:	461a      	mov	r2, r3
 800076e:	2120      	movs	r1, #32
 8000770:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000774:	f001 f87a 	bl	800186c <HAL_GPIO_WritePin>
					sprintf(uartTxBuffer,"Switch on/off led : %d\r\n",atoi(argv[2]));
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	4618      	mov	r0, r3
 800077c:	f005 fc16 	bl	8005fac <atoi>
 8000780:	4603      	mov	r3, r0
 8000782:	461a      	mov	r2, r3
 8000784:	4945      	ldr	r1, [pc, #276]	; (800089c <main+0x2b8>)
 8000786:	483c      	ldr	r0, [pc, #240]	; (8000878 <main+0x294>)
 8000788:	f005 fc46 	bl	8006018 <siprintf>
					HAL_UART_Transmit(&huart2, uartTxBuffer, 32, HAL_MAX_DELAY);
 800078c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000790:	2220      	movs	r2, #32
 8000792:	4939      	ldr	r1, [pc, #228]	; (8000878 <main+0x294>)
 8000794:	4839      	ldr	r0, [pc, #228]	; (800087c <main+0x298>)
 8000796:	f003 fbe2 	bl	8003f5e <HAL_UART_Transmit>
 800079a:	e05e      	b.n	800085a <main+0x276>
				}
				else{
					HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 800079c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007a0:	2214      	movs	r2, #20
 80007a2:	493f      	ldr	r1, [pc, #252]	; (80008a0 <main+0x2bc>)
 80007a4:	4835      	ldr	r0, [pc, #212]	; (800087c <main+0x298>)
 80007a6:	f003 fbda 	bl	8003f5e <HAL_UART_Transmit>
 80007aa:	e056      	b.n	800085a <main+0x276>
				}
			}
			else if(strcmp(argv[0],"get")==0)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	493d      	ldr	r1, [pc, #244]	; (80008a4 <main+0x2c0>)
 80007b0:	4618      	mov	r0, r3
 80007b2:	f7ff fd35 	bl	8000220 <strcmp>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d107      	bne.n	80007cc <main+0x1e8>
			{
				HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 80007bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007c0:	2214      	movs	r2, #20
 80007c2:	4937      	ldr	r1, [pc, #220]	; (80008a0 <main+0x2bc>)
 80007c4:	482d      	ldr	r0, [pc, #180]	; (800087c <main+0x298>)
 80007c6:	f003 fbca 	bl	8003f5e <HAL_UART_Transmit>
 80007ca:	e046      	b.n	800085a <main+0x276>
			}
			else if(strcmp(argv[0],"help")==0)
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	4936      	ldr	r1, [pc, #216]	; (80008a8 <main+0x2c4>)
 80007d0:	4618      	mov	r0, r3
 80007d2:	f7ff fd25 	bl	8000220 <strcmp>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d107      	bne.n	80007ec <main+0x208>
			{
				HAL_UART_Transmit(&huart2, help, sizeof(help), HAL_MAX_DELAY);
 80007dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007e0:	22ef      	movs	r2, #239	; 0xef
 80007e2:	4932      	ldr	r1, [pc, #200]	; (80008ac <main+0x2c8>)
 80007e4:	4825      	ldr	r0, [pc, #148]	; (800087c <main+0x298>)
 80007e6:	f003 fbba 	bl	8003f5e <HAL_UART_Transmit>
 80007ea:	e036      	b.n	800085a <main+0x276>
			}
			else if(strcmp(argv[0],"pinout")==0)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	4930      	ldr	r1, [pc, #192]	; (80008b0 <main+0x2cc>)
 80007f0:	4618      	mov	r0, r3
 80007f2:	f7ff fd15 	bl	8000220 <strcmp>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d107      	bne.n	800080c <main+0x228>
			{
				HAL_UART_Transmit(&huart2, pinout, sizeof(pinout), HAL_MAX_DELAY);
 80007fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000800:	220d      	movs	r2, #13
 8000802:	492c      	ldr	r1, [pc, #176]	; (80008b4 <main+0x2d0>)
 8000804:	481d      	ldr	r0, [pc, #116]	; (800087c <main+0x298>)
 8000806:	f003 fbaa 	bl	8003f5e <HAL_UART_Transmit>
 800080a:	e026      	b.n	800085a <main+0x276>
			}
			else if(strcmp(argv[0],"start")==0)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	492a      	ldr	r1, [pc, #168]	; (80008b8 <main+0x2d4>)
 8000810:	4618      	mov	r0, r3
 8000812:	f7ff fd05 	bl	8000220 <strcmp>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d107      	bne.n	800082c <main+0x248>
			{
				HAL_UART_Transmit(&huart2, powerOn, sizeof(powerOn), HAL_MAX_DELAY);
 800081c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000820:	220c      	movs	r2, #12
 8000822:	4926      	ldr	r1, [pc, #152]	; (80008bc <main+0x2d8>)
 8000824:	4815      	ldr	r0, [pc, #84]	; (800087c <main+0x298>)
 8000826:	f003 fb9a 	bl	8003f5e <HAL_UART_Transmit>
 800082a:	e016      	b.n	800085a <main+0x276>
			}
			else if(strcmp(argv[0],"stop")==0)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	4924      	ldr	r1, [pc, #144]	; (80008c0 <main+0x2dc>)
 8000830:	4618      	mov	r0, r3
 8000832:	f7ff fcf5 	bl	8000220 <strcmp>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d107      	bne.n	800084c <main+0x268>
			{
				HAL_UART_Transmit(&huart2, powerOff, sizeof(powerOff), HAL_MAX_DELAY);
 800083c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000840:	220a      	movs	r2, #10
 8000842:	4920      	ldr	r1, [pc, #128]	; (80008c4 <main+0x2e0>)
 8000844:	480d      	ldr	r0, [pc, #52]	; (800087c <main+0x298>)
 8000846:	f003 fb8a 	bl	8003f5e <HAL_UART_Transmit>
 800084a:	e006      	b.n	800085a <main+0x276>
			}
			else{
				HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 800084c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000850:	2214      	movs	r2, #20
 8000852:	4913      	ldr	r1, [pc, #76]	; (80008a0 <main+0x2bc>)
 8000854:	4809      	ldr	r0, [pc, #36]	; (800087c <main+0x298>)
 8000856:	f003 fb82 	bl	8003f5e <HAL_UART_Transmit>
			}
			HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 800085a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800085e:	2218      	movs	r2, #24
 8000860:	4908      	ldr	r1, [pc, #32]	; (8000884 <main+0x2a0>)
 8000862:	4806      	ldr	r0, [pc, #24]	; (800087c <main+0x298>)
 8000864:	f003 fb7b 	bl	8003f5e <HAL_UART_Transmit>
			newCmdReady = 0;
 8000868:	2300      	movs	r3, #0
 800086a:	66bb      	str	r3, [r7, #104]	; 0x68
		if(uartRxReceived){
 800086c:	e708      	b.n	8000680 <main+0x9c>
 800086e:	bf00      	nop
 8000870:	20000124 	.word	0x20000124
 8000874:	20000204 	.word	0x20000204
 8000878:	20000208 	.word	0x20000208
 800087c:	20000170 	.word	0x20000170
 8000880:	20000018 	.word	0x20000018
 8000884:	20000000 	.word	0x20000000
 8000888:	20000200 	.word	0x20000200
 800088c:	20000080 	.word	0x20000080
 8000890:	080075ac 	.word	0x080075ac
 8000894:	080075b0 	.word	0x080075b0
 8000898:	080075b4 	.word	0x080075b4
 800089c:	080075b8 	.word	0x080075b8
 80008a0:	20000084 	.word	0x20000084
 80008a4:	080075d4 	.word	0x080075d4
 80008a8:	080075d8 	.word	0x080075d8
 80008ac:	080075f8 	.word	0x080075f8
 80008b0:	080075e0 	.word	0x080075e0
 80008b4:	080076e8 	.word	0x080076e8
 80008b8:	080075e8 	.word	0x080075e8
 80008bc:	080076f8 	.word	0x080076f8
 80008c0:	080075f0 	.word	0x080075f0
 80008c4:	08007704 	.word	0x08007704

080008c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b094      	sub	sp, #80	; 0x50
 80008cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ce:	f107 0318 	add.w	r3, r7, #24
 80008d2:	2238      	movs	r2, #56	; 0x38
 80008d4:	2100      	movs	r1, #0
 80008d6:	4618      	mov	r0, r3
 80008d8:	f005 fb96 	bl	8006008 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008dc:	1d3b      	adds	r3, r7, #4
 80008de:	2200      	movs	r2, #0
 80008e0:	601a      	str	r2, [r3, #0]
 80008e2:	605a      	str	r2, [r3, #4]
 80008e4:	609a      	str	r2, [r3, #8]
 80008e6:	60da      	str	r2, [r3, #12]
 80008e8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80008ea:	2000      	movs	r0, #0
 80008ec:	f000 fffa 	bl	80018e4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008f0:	2302      	movs	r3, #2
 80008f2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008f8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008fa:	2340      	movs	r3, #64	; 0x40
 80008fc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008fe:	2302      	movs	r3, #2
 8000900:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000902:	2302      	movs	r3, #2
 8000904:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000906:	2304      	movs	r3, #4
 8000908:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800090a:	2355      	movs	r3, #85	; 0x55
 800090c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800090e:	2302      	movs	r3, #2
 8000910:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000912:	2302      	movs	r3, #2
 8000914:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000916:	2302      	movs	r3, #2
 8000918:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800091a:	f107 0318 	add.w	r3, r7, #24
 800091e:	4618      	mov	r0, r3
 8000920:	f001 f894 	bl	8001a4c <HAL_RCC_OscConfig>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800092a:	f000 f99b 	bl	8000c64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800092e:	230f      	movs	r3, #15
 8000930:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000932:	2303      	movs	r3, #3
 8000934:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000936:	2300      	movs	r3, #0
 8000938:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800093a:	2300      	movs	r3, #0
 800093c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800093e:	2300      	movs	r3, #0
 8000940:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000942:	1d3b      	adds	r3, r7, #4
 8000944:	2104      	movs	r1, #4
 8000946:	4618      	mov	r0, r3
 8000948:	f001 fb98 	bl	800207c <HAL_RCC_ClockConfig>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000952:	f000 f987 	bl	8000c64 <Error_Handler>
  }
}
 8000956:	bf00      	nop
 8000958:	3750      	adds	r7, #80	; 0x50
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
	...

08000960 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b09c      	sub	sp, #112	; 0x70
 8000964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000966:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
 800096e:	605a      	str	r2, [r3, #4]
 8000970:	609a      	str	r2, [r3, #8]
 8000972:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000974:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	605a      	str	r2, [r3, #4]
 800097e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000980:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	605a      	str	r2, [r3, #4]
 800098a:	609a      	str	r2, [r3, #8]
 800098c:	60da      	str	r2, [r3, #12]
 800098e:	611a      	str	r2, [r3, #16]
 8000990:	615a      	str	r2, [r3, #20]
 8000992:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000994:	1d3b      	adds	r3, r7, #4
 8000996:	2234      	movs	r2, #52	; 0x34
 8000998:	2100      	movs	r1, #0
 800099a:	4618      	mov	r0, r3
 800099c:	f005 fb34 	bl	8006008 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009a0:	4b4c      	ldr	r3, [pc, #304]	; (8000ad4 <MX_TIM1_Init+0x174>)
 80009a2:	4a4d      	ldr	r2, [pc, #308]	; (8000ad8 <MX_TIM1_Init+0x178>)
 80009a4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10-1;
 80009a6:	4b4b      	ldr	r3, [pc, #300]	; (8000ad4 <MX_TIM1_Init+0x174>)
 80009a8:	2209      	movs	r2, #9
 80009aa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ac:	4b49      	ldr	r3, [pc, #292]	; (8000ad4 <MX_TIM1_Init+0x174>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1023;
 80009b2:	4b48      	ldr	r3, [pc, #288]	; (8000ad4 <MX_TIM1_Init+0x174>)
 80009b4:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80009b8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ba:	4b46      	ldr	r3, [pc, #280]	; (8000ad4 <MX_TIM1_Init+0x174>)
 80009bc:	2200      	movs	r2, #0
 80009be:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009c0:	4b44      	ldr	r3, [pc, #272]	; (8000ad4 <MX_TIM1_Init+0x174>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009c6:	4b43      	ldr	r3, [pc, #268]	; (8000ad4 <MX_TIM1_Init+0x174>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009cc:	4841      	ldr	r0, [pc, #260]	; (8000ad4 <MX_TIM1_Init+0x174>)
 80009ce:	f001 ffbf 	bl	8002950 <HAL_TIM_Base_Init>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80009d8:	f000 f944 	bl	8000c64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009e0:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009e2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80009e6:	4619      	mov	r1, r3
 80009e8:	483a      	ldr	r0, [pc, #232]	; (8000ad4 <MX_TIM1_Init+0x174>)
 80009ea:	f002 fa8f 	bl	8002f0c <HAL_TIM_ConfigClockSource>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80009f4:	f000 f936 	bl	8000c64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80009f8:	4836      	ldr	r0, [pc, #216]	; (8000ad4 <MX_TIM1_Init+0x174>)
 80009fa:	f002 f800 	bl	80029fe <HAL_TIM_PWM_Init>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000a04:	f000 f92e 	bl	8000c64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a10:	2300      	movs	r3, #0
 8000a12:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a14:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a18:	4619      	mov	r1, r3
 8000a1a:	482e      	ldr	r0, [pc, #184]	; (8000ad4 <MX_TIM1_Init+0x174>)
 8000a1c:	f003 f8e2 	bl	8003be4 <HAL_TIMEx_MasterConfigSynchronization>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000a26:	f000 f91d 	bl	8000c64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a2a:	2360      	movs	r3, #96	; 0x60
 8000a2c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 613;
 8000a2e:	f240 2365 	movw	r3, #613	; 0x265
 8000a32:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a34:	2300      	movs	r3, #0
 8000a36:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a40:	2300      	movs	r3, #0
 8000a42:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a44:	2300      	movs	r3, #0
 8000a46:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a48:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4820      	ldr	r0, [pc, #128]	; (8000ad4 <MX_TIM1_Init+0x174>)
 8000a52:	f002 f947 	bl	8002ce4 <HAL_TIM_PWM_ConfigChannel>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8000a5c:	f000 f902 	bl	8000c64 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a60:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a64:	2204      	movs	r2, #4
 8000a66:	4619      	mov	r1, r3
 8000a68:	481a      	ldr	r0, [pc, #104]	; (8000ad4 <MX_TIM1_Init+0x174>)
 8000a6a:	f002 f93b 	bl	8002ce4 <HAL_TIM_PWM_ConfigChannel>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8000a74:	f000 f8f6 	bl	8000c64 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a80:	2300      	movs	r3, #0
 8000a82:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 200;
 8000a84:	23c8      	movs	r3, #200	; 0xc8
 8000a86:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a90:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a92:	2300      	movs	r3, #0
 8000a94:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000a96:	2300      	movs	r3, #0
 8000a98:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000aa2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000aac:	2300      	movs	r3, #0
 8000aae:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ab0:	1d3b      	adds	r3, r7, #4
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4807      	ldr	r0, [pc, #28]	; (8000ad4 <MX_TIM1_Init+0x174>)
 8000ab6:	f003 f92b 	bl	8003d10 <HAL_TIMEx_ConfigBreakDeadTime>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_TIM1_Init+0x164>
  {
    Error_Handler();
 8000ac0:	f000 f8d0 	bl	8000c64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ac4:	4803      	ldr	r0, [pc, #12]	; (8000ad4 <MX_TIM1_Init+0x174>)
 8000ac6:	f000 f917 	bl	8000cf8 <HAL_TIM_MspPostInit>

}
 8000aca:	bf00      	nop
 8000acc:	3770      	adds	r7, #112	; 0x70
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	20000124 	.word	0x20000124
 8000ad8:	40012c00 	.word	0x40012c00

08000adc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ae0:	4b22      	ldr	r3, [pc, #136]	; (8000b6c <MX_USART2_UART_Init+0x90>)
 8000ae2:	4a23      	ldr	r2, [pc, #140]	; (8000b70 <MX_USART2_UART_Init+0x94>)
 8000ae4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ae6:	4b21      	ldr	r3, [pc, #132]	; (8000b6c <MX_USART2_UART_Init+0x90>)
 8000ae8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000aec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000aee:	4b1f      	ldr	r3, [pc, #124]	; (8000b6c <MX_USART2_UART_Init+0x90>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000af4:	4b1d      	ldr	r3, [pc, #116]	; (8000b6c <MX_USART2_UART_Init+0x90>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000afa:	4b1c      	ldr	r3, [pc, #112]	; (8000b6c <MX_USART2_UART_Init+0x90>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b00:	4b1a      	ldr	r3, [pc, #104]	; (8000b6c <MX_USART2_UART_Init+0x90>)
 8000b02:	220c      	movs	r2, #12
 8000b04:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b06:	4b19      	ldr	r3, [pc, #100]	; (8000b6c <MX_USART2_UART_Init+0x90>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b0c:	4b17      	ldr	r3, [pc, #92]	; (8000b6c <MX_USART2_UART_Init+0x90>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b12:	4b16      	ldr	r3, [pc, #88]	; (8000b6c <MX_USART2_UART_Init+0x90>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b18:	4b14      	ldr	r3, [pc, #80]	; (8000b6c <MX_USART2_UART_Init+0x90>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b1e:	4b13      	ldr	r3, [pc, #76]	; (8000b6c <MX_USART2_UART_Init+0x90>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b24:	4811      	ldr	r0, [pc, #68]	; (8000b6c <MX_USART2_UART_Init+0x90>)
 8000b26:	f003 f9ca 	bl	8003ebe <HAL_UART_Init>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000b30:	f000 f898 	bl	8000c64 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b34:	2100      	movs	r1, #0
 8000b36:	480d      	ldr	r0, [pc, #52]	; (8000b6c <MX_USART2_UART_Init+0x90>)
 8000b38:	f005 f96d 	bl	8005e16 <HAL_UARTEx_SetTxFifoThreshold>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000b42:	f000 f88f 	bl	8000c64 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b46:	2100      	movs	r1, #0
 8000b48:	4808      	ldr	r0, [pc, #32]	; (8000b6c <MX_USART2_UART_Init+0x90>)
 8000b4a:	f005 f9a2 	bl	8005e92 <HAL_UARTEx_SetRxFifoThreshold>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000b54:	f000 f886 	bl	8000c64 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000b58:	4804      	ldr	r0, [pc, #16]	; (8000b6c <MX_USART2_UART_Init+0x90>)
 8000b5a:	f005 f923 	bl	8005da4 <HAL_UARTEx_DisableFifoMode>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000b64:	f000 f87e 	bl	8000c64 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b68:	bf00      	nop
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	20000170 	.word	0x20000170
 8000b70:	40004400 	.word	0x40004400

08000b74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b088      	sub	sp, #32
 8000b78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7a:	f107 030c 	add.w	r3, r7, #12
 8000b7e:	2200      	movs	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]
 8000b82:	605a      	str	r2, [r3, #4]
 8000b84:	609a      	str	r2, [r3, #8]
 8000b86:	60da      	str	r2, [r3, #12]
 8000b88:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b8a:	4b29      	ldr	r3, [pc, #164]	; (8000c30 <MX_GPIO_Init+0xbc>)
 8000b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b8e:	4a28      	ldr	r2, [pc, #160]	; (8000c30 <MX_GPIO_Init+0xbc>)
 8000b90:	f043 0304 	orr.w	r3, r3, #4
 8000b94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b96:	4b26      	ldr	r3, [pc, #152]	; (8000c30 <MX_GPIO_Init+0xbc>)
 8000b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b9a:	f003 0304 	and.w	r3, r3, #4
 8000b9e:	60bb      	str	r3, [r7, #8]
 8000ba0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ba2:	4b23      	ldr	r3, [pc, #140]	; (8000c30 <MX_GPIO_Init+0xbc>)
 8000ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ba6:	4a22      	ldr	r2, [pc, #136]	; (8000c30 <MX_GPIO_Init+0xbc>)
 8000ba8:	f043 0320 	orr.w	r3, r3, #32
 8000bac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bae:	4b20      	ldr	r3, [pc, #128]	; (8000c30 <MX_GPIO_Init+0xbc>)
 8000bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb2:	f003 0320 	and.w	r3, r3, #32
 8000bb6:	607b      	str	r3, [r7, #4]
 8000bb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bba:	4b1d      	ldr	r3, [pc, #116]	; (8000c30 <MX_GPIO_Init+0xbc>)
 8000bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bbe:	4a1c      	ldr	r2, [pc, #112]	; (8000c30 <MX_GPIO_Init+0xbc>)
 8000bc0:	f043 0301 	orr.w	r3, r3, #1
 8000bc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bc6:	4b1a      	ldr	r3, [pc, #104]	; (8000c30 <MX_GPIO_Init+0xbc>)
 8000bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bca:	f003 0301 	and.w	r3, r3, #1
 8000bce:	603b      	str	r3, [r7, #0]
 8000bd0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	2120      	movs	r1, #32
 8000bd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bda:	f000 fe47 	bl	800186c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000bde:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000be2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000be4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000be8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000bee:	f107 030c 	add.w	r3, r7, #12
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	480f      	ldr	r0, [pc, #60]	; (8000c34 <MX_GPIO_Init+0xc0>)
 8000bf6:	f000 fcb7 	bl	8001568 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000bfa:	2320      	movs	r3, #32
 8000bfc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c06:	2300      	movs	r3, #0
 8000c08:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000c0a:	f107 030c 	add.w	r3, r7, #12
 8000c0e:	4619      	mov	r1, r3
 8000c10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c14:	f000 fca8 	bl	8001568 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c18:	2200      	movs	r2, #0
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	2028      	movs	r0, #40	; 0x28
 8000c1e:	f000 fbae 	bl	800137e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c22:	2028      	movs	r0, #40	; 0x28
 8000c24:	f000 fbc5 	bl	80013b2 <HAL_NVIC_EnableIRQ>

}
 8000c28:	bf00      	nop
 8000c2a:	3720      	adds	r7, #32
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	40021000 	.word	0x40021000
 8000c34:	48000800 	.word	0x48000800

08000c38 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback (UART_HandleTypeDef * huart){
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 8000c40:	4b05      	ldr	r3, [pc, #20]	; (8000c58 <HAL_UART_RxCpltCallback+0x20>)
 8000c42:	2201      	movs	r2, #1
 8000c44:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8000c46:	2201      	movs	r2, #1
 8000c48:	4904      	ldr	r1, [pc, #16]	; (8000c5c <HAL_UART_RxCpltCallback+0x24>)
 8000c4a:	4805      	ldr	r0, [pc, #20]	; (8000c60 <HAL_UART_RxCpltCallback+0x28>)
 8000c4c:	f003 fa1e 	bl	800408c <HAL_UART_Receive_IT>
}
 8000c50:	bf00      	nop
 8000c52:	3708      	adds	r7, #8
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	20000200 	.word	0x20000200
 8000c5c:	20000204 	.word	0x20000204
 8000c60:	20000170 	.word	0x20000170

08000c64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c68:	b672      	cpsid	i
}
 8000c6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000c6c:	e7fe      	b.n	8000c6c <Error_Handler+0x8>
	...

08000c70 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c76:	4b0f      	ldr	r3, [pc, #60]	; (8000cb4 <HAL_MspInit+0x44>)
 8000c78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c7a:	4a0e      	ldr	r2, [pc, #56]	; (8000cb4 <HAL_MspInit+0x44>)
 8000c7c:	f043 0301 	orr.w	r3, r3, #1
 8000c80:	6613      	str	r3, [r2, #96]	; 0x60
 8000c82:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <HAL_MspInit+0x44>)
 8000c84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c86:	f003 0301 	and.w	r3, r3, #1
 8000c8a:	607b      	str	r3, [r7, #4]
 8000c8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c8e:	4b09      	ldr	r3, [pc, #36]	; (8000cb4 <HAL_MspInit+0x44>)
 8000c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c92:	4a08      	ldr	r2, [pc, #32]	; (8000cb4 <HAL_MspInit+0x44>)
 8000c94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c98:	6593      	str	r3, [r2, #88]	; 0x58
 8000c9a:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <HAL_MspInit+0x44>)
 8000c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ca2:	603b      	str	r3, [r7, #0]
 8000ca4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000ca6:	f000 fec1 	bl	8001a2c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000caa:	bf00      	nop
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	40021000 	.word	0x40021000

08000cb8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b085      	sub	sp, #20
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a0a      	ldr	r2, [pc, #40]	; (8000cf0 <HAL_TIM_Base_MspInit+0x38>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d10b      	bne.n	8000ce2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000cca:	4b0a      	ldr	r3, [pc, #40]	; (8000cf4 <HAL_TIM_Base_MspInit+0x3c>)
 8000ccc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cce:	4a09      	ldr	r2, [pc, #36]	; (8000cf4 <HAL_TIM_Base_MspInit+0x3c>)
 8000cd0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000cd4:	6613      	str	r3, [r2, #96]	; 0x60
 8000cd6:	4b07      	ldr	r3, [pc, #28]	; (8000cf4 <HAL_TIM_Base_MspInit+0x3c>)
 8000cd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000ce2:	bf00      	nop
 8000ce4:	3714      	adds	r7, #20
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	40012c00 	.word	0x40012c00
 8000cf4:	40021000 	.word	0x40021000

08000cf8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b088      	sub	sp, #32
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d00:	f107 030c 	add.w	r3, r7, #12
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
 8000d0c:	60da      	str	r2, [r3, #12]
 8000d0e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a12      	ldr	r2, [pc, #72]	; (8000d60 <HAL_TIM_MspPostInit+0x68>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d11d      	bne.n	8000d56 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1a:	4b12      	ldr	r3, [pc, #72]	; (8000d64 <HAL_TIM_MspPostInit+0x6c>)
 8000d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d1e:	4a11      	ldr	r2, [pc, #68]	; (8000d64 <HAL_TIM_MspPostInit+0x6c>)
 8000d20:	f043 0301 	orr.w	r3, r3, #1
 8000d24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d26:	4b0f      	ldr	r3, [pc, #60]	; (8000d64 <HAL_TIM_MspPostInit+0x6c>)
 8000d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d2a:	f003 0301 	and.w	r3, r3, #1
 8000d2e:	60bb      	str	r3, [r7, #8]
 8000d30:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA11     ------> TIM1_CH1N
    PA12     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12;
 8000d32:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 8000d36:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d40:	2300      	movs	r3, #0
 8000d42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000d44:	2306      	movs	r3, #6
 8000d46:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d48:	f107 030c 	add.w	r3, r7, #12
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d52:	f000 fc09 	bl	8001568 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000d56:	bf00      	nop
 8000d58:	3720      	adds	r7, #32
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	40012c00 	.word	0x40012c00
 8000d64:	40021000 	.word	0x40021000

08000d68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b09e      	sub	sp, #120	; 0x78
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d70:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
 8000d78:	605a      	str	r2, [r3, #4]
 8000d7a:	609a      	str	r2, [r3, #8]
 8000d7c:	60da      	str	r2, [r3, #12]
 8000d7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d80:	f107 0310 	add.w	r3, r7, #16
 8000d84:	2254      	movs	r2, #84	; 0x54
 8000d86:	2100      	movs	r1, #0
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f005 f93d 	bl	8006008 <memset>
  if(huart->Instance==USART2)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4a23      	ldr	r2, [pc, #140]	; (8000e20 <HAL_UART_MspInit+0xb8>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d13e      	bne.n	8000e16 <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000da0:	f107 0310 	add.w	r3, r7, #16
 8000da4:	4618      	mov	r0, r3
 8000da6:	f001 fb85 	bl	80024b4 <HAL_RCCEx_PeriphCLKConfig>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000db0:	f7ff ff58 	bl	8000c64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000db4:	4b1b      	ldr	r3, [pc, #108]	; (8000e24 <HAL_UART_MspInit+0xbc>)
 8000db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000db8:	4a1a      	ldr	r2, [pc, #104]	; (8000e24 <HAL_UART_MspInit+0xbc>)
 8000dba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dbe:	6593      	str	r3, [r2, #88]	; 0x58
 8000dc0:	4b18      	ldr	r3, [pc, #96]	; (8000e24 <HAL_UART_MspInit+0xbc>)
 8000dc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dc8:	60fb      	str	r3, [r7, #12]
 8000dca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dcc:	4b15      	ldr	r3, [pc, #84]	; (8000e24 <HAL_UART_MspInit+0xbc>)
 8000dce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd0:	4a14      	ldr	r2, [pc, #80]	; (8000e24 <HAL_UART_MspInit+0xbc>)
 8000dd2:	f043 0301 	orr.w	r3, r3, #1
 8000dd6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dd8:	4b12      	ldr	r3, [pc, #72]	; (8000e24 <HAL_UART_MspInit+0xbc>)
 8000dda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ddc:	f003 0301 	and.w	r3, r3, #1
 8000de0:	60bb      	str	r3, [r7, #8]
 8000de2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000de4:	230c      	movs	r3, #12
 8000de6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de8:	2302      	movs	r3, #2
 8000dea:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dec:	2300      	movs	r3, #0
 8000dee:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df0:	2300      	movs	r3, #0
 8000df2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000df4:	2307      	movs	r3, #7
 8000df6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e02:	f000 fbb1 	bl	8001568 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e06:	2200      	movs	r2, #0
 8000e08:	2100      	movs	r1, #0
 8000e0a:	2026      	movs	r0, #38	; 0x26
 8000e0c:	f000 fab7 	bl	800137e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e10:	2026      	movs	r0, #38	; 0x26
 8000e12:	f000 face 	bl	80013b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e16:	bf00      	nop
 8000e18:	3778      	adds	r7, #120	; 0x78
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40004400 	.word	0x40004400
 8000e24:	40021000 	.word	0x40021000

08000e28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e2c:	e7fe      	b.n	8000e2c <NMI_Handler+0x4>

08000e2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e32:	e7fe      	b.n	8000e32 <HardFault_Handler+0x4>

08000e34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e38:	e7fe      	b.n	8000e38 <MemManage_Handler+0x4>

08000e3a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e3a:	b480      	push	{r7}
 8000e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e3e:	e7fe      	b.n	8000e3e <BusFault_Handler+0x4>

08000e40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e44:	e7fe      	b.n	8000e44 <UsageFault_Handler+0x4>

08000e46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e46:	b480      	push	{r7}
 8000e48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e4a:	bf00      	nop
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr

08000e54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e58:	bf00      	nop
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr

08000e62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e62:	b480      	push	{r7}
 8000e64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e66:	bf00      	nop
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e74:	f000 f968 	bl	8001148 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e78:	bf00      	nop
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e80:	4802      	ldr	r0, [pc, #8]	; (8000e8c <USART2_IRQHandler+0x10>)
 8000e82:	f003 f959 	bl	8004138 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e86:	bf00      	nop
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	20000170 	.word	0x20000170

08000e90 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8000e94:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000e98:	f000 fd00 	bl	800189c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000e9c:	bf00      	nop
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
	return 1;
 8000ea4:	2301      	movs	r3, #1
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr

08000eb0 <_kill>:

int _kill(int pid, int sig)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000eba:	f005 f87b 	bl	8005fb4 <__errno>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2216      	movs	r2, #22
 8000ec2:	601a      	str	r2, [r3, #0]
	return -1;
 8000ec4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	3708      	adds	r7, #8
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <_exit>:

void _exit (int status)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000ed8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000edc:	6878      	ldr	r0, [r7, #4]
 8000ede:	f7ff ffe7 	bl	8000eb0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000ee2:	e7fe      	b.n	8000ee2 <_exit+0x12>

08000ee4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b086      	sub	sp, #24
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	60f8      	str	r0, [r7, #12]
 8000eec:	60b9      	str	r1, [r7, #8]
 8000eee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	617b      	str	r3, [r7, #20]
 8000ef4:	e00a      	b.n	8000f0c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ef6:	f3af 8000 	nop.w
 8000efa:	4601      	mov	r1, r0
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	1c5a      	adds	r2, r3, #1
 8000f00:	60ba      	str	r2, [r7, #8]
 8000f02:	b2ca      	uxtb	r2, r1
 8000f04:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	3301      	adds	r3, #1
 8000f0a:	617b      	str	r3, [r7, #20]
 8000f0c:	697a      	ldr	r2, [r7, #20]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	429a      	cmp	r2, r3
 8000f12:	dbf0      	blt.n	8000ef6 <_read+0x12>
	}

return len;
 8000f14:	687b      	ldr	r3, [r7, #4]
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3718      	adds	r7, #24
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b086      	sub	sp, #24
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	60f8      	str	r0, [r7, #12]
 8000f26:	60b9      	str	r1, [r7, #8]
 8000f28:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	617b      	str	r3, [r7, #20]
 8000f2e:	e009      	b.n	8000f44 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	1c5a      	adds	r2, r3, #1
 8000f34:	60ba      	str	r2, [r7, #8]
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	3301      	adds	r3, #1
 8000f42:	617b      	str	r3, [r7, #20]
 8000f44:	697a      	ldr	r2, [r7, #20]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	dbf1      	blt.n	8000f30 <_write+0x12>
	}
	return len;
 8000f4c:	687b      	ldr	r3, [r7, #4]
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3718      	adds	r7, #24
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}

08000f56 <_close>:

int _close(int file)
{
 8000f56:	b480      	push	{r7}
 8000f58:	b083      	sub	sp, #12
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	6078      	str	r0, [r7, #4]
	return -1;
 8000f5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	370c      	adds	r7, #12
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr

08000f6e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	b083      	sub	sp, #12
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	6078      	str	r0, [r7, #4]
 8000f76:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f7e:	605a      	str	r2, [r3, #4]
	return 0;
 8000f80:	2300      	movs	r3, #0
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	370c      	adds	r7, #12
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr

08000f8e <_isatty>:

int _isatty(int file)
{
 8000f8e:	b480      	push	{r7}
 8000f90:	b083      	sub	sp, #12
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	6078      	str	r0, [r7, #4]
	return 1;
 8000f96:	2301      	movs	r3, #1
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	370c      	adds	r7, #12
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr

08000fa4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b085      	sub	sp, #20
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	60f8      	str	r0, [r7, #12]
 8000fac:	60b9      	str	r1, [r7, #8]
 8000fae:	607a      	str	r2, [r7, #4]
	return 0;
 8000fb0:	2300      	movs	r3, #0
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3714      	adds	r7, #20
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
	...

08000fc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b086      	sub	sp, #24
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fc8:	4a14      	ldr	r2, [pc, #80]	; (800101c <_sbrk+0x5c>)
 8000fca:	4b15      	ldr	r3, [pc, #84]	; (8001020 <_sbrk+0x60>)
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fd4:	4b13      	ldr	r3, [pc, #76]	; (8001024 <_sbrk+0x64>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d102      	bne.n	8000fe2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fdc:	4b11      	ldr	r3, [pc, #68]	; (8001024 <_sbrk+0x64>)
 8000fde:	4a12      	ldr	r2, [pc, #72]	; (8001028 <_sbrk+0x68>)
 8000fe0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fe2:	4b10      	ldr	r3, [pc, #64]	; (8001024 <_sbrk+0x64>)
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4413      	add	r3, r2
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	429a      	cmp	r2, r3
 8000fee:	d207      	bcs.n	8001000 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ff0:	f004 ffe0 	bl	8005fb4 <__errno>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	220c      	movs	r2, #12
 8000ff8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ffa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ffe:	e009      	b.n	8001014 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001000:	4b08      	ldr	r3, [pc, #32]	; (8001024 <_sbrk+0x64>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001006:	4b07      	ldr	r3, [pc, #28]	; (8001024 <_sbrk+0x64>)
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4413      	add	r3, r2
 800100e:	4a05      	ldr	r2, [pc, #20]	; (8001024 <_sbrk+0x64>)
 8001010:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001012:	68fb      	ldr	r3, [r7, #12]
}
 8001014:	4618      	mov	r0, r3
 8001016:	3718      	adds	r7, #24
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	20020000 	.word	0x20020000
 8001020:	00000400 	.word	0x00000400
 8001024:	20000248 	.word	0x20000248
 8001028:	20000260 	.word	0x20000260

0800102c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001030:	4b06      	ldr	r3, [pc, #24]	; (800104c <SystemInit+0x20>)
 8001032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001036:	4a05      	ldr	r2, [pc, #20]	; (800104c <SystemInit+0x20>)
 8001038:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800103c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001040:	bf00      	nop
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	e000ed00 	.word	0xe000ed00

08001050 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001050:	480d      	ldr	r0, [pc, #52]	; (8001088 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001052:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001054:	480d      	ldr	r0, [pc, #52]	; (800108c <LoopForever+0x6>)
  ldr r1, =_edata
 8001056:	490e      	ldr	r1, [pc, #56]	; (8001090 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001058:	4a0e      	ldr	r2, [pc, #56]	; (8001094 <LoopForever+0xe>)
  movs r3, #0
 800105a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800105c:	e002      	b.n	8001064 <LoopCopyDataInit>

0800105e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800105e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001060:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001062:	3304      	adds	r3, #4

08001064 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001064:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001066:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001068:	d3f9      	bcc.n	800105e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800106a:	4a0b      	ldr	r2, [pc, #44]	; (8001098 <LoopForever+0x12>)
  ldr r4, =_ebss
 800106c:	4c0b      	ldr	r4, [pc, #44]	; (800109c <LoopForever+0x16>)
  movs r3, #0
 800106e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001070:	e001      	b.n	8001076 <LoopFillZerobss>

08001072 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001072:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001074:	3204      	adds	r2, #4

08001076 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001076:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001078:	d3fb      	bcc.n	8001072 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800107a:	f7ff ffd7 	bl	800102c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800107e:	f004 ff9f 	bl	8005fc0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001082:	f7ff faaf 	bl	80005e4 <main>

08001086 <LoopForever>:

LoopForever:
    b LoopForever
 8001086:	e7fe      	b.n	8001086 <LoopForever>
  ldr   r0, =_estack
 8001088:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800108c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001090:	20000108 	.word	0x20000108
  ldr r2, =_sidata
 8001094:	080079a8 	.word	0x080079a8
  ldr r2, =_sbss
 8001098:	20000108 	.word	0x20000108
  ldr r4, =_ebss
 800109c:	20000260 	.word	0x20000260

080010a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010a0:	e7fe      	b.n	80010a0 <ADC1_2_IRQHandler>

080010a2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b082      	sub	sp, #8
 80010a6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010a8:	2300      	movs	r3, #0
 80010aa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010ac:	2003      	movs	r0, #3
 80010ae:	f000 f95b 	bl	8001368 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010b2:	2000      	movs	r0, #0
 80010b4:	f000 f80e 	bl	80010d4 <HAL_InitTick>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d002      	beq.n	80010c4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	71fb      	strb	r3, [r7, #7]
 80010c2:	e001      	b.n	80010c8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010c4:	f7ff fdd4 	bl	8000c70 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010c8:	79fb      	ldrb	r3, [r7, #7]

}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
	...

080010d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010dc:	2300      	movs	r3, #0
 80010de:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80010e0:	4b16      	ldr	r3, [pc, #88]	; (800113c <HAL_InitTick+0x68>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d022      	beq.n	800112e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80010e8:	4b15      	ldr	r3, [pc, #84]	; (8001140 <HAL_InitTick+0x6c>)
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	4b13      	ldr	r3, [pc, #76]	; (800113c <HAL_InitTick+0x68>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80010f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80010f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80010fc:	4618      	mov	r0, r3
 80010fe:	f000 f966 	bl	80013ce <HAL_SYSTICK_Config>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d10f      	bne.n	8001128 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2b0f      	cmp	r3, #15
 800110c:	d809      	bhi.n	8001122 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800110e:	2200      	movs	r2, #0
 8001110:	6879      	ldr	r1, [r7, #4]
 8001112:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001116:	f000 f932 	bl	800137e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800111a:	4a0a      	ldr	r2, [pc, #40]	; (8001144 <HAL_InitTick+0x70>)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6013      	str	r3, [r2, #0]
 8001120:	e007      	b.n	8001132 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	73fb      	strb	r3, [r7, #15]
 8001126:	e004      	b.n	8001132 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001128:	2301      	movs	r3, #1
 800112a:	73fb      	strb	r3, [r7, #15]
 800112c:	e001      	b.n	8001132 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001132:	7bfb      	ldrb	r3, [r7, #15]
}
 8001134:	4618      	mov	r0, r3
 8001136:	3710      	adds	r7, #16
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	200000a0 	.word	0x200000a0
 8001140:	20000098 	.word	0x20000098
 8001144:	2000009c 	.word	0x2000009c

08001148 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800114c:	4b05      	ldr	r3, [pc, #20]	; (8001164 <HAL_IncTick+0x1c>)
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	4b05      	ldr	r3, [pc, #20]	; (8001168 <HAL_IncTick+0x20>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4413      	add	r3, r2
 8001156:	4a03      	ldr	r2, [pc, #12]	; (8001164 <HAL_IncTick+0x1c>)
 8001158:	6013      	str	r3, [r2, #0]
}
 800115a:	bf00      	nop
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr
 8001164:	2000024c 	.word	0x2000024c
 8001168:	200000a0 	.word	0x200000a0

0800116c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  return uwTick;
 8001170:	4b03      	ldr	r3, [pc, #12]	; (8001180 <HAL_GetTick+0x14>)
 8001172:	681b      	ldr	r3, [r3, #0]
}
 8001174:	4618      	mov	r0, r3
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	2000024c 	.word	0x2000024c

08001184 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800118c:	f7ff ffee 	bl	800116c <HAL_GetTick>
 8001190:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800119c:	d004      	beq.n	80011a8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800119e:	4b09      	ldr	r3, [pc, #36]	; (80011c4 <HAL_Delay+0x40>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	68fa      	ldr	r2, [r7, #12]
 80011a4:	4413      	add	r3, r2
 80011a6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011a8:	bf00      	nop
 80011aa:	f7ff ffdf 	bl	800116c <HAL_GetTick>
 80011ae:	4602      	mov	r2, r0
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	1ad3      	subs	r3, r2, r3
 80011b4:	68fa      	ldr	r2, [r7, #12]
 80011b6:	429a      	cmp	r2, r3
 80011b8:	d8f7      	bhi.n	80011aa <HAL_Delay+0x26>
  {
  }
}
 80011ba:	bf00      	nop
 80011bc:	bf00      	nop
 80011be:	3710      	adds	r7, #16
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	200000a0 	.word	0x200000a0

080011c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b085      	sub	sp, #20
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	f003 0307 	and.w	r3, r3, #7
 80011d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011d8:	4b0c      	ldr	r3, [pc, #48]	; (800120c <__NVIC_SetPriorityGrouping+0x44>)
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011de:	68ba      	ldr	r2, [r7, #8]
 80011e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011e4:	4013      	ands	r3, r2
 80011e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011fa:	4a04      	ldr	r2, [pc, #16]	; (800120c <__NVIC_SetPriorityGrouping+0x44>)
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	60d3      	str	r3, [r2, #12]
}
 8001200:	bf00      	nop
 8001202:	3714      	adds	r7, #20
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr
 800120c:	e000ed00 	.word	0xe000ed00

08001210 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001214:	4b04      	ldr	r3, [pc, #16]	; (8001228 <__NVIC_GetPriorityGrouping+0x18>)
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	0a1b      	lsrs	r3, r3, #8
 800121a:	f003 0307 	and.w	r3, r3, #7
}
 800121e:	4618      	mov	r0, r3
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr
 8001228:	e000ed00 	.word	0xe000ed00

0800122c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123a:	2b00      	cmp	r3, #0
 800123c:	db0b      	blt.n	8001256 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800123e:	79fb      	ldrb	r3, [r7, #7]
 8001240:	f003 021f 	and.w	r2, r3, #31
 8001244:	4907      	ldr	r1, [pc, #28]	; (8001264 <__NVIC_EnableIRQ+0x38>)
 8001246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124a:	095b      	lsrs	r3, r3, #5
 800124c:	2001      	movs	r0, #1
 800124e:	fa00 f202 	lsl.w	r2, r0, r2
 8001252:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001256:	bf00      	nop
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	e000e100 	.word	0xe000e100

08001268 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	6039      	str	r1, [r7, #0]
 8001272:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001274:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001278:	2b00      	cmp	r3, #0
 800127a:	db0a      	blt.n	8001292 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	b2da      	uxtb	r2, r3
 8001280:	490c      	ldr	r1, [pc, #48]	; (80012b4 <__NVIC_SetPriority+0x4c>)
 8001282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001286:	0112      	lsls	r2, r2, #4
 8001288:	b2d2      	uxtb	r2, r2
 800128a:	440b      	add	r3, r1
 800128c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001290:	e00a      	b.n	80012a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	b2da      	uxtb	r2, r3
 8001296:	4908      	ldr	r1, [pc, #32]	; (80012b8 <__NVIC_SetPriority+0x50>)
 8001298:	79fb      	ldrb	r3, [r7, #7]
 800129a:	f003 030f 	and.w	r3, r3, #15
 800129e:	3b04      	subs	r3, #4
 80012a0:	0112      	lsls	r2, r2, #4
 80012a2:	b2d2      	uxtb	r2, r2
 80012a4:	440b      	add	r3, r1
 80012a6:	761a      	strb	r2, [r3, #24]
}
 80012a8:	bf00      	nop
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr
 80012b4:	e000e100 	.word	0xe000e100
 80012b8:	e000ed00 	.word	0xe000ed00

080012bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012bc:	b480      	push	{r7}
 80012be:	b089      	sub	sp, #36	; 0x24
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	60f8      	str	r0, [r7, #12]
 80012c4:	60b9      	str	r1, [r7, #8]
 80012c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	f003 0307 	and.w	r3, r3, #7
 80012ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	f1c3 0307 	rsb	r3, r3, #7
 80012d6:	2b04      	cmp	r3, #4
 80012d8:	bf28      	it	cs
 80012da:	2304      	movcs	r3, #4
 80012dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	3304      	adds	r3, #4
 80012e2:	2b06      	cmp	r3, #6
 80012e4:	d902      	bls.n	80012ec <NVIC_EncodePriority+0x30>
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	3b03      	subs	r3, #3
 80012ea:	e000      	b.n	80012ee <NVIC_EncodePriority+0x32>
 80012ec:	2300      	movs	r3, #0
 80012ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80012f4:	69bb      	ldr	r3, [r7, #24]
 80012f6:	fa02 f303 	lsl.w	r3, r2, r3
 80012fa:	43da      	mvns	r2, r3
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	401a      	ands	r2, r3
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001304:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	fa01 f303 	lsl.w	r3, r1, r3
 800130e:	43d9      	mvns	r1, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001314:	4313      	orrs	r3, r2
         );
}
 8001316:	4618      	mov	r0, r3
 8001318:	3724      	adds	r7, #36	; 0x24
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
	...

08001324 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	3b01      	subs	r3, #1
 8001330:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001334:	d301      	bcc.n	800133a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001336:	2301      	movs	r3, #1
 8001338:	e00f      	b.n	800135a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800133a:	4a0a      	ldr	r2, [pc, #40]	; (8001364 <SysTick_Config+0x40>)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	3b01      	subs	r3, #1
 8001340:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001342:	210f      	movs	r1, #15
 8001344:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001348:	f7ff ff8e 	bl	8001268 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800134c:	4b05      	ldr	r3, [pc, #20]	; (8001364 <SysTick_Config+0x40>)
 800134e:	2200      	movs	r2, #0
 8001350:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001352:	4b04      	ldr	r3, [pc, #16]	; (8001364 <SysTick_Config+0x40>)
 8001354:	2207      	movs	r2, #7
 8001356:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001358:	2300      	movs	r3, #0
}
 800135a:	4618      	mov	r0, r3
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	e000e010 	.word	0xe000e010

08001368 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f7ff ff29 	bl	80011c8 <__NVIC_SetPriorityGrouping>
}
 8001376:	bf00      	nop
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800137e:	b580      	push	{r7, lr}
 8001380:	b086      	sub	sp, #24
 8001382:	af00      	add	r7, sp, #0
 8001384:	4603      	mov	r3, r0
 8001386:	60b9      	str	r1, [r7, #8]
 8001388:	607a      	str	r2, [r7, #4]
 800138a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800138c:	f7ff ff40 	bl	8001210 <__NVIC_GetPriorityGrouping>
 8001390:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	68b9      	ldr	r1, [r7, #8]
 8001396:	6978      	ldr	r0, [r7, #20]
 8001398:	f7ff ff90 	bl	80012bc <NVIC_EncodePriority>
 800139c:	4602      	mov	r2, r0
 800139e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013a2:	4611      	mov	r1, r2
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff ff5f 	bl	8001268 <__NVIC_SetPriority>
}
 80013aa:	bf00      	nop
 80013ac:	3718      	adds	r7, #24
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b082      	sub	sp, #8
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	4603      	mov	r3, r0
 80013ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff ff33 	bl	800122c <__NVIC_EnableIRQ>
}
 80013c6:	bf00      	nop
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013ce:	b580      	push	{r7, lr}
 80013d0:	b082      	sub	sp, #8
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f7ff ffa4 	bl	8001324 <SysTick_Config>
 80013dc:	4603      	mov	r3, r0
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013e6:	b480      	push	{r7}
 80013e8:	b085      	sub	sp, #20
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013ee:	2300      	movs	r3, #0
 80013f0:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d005      	beq.n	800140a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2204      	movs	r2, #4
 8001402:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001404:	2301      	movs	r3, #1
 8001406:	73fb      	strb	r3, [r7, #15]
 8001408:	e037      	b.n	800147a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f022 020e 	bic.w	r2, r2, #14
 8001418:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001424:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001428:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f022 0201 	bic.w	r2, r2, #1
 8001438:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143e:	f003 021f 	and.w	r2, r3, #31
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001446:	2101      	movs	r1, #1
 8001448:	fa01 f202 	lsl.w	r2, r1, r2
 800144c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001456:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800145c:	2b00      	cmp	r3, #0
 800145e:	d00c      	beq.n	800147a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800146a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800146e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001474:	687a      	ldr	r2, [r7, #4]
 8001476:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001478:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2201      	movs	r2, #1
 800147e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2200      	movs	r2, #0
 8001486:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800148a:	7bfb      	ldrb	r3, [r7, #15]
}
 800148c:	4618      	mov	r0, r3
 800148e:	3714      	adds	r7, #20
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr

08001498 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014a0:	2300      	movs	r3, #0
 80014a2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	d00d      	beq.n	80014cc <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2204      	movs	r2, #4
 80014b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2201      	movs	r2, #1
 80014ba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2200      	movs	r2, #0
 80014c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	73fb      	strb	r3, [r7, #15]
 80014ca:	e047      	b.n	800155c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f022 020e 	bic.w	r2, r2, #14
 80014da:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f022 0201 	bic.w	r2, r2, #1
 80014ea:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80014fa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001500:	f003 021f 	and.w	r2, r3, #31
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001508:	2101      	movs	r1, #1
 800150a:	fa01 f202 	lsl.w	r2, r1, r2
 800150e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001514:	687a      	ldr	r2, [r7, #4]
 8001516:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001518:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800151e:	2b00      	cmp	r3, #0
 8001520:	d00c      	beq.n	800153c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800152c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001530:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001536:	687a      	ldr	r2, [r7, #4]
 8001538:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800153a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2201      	movs	r2, #1
 8001540:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2200      	movs	r2, #0
 8001548:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001550:	2b00      	cmp	r3, #0
 8001552:	d003      	beq.n	800155c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	4798      	blx	r3
    }
  }
  return status;
 800155c:	7bfb      	ldrb	r3, [r7, #15]
}
 800155e:	4618      	mov	r0, r3
 8001560:	3710      	adds	r7, #16
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
	...

08001568 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001568:	b480      	push	{r7}
 800156a:	b087      	sub	sp, #28
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001572:	2300      	movs	r3, #0
 8001574:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001576:	e15a      	b.n	800182e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	2101      	movs	r1, #1
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	fa01 f303 	lsl.w	r3, r1, r3
 8001584:	4013      	ands	r3, r2
 8001586:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	2b00      	cmp	r3, #0
 800158c:	f000 814c 	beq.w	8001828 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f003 0303 	and.w	r3, r3, #3
 8001598:	2b01      	cmp	r3, #1
 800159a:	d005      	beq.n	80015a8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d130      	bne.n	800160a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	005b      	lsls	r3, r3, #1
 80015b2:	2203      	movs	r2, #3
 80015b4:	fa02 f303 	lsl.w	r3, r2, r3
 80015b8:	43db      	mvns	r3, r3
 80015ba:	693a      	ldr	r2, [r7, #16]
 80015bc:	4013      	ands	r3, r2
 80015be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	68da      	ldr	r2, [r3, #12]
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	005b      	lsls	r3, r3, #1
 80015c8:	fa02 f303 	lsl.w	r3, r2, r3
 80015cc:	693a      	ldr	r2, [r7, #16]
 80015ce:	4313      	orrs	r3, r2
 80015d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	693a      	ldr	r2, [r7, #16]
 80015d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80015de:	2201      	movs	r2, #1
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	fa02 f303 	lsl.w	r3, r2, r3
 80015e6:	43db      	mvns	r3, r3
 80015e8:	693a      	ldr	r2, [r7, #16]
 80015ea:	4013      	ands	r3, r2
 80015ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	091b      	lsrs	r3, r3, #4
 80015f4:	f003 0201 	and.w	r2, r3, #1
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	fa02 f303 	lsl.w	r3, r2, r3
 80015fe:	693a      	ldr	r2, [r7, #16]
 8001600:	4313      	orrs	r3, r2
 8001602:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	693a      	ldr	r2, [r7, #16]
 8001608:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f003 0303 	and.w	r3, r3, #3
 8001612:	2b03      	cmp	r3, #3
 8001614:	d017      	beq.n	8001646 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	68db      	ldr	r3, [r3, #12]
 800161a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	005b      	lsls	r3, r3, #1
 8001620:	2203      	movs	r2, #3
 8001622:	fa02 f303 	lsl.w	r3, r2, r3
 8001626:	43db      	mvns	r3, r3
 8001628:	693a      	ldr	r2, [r7, #16]
 800162a:	4013      	ands	r3, r2
 800162c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	689a      	ldr	r2, [r3, #8]
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	fa02 f303 	lsl.w	r3, r2, r3
 800163a:	693a      	ldr	r2, [r7, #16]
 800163c:	4313      	orrs	r3, r2
 800163e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	693a      	ldr	r2, [r7, #16]
 8001644:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f003 0303 	and.w	r3, r3, #3
 800164e:	2b02      	cmp	r3, #2
 8001650:	d123      	bne.n	800169a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	08da      	lsrs	r2, r3, #3
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	3208      	adds	r2, #8
 800165a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800165e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	f003 0307 	and.w	r3, r3, #7
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	220f      	movs	r2, #15
 800166a:	fa02 f303 	lsl.w	r3, r2, r3
 800166e:	43db      	mvns	r3, r3
 8001670:	693a      	ldr	r2, [r7, #16]
 8001672:	4013      	ands	r3, r2
 8001674:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	691a      	ldr	r2, [r3, #16]
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	f003 0307 	and.w	r3, r3, #7
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	fa02 f303 	lsl.w	r3, r2, r3
 8001686:	693a      	ldr	r2, [r7, #16]
 8001688:	4313      	orrs	r3, r2
 800168a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	08da      	lsrs	r2, r3, #3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	3208      	adds	r2, #8
 8001694:	6939      	ldr	r1, [r7, #16]
 8001696:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	005b      	lsls	r3, r3, #1
 80016a4:	2203      	movs	r2, #3
 80016a6:	fa02 f303 	lsl.w	r3, r2, r3
 80016aa:	43db      	mvns	r3, r3
 80016ac:	693a      	ldr	r2, [r7, #16]
 80016ae:	4013      	ands	r3, r2
 80016b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f003 0203 	and.w	r2, r3, #3
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	fa02 f303 	lsl.w	r3, r2, r3
 80016c2:	693a      	ldr	r2, [r7, #16]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	693a      	ldr	r2, [r7, #16]
 80016cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	f000 80a6 	beq.w	8001828 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016dc:	4b5b      	ldr	r3, [pc, #364]	; (800184c <HAL_GPIO_Init+0x2e4>)
 80016de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016e0:	4a5a      	ldr	r2, [pc, #360]	; (800184c <HAL_GPIO_Init+0x2e4>)
 80016e2:	f043 0301 	orr.w	r3, r3, #1
 80016e6:	6613      	str	r3, [r2, #96]	; 0x60
 80016e8:	4b58      	ldr	r3, [pc, #352]	; (800184c <HAL_GPIO_Init+0x2e4>)
 80016ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016ec:	f003 0301 	and.w	r3, r3, #1
 80016f0:	60bb      	str	r3, [r7, #8]
 80016f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016f4:	4a56      	ldr	r2, [pc, #344]	; (8001850 <HAL_GPIO_Init+0x2e8>)
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	089b      	lsrs	r3, r3, #2
 80016fa:	3302      	adds	r3, #2
 80016fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001700:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	f003 0303 	and.w	r3, r3, #3
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	220f      	movs	r2, #15
 800170c:	fa02 f303 	lsl.w	r3, r2, r3
 8001710:	43db      	mvns	r3, r3
 8001712:	693a      	ldr	r2, [r7, #16]
 8001714:	4013      	ands	r3, r2
 8001716:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800171e:	d01f      	beq.n	8001760 <HAL_GPIO_Init+0x1f8>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	4a4c      	ldr	r2, [pc, #304]	; (8001854 <HAL_GPIO_Init+0x2ec>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d019      	beq.n	800175c <HAL_GPIO_Init+0x1f4>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	4a4b      	ldr	r2, [pc, #300]	; (8001858 <HAL_GPIO_Init+0x2f0>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d013      	beq.n	8001758 <HAL_GPIO_Init+0x1f0>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	4a4a      	ldr	r2, [pc, #296]	; (800185c <HAL_GPIO_Init+0x2f4>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d00d      	beq.n	8001754 <HAL_GPIO_Init+0x1ec>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	4a49      	ldr	r2, [pc, #292]	; (8001860 <HAL_GPIO_Init+0x2f8>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d007      	beq.n	8001750 <HAL_GPIO_Init+0x1e8>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	4a48      	ldr	r2, [pc, #288]	; (8001864 <HAL_GPIO_Init+0x2fc>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d101      	bne.n	800174c <HAL_GPIO_Init+0x1e4>
 8001748:	2305      	movs	r3, #5
 800174a:	e00a      	b.n	8001762 <HAL_GPIO_Init+0x1fa>
 800174c:	2306      	movs	r3, #6
 800174e:	e008      	b.n	8001762 <HAL_GPIO_Init+0x1fa>
 8001750:	2304      	movs	r3, #4
 8001752:	e006      	b.n	8001762 <HAL_GPIO_Init+0x1fa>
 8001754:	2303      	movs	r3, #3
 8001756:	e004      	b.n	8001762 <HAL_GPIO_Init+0x1fa>
 8001758:	2302      	movs	r3, #2
 800175a:	e002      	b.n	8001762 <HAL_GPIO_Init+0x1fa>
 800175c:	2301      	movs	r3, #1
 800175e:	e000      	b.n	8001762 <HAL_GPIO_Init+0x1fa>
 8001760:	2300      	movs	r3, #0
 8001762:	697a      	ldr	r2, [r7, #20]
 8001764:	f002 0203 	and.w	r2, r2, #3
 8001768:	0092      	lsls	r2, r2, #2
 800176a:	4093      	lsls	r3, r2
 800176c:	693a      	ldr	r2, [r7, #16]
 800176e:	4313      	orrs	r3, r2
 8001770:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001772:	4937      	ldr	r1, [pc, #220]	; (8001850 <HAL_GPIO_Init+0x2e8>)
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	089b      	lsrs	r3, r3, #2
 8001778:	3302      	adds	r3, #2
 800177a:	693a      	ldr	r2, [r7, #16]
 800177c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001780:	4b39      	ldr	r3, [pc, #228]	; (8001868 <HAL_GPIO_Init+0x300>)
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	43db      	mvns	r3, r3
 800178a:	693a      	ldr	r2, [r7, #16]
 800178c:	4013      	ands	r3, r2
 800178e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001798:	2b00      	cmp	r3, #0
 800179a:	d003      	beq.n	80017a4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800179c:	693a      	ldr	r2, [r7, #16]
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80017a4:	4a30      	ldr	r2, [pc, #192]	; (8001868 <HAL_GPIO_Init+0x300>)
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80017aa:	4b2f      	ldr	r3, [pc, #188]	; (8001868 <HAL_GPIO_Init+0x300>)
 80017ac:	68db      	ldr	r3, [r3, #12]
 80017ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	43db      	mvns	r3, r3
 80017b4:	693a      	ldr	r2, [r7, #16]
 80017b6:	4013      	ands	r3, r2
 80017b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d003      	beq.n	80017ce <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80017c6:	693a      	ldr	r2, [r7, #16]
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	4313      	orrs	r3, r2
 80017cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80017ce:	4a26      	ldr	r2, [pc, #152]	; (8001868 <HAL_GPIO_Init+0x300>)
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80017d4:	4b24      	ldr	r3, [pc, #144]	; (8001868 <HAL_GPIO_Init+0x300>)
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	43db      	mvns	r3, r3
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	4013      	ands	r3, r2
 80017e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d003      	beq.n	80017f8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80017f0:	693a      	ldr	r2, [r7, #16]
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80017f8:	4a1b      	ldr	r2, [pc, #108]	; (8001868 <HAL_GPIO_Init+0x300>)
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80017fe:	4b1a      	ldr	r3, [pc, #104]	; (8001868 <HAL_GPIO_Init+0x300>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	43db      	mvns	r3, r3
 8001808:	693a      	ldr	r2, [r7, #16]
 800180a:	4013      	ands	r3, r2
 800180c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d003      	beq.n	8001822 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800181a:	693a      	ldr	r2, [r7, #16]
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	4313      	orrs	r3, r2
 8001820:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001822:	4a11      	ldr	r2, [pc, #68]	; (8001868 <HAL_GPIO_Init+0x300>)
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	3301      	adds	r3, #1
 800182c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	fa22 f303 	lsr.w	r3, r2, r3
 8001838:	2b00      	cmp	r3, #0
 800183a:	f47f ae9d 	bne.w	8001578 <HAL_GPIO_Init+0x10>
  }
}
 800183e:	bf00      	nop
 8001840:	bf00      	nop
 8001842:	371c      	adds	r7, #28
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr
 800184c:	40021000 	.word	0x40021000
 8001850:	40010000 	.word	0x40010000
 8001854:	48000400 	.word	0x48000400
 8001858:	48000800 	.word	0x48000800
 800185c:	48000c00 	.word	0x48000c00
 8001860:	48001000 	.word	0x48001000
 8001864:	48001400 	.word	0x48001400
 8001868:	40010400 	.word	0x40010400

0800186c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	460b      	mov	r3, r1
 8001876:	807b      	strh	r3, [r7, #2]
 8001878:	4613      	mov	r3, r2
 800187a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800187c:	787b      	ldrb	r3, [r7, #1]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d003      	beq.n	800188a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001882:	887a      	ldrh	r2, [r7, #2]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001888:	e002      	b.n	8001890 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800188a:	887a      	ldrh	r2, [r7, #2]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001890:	bf00      	nop
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	4603      	mov	r3, r0
 80018a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80018a6:	4b08      	ldr	r3, [pc, #32]	; (80018c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80018a8:	695a      	ldr	r2, [r3, #20]
 80018aa:	88fb      	ldrh	r3, [r7, #6]
 80018ac:	4013      	ands	r3, r2
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d006      	beq.n	80018c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80018b2:	4a05      	ldr	r2, [pc, #20]	; (80018c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80018b4:	88fb      	ldrh	r3, [r7, #6]
 80018b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80018b8:	88fb      	ldrh	r3, [r7, #6]
 80018ba:	4618      	mov	r0, r3
 80018bc:	f000 f806 	bl	80018cc <HAL_GPIO_EXTI_Callback>
  }
}
 80018c0:	bf00      	nop
 80018c2:	3708      	adds	r7, #8
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	40010400 	.word	0x40010400

080018cc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	4603      	mov	r3, r0
 80018d4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80018d6:	bf00      	nop
 80018d8:	370c      	adds	r7, #12
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
	...

080018e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b085      	sub	sp, #20
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d141      	bne.n	8001976 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80018f2:	4b4b      	ldr	r3, [pc, #300]	; (8001a20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80018fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018fe:	d131      	bne.n	8001964 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001900:	4b47      	ldr	r3, [pc, #284]	; (8001a20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001902:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001906:	4a46      	ldr	r2, [pc, #280]	; (8001a20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001908:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800190c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001910:	4b43      	ldr	r3, [pc, #268]	; (8001a20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001918:	4a41      	ldr	r2, [pc, #260]	; (8001a20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800191a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800191e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001920:	4b40      	ldr	r3, [pc, #256]	; (8001a24 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	2232      	movs	r2, #50	; 0x32
 8001926:	fb02 f303 	mul.w	r3, r2, r3
 800192a:	4a3f      	ldr	r2, [pc, #252]	; (8001a28 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800192c:	fba2 2303 	umull	r2, r3, r2, r3
 8001930:	0c9b      	lsrs	r3, r3, #18
 8001932:	3301      	adds	r3, #1
 8001934:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001936:	e002      	b.n	800193e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	3b01      	subs	r3, #1
 800193c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800193e:	4b38      	ldr	r3, [pc, #224]	; (8001a20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001940:	695b      	ldr	r3, [r3, #20]
 8001942:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001946:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800194a:	d102      	bne.n	8001952 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d1f2      	bne.n	8001938 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001952:	4b33      	ldr	r3, [pc, #204]	; (8001a20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001954:	695b      	ldr	r3, [r3, #20]
 8001956:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800195a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800195e:	d158      	bne.n	8001a12 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001960:	2303      	movs	r3, #3
 8001962:	e057      	b.n	8001a14 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001964:	4b2e      	ldr	r3, [pc, #184]	; (8001a20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001966:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800196a:	4a2d      	ldr	r2, [pc, #180]	; (8001a20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800196c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001970:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001974:	e04d      	b.n	8001a12 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800197c:	d141      	bne.n	8001a02 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800197e:	4b28      	ldr	r3, [pc, #160]	; (8001a20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001986:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800198a:	d131      	bne.n	80019f0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800198c:	4b24      	ldr	r3, [pc, #144]	; (8001a20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800198e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001992:	4a23      	ldr	r2, [pc, #140]	; (8001a20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001994:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001998:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800199c:	4b20      	ldr	r3, [pc, #128]	; (8001a20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80019a4:	4a1e      	ldr	r2, [pc, #120]	; (8001a20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019aa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80019ac:	4b1d      	ldr	r3, [pc, #116]	; (8001a24 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2232      	movs	r2, #50	; 0x32
 80019b2:	fb02 f303 	mul.w	r3, r2, r3
 80019b6:	4a1c      	ldr	r2, [pc, #112]	; (8001a28 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80019b8:	fba2 2303 	umull	r2, r3, r2, r3
 80019bc:	0c9b      	lsrs	r3, r3, #18
 80019be:	3301      	adds	r3, #1
 80019c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019c2:	e002      	b.n	80019ca <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	3b01      	subs	r3, #1
 80019c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019ca:	4b15      	ldr	r3, [pc, #84]	; (8001a20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019cc:	695b      	ldr	r3, [r3, #20]
 80019ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019d6:	d102      	bne.n	80019de <HAL_PWREx_ControlVoltageScaling+0xfa>
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d1f2      	bne.n	80019c4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80019de:	4b10      	ldr	r3, [pc, #64]	; (8001a20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019e0:	695b      	ldr	r3, [r3, #20]
 80019e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019ea:	d112      	bne.n	8001a12 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80019ec:	2303      	movs	r3, #3
 80019ee:	e011      	b.n	8001a14 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80019f0:	4b0b      	ldr	r3, [pc, #44]	; (8001a20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80019f6:	4a0a      	ldr	r2, [pc, #40]	; (8001a20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001a00:	e007      	b.n	8001a12 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a02:	4b07      	ldr	r3, [pc, #28]	; (8001a20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a0a:	4a05      	ldr	r2, [pc, #20]	; (8001a20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a0c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a10:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001a12:	2300      	movs	r3, #0
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3714      	adds	r7, #20
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr
 8001a20:	40007000 	.word	0x40007000
 8001a24:	20000098 	.word	0x20000098
 8001a28:	431bde83 	.word	0x431bde83

08001a2c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001a30:	4b05      	ldr	r3, [pc, #20]	; (8001a48 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	4a04      	ldr	r2, [pc, #16]	; (8001a48 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001a36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a3a:	6093      	str	r3, [r2, #8]
}
 8001a3c:	bf00      	nop
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	40007000 	.word	0x40007000

08001a4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b088      	sub	sp, #32
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d101      	bne.n	8001a5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e306      	b.n	800206c <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0301 	and.w	r3, r3, #1
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d075      	beq.n	8001b56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a6a:	4b97      	ldr	r3, [pc, #604]	; (8001cc8 <HAL_RCC_OscConfig+0x27c>)
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	f003 030c 	and.w	r3, r3, #12
 8001a72:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a74:	4b94      	ldr	r3, [pc, #592]	; (8001cc8 <HAL_RCC_OscConfig+0x27c>)
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	f003 0303 	and.w	r3, r3, #3
 8001a7c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	2b0c      	cmp	r3, #12
 8001a82:	d102      	bne.n	8001a8a <HAL_RCC_OscConfig+0x3e>
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	2b03      	cmp	r3, #3
 8001a88:	d002      	beq.n	8001a90 <HAL_RCC_OscConfig+0x44>
 8001a8a:	69bb      	ldr	r3, [r7, #24]
 8001a8c:	2b08      	cmp	r3, #8
 8001a8e:	d10b      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a90:	4b8d      	ldr	r3, [pc, #564]	; (8001cc8 <HAL_RCC_OscConfig+0x27c>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d05b      	beq.n	8001b54 <HAL_RCC_OscConfig+0x108>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d157      	bne.n	8001b54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e2e1      	b.n	800206c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ab0:	d106      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x74>
 8001ab2:	4b85      	ldr	r3, [pc, #532]	; (8001cc8 <HAL_RCC_OscConfig+0x27c>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a84      	ldr	r2, [pc, #528]	; (8001cc8 <HAL_RCC_OscConfig+0x27c>)
 8001ab8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001abc:	6013      	str	r3, [r2, #0]
 8001abe:	e01d      	b.n	8001afc <HAL_RCC_OscConfig+0xb0>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ac8:	d10c      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x98>
 8001aca:	4b7f      	ldr	r3, [pc, #508]	; (8001cc8 <HAL_RCC_OscConfig+0x27c>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a7e      	ldr	r2, [pc, #504]	; (8001cc8 <HAL_RCC_OscConfig+0x27c>)
 8001ad0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ad4:	6013      	str	r3, [r2, #0]
 8001ad6:	4b7c      	ldr	r3, [pc, #496]	; (8001cc8 <HAL_RCC_OscConfig+0x27c>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a7b      	ldr	r2, [pc, #492]	; (8001cc8 <HAL_RCC_OscConfig+0x27c>)
 8001adc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ae0:	6013      	str	r3, [r2, #0]
 8001ae2:	e00b      	b.n	8001afc <HAL_RCC_OscConfig+0xb0>
 8001ae4:	4b78      	ldr	r3, [pc, #480]	; (8001cc8 <HAL_RCC_OscConfig+0x27c>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a77      	ldr	r2, [pc, #476]	; (8001cc8 <HAL_RCC_OscConfig+0x27c>)
 8001aea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aee:	6013      	str	r3, [r2, #0]
 8001af0:	4b75      	ldr	r3, [pc, #468]	; (8001cc8 <HAL_RCC_OscConfig+0x27c>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a74      	ldr	r2, [pc, #464]	; (8001cc8 <HAL_RCC_OscConfig+0x27c>)
 8001af6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001afa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d013      	beq.n	8001b2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b04:	f7ff fb32 	bl	800116c <HAL_GetTick>
 8001b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b0a:	e008      	b.n	8001b1e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b0c:	f7ff fb2e 	bl	800116c <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	2b64      	cmp	r3, #100	; 0x64
 8001b18:	d901      	bls.n	8001b1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e2a6      	b.n	800206c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b1e:	4b6a      	ldr	r3, [pc, #424]	; (8001cc8 <HAL_RCC_OscConfig+0x27c>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d0f0      	beq.n	8001b0c <HAL_RCC_OscConfig+0xc0>
 8001b2a:	e014      	b.n	8001b56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b2c:	f7ff fb1e 	bl	800116c <HAL_GetTick>
 8001b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b32:	e008      	b.n	8001b46 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b34:	f7ff fb1a 	bl	800116c <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	2b64      	cmp	r3, #100	; 0x64
 8001b40:	d901      	bls.n	8001b46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e292      	b.n	800206c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b46:	4b60      	ldr	r3, [pc, #384]	; (8001cc8 <HAL_RCC_OscConfig+0x27c>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d1f0      	bne.n	8001b34 <HAL_RCC_OscConfig+0xe8>
 8001b52:	e000      	b.n	8001b56 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0302 	and.w	r3, r3, #2
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d075      	beq.n	8001c4e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b62:	4b59      	ldr	r3, [pc, #356]	; (8001cc8 <HAL_RCC_OscConfig+0x27c>)
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	f003 030c 	and.w	r3, r3, #12
 8001b6a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b6c:	4b56      	ldr	r3, [pc, #344]	; (8001cc8 <HAL_RCC_OscConfig+0x27c>)
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	f003 0303 	and.w	r3, r3, #3
 8001b74:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001b76:	69bb      	ldr	r3, [r7, #24]
 8001b78:	2b0c      	cmp	r3, #12
 8001b7a:	d102      	bne.n	8001b82 <HAL_RCC_OscConfig+0x136>
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d002      	beq.n	8001b88 <HAL_RCC_OscConfig+0x13c>
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	2b04      	cmp	r3, #4
 8001b86:	d11f      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b88:	4b4f      	ldr	r3, [pc, #316]	; (8001cc8 <HAL_RCC_OscConfig+0x27c>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d005      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x154>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d101      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e265      	b.n	800206c <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ba0:	4b49      	ldr	r3, [pc, #292]	; (8001cc8 <HAL_RCC_OscConfig+0x27c>)
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	691b      	ldr	r3, [r3, #16]
 8001bac:	061b      	lsls	r3, r3, #24
 8001bae:	4946      	ldr	r1, [pc, #280]	; (8001cc8 <HAL_RCC_OscConfig+0x27c>)
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001bb4:	4b45      	ldr	r3, [pc, #276]	; (8001ccc <HAL_RCC_OscConfig+0x280>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff fa8b 	bl	80010d4 <HAL_InitTick>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d043      	beq.n	8001c4c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e251      	b.n	800206c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d023      	beq.n	8001c18 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bd0:	4b3d      	ldr	r3, [pc, #244]	; (8001cc8 <HAL_RCC_OscConfig+0x27c>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a3c      	ldr	r2, [pc, #240]	; (8001cc8 <HAL_RCC_OscConfig+0x27c>)
 8001bd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bdc:	f7ff fac6 	bl	800116c <HAL_GetTick>
 8001be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001be2:	e008      	b.n	8001bf6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001be4:	f7ff fac2 	bl	800116c <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d901      	bls.n	8001bf6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e23a      	b.n	800206c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bf6:	4b34      	ldr	r3, [pc, #208]	; (8001cc8 <HAL_RCC_OscConfig+0x27c>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d0f0      	beq.n	8001be4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c02:	4b31      	ldr	r3, [pc, #196]	; (8001cc8 <HAL_RCC_OscConfig+0x27c>)
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	691b      	ldr	r3, [r3, #16]
 8001c0e:	061b      	lsls	r3, r3, #24
 8001c10:	492d      	ldr	r1, [pc, #180]	; (8001cc8 <HAL_RCC_OscConfig+0x27c>)
 8001c12:	4313      	orrs	r3, r2
 8001c14:	604b      	str	r3, [r1, #4]
 8001c16:	e01a      	b.n	8001c4e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c18:	4b2b      	ldr	r3, [pc, #172]	; (8001cc8 <HAL_RCC_OscConfig+0x27c>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a2a      	ldr	r2, [pc, #168]	; (8001cc8 <HAL_RCC_OscConfig+0x27c>)
 8001c1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c24:	f7ff faa2 	bl	800116c <HAL_GetTick>
 8001c28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c2a:	e008      	b.n	8001c3e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c2c:	f7ff fa9e 	bl	800116c <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d901      	bls.n	8001c3e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e216      	b.n	800206c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c3e:	4b22      	ldr	r3, [pc, #136]	; (8001cc8 <HAL_RCC_OscConfig+0x27c>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d1f0      	bne.n	8001c2c <HAL_RCC_OscConfig+0x1e0>
 8001c4a:	e000      	b.n	8001c4e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c4c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0308 	and.w	r3, r3, #8
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d041      	beq.n	8001cde <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	695b      	ldr	r3, [r3, #20]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d01c      	beq.n	8001c9c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c62:	4b19      	ldr	r3, [pc, #100]	; (8001cc8 <HAL_RCC_OscConfig+0x27c>)
 8001c64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c68:	4a17      	ldr	r2, [pc, #92]	; (8001cc8 <HAL_RCC_OscConfig+0x27c>)
 8001c6a:	f043 0301 	orr.w	r3, r3, #1
 8001c6e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c72:	f7ff fa7b 	bl	800116c <HAL_GetTick>
 8001c76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c78:	e008      	b.n	8001c8c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c7a:	f7ff fa77 	bl	800116c <HAL_GetTick>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d901      	bls.n	8001c8c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	e1ef      	b.n	800206c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c8c:	4b0e      	ldr	r3, [pc, #56]	; (8001cc8 <HAL_RCC_OscConfig+0x27c>)
 8001c8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c92:	f003 0302 	and.w	r3, r3, #2
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d0ef      	beq.n	8001c7a <HAL_RCC_OscConfig+0x22e>
 8001c9a:	e020      	b.n	8001cde <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c9c:	4b0a      	ldr	r3, [pc, #40]	; (8001cc8 <HAL_RCC_OscConfig+0x27c>)
 8001c9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ca2:	4a09      	ldr	r2, [pc, #36]	; (8001cc8 <HAL_RCC_OscConfig+0x27c>)
 8001ca4:	f023 0301 	bic.w	r3, r3, #1
 8001ca8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cac:	f7ff fa5e 	bl	800116c <HAL_GetTick>
 8001cb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001cb2:	e00d      	b.n	8001cd0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cb4:	f7ff fa5a 	bl	800116c <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d906      	bls.n	8001cd0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e1d2      	b.n	800206c <HAL_RCC_OscConfig+0x620>
 8001cc6:	bf00      	nop
 8001cc8:	40021000 	.word	0x40021000
 8001ccc:	2000009c 	.word	0x2000009c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001cd0:	4b8c      	ldr	r3, [pc, #560]	; (8001f04 <HAL_RCC_OscConfig+0x4b8>)
 8001cd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d1ea      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0304 	and.w	r3, r3, #4
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	f000 80a6 	beq.w	8001e38 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cec:	2300      	movs	r3, #0
 8001cee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001cf0:	4b84      	ldr	r3, [pc, #528]	; (8001f04 <HAL_RCC_OscConfig+0x4b8>)
 8001cf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d101      	bne.n	8001d00 <HAL_RCC_OscConfig+0x2b4>
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e000      	b.n	8001d02 <HAL_RCC_OscConfig+0x2b6>
 8001d00:	2300      	movs	r3, #0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d00d      	beq.n	8001d22 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d06:	4b7f      	ldr	r3, [pc, #508]	; (8001f04 <HAL_RCC_OscConfig+0x4b8>)
 8001d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d0a:	4a7e      	ldr	r2, [pc, #504]	; (8001f04 <HAL_RCC_OscConfig+0x4b8>)
 8001d0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d10:	6593      	str	r3, [r2, #88]	; 0x58
 8001d12:	4b7c      	ldr	r3, [pc, #496]	; (8001f04 <HAL_RCC_OscConfig+0x4b8>)
 8001d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d1a:	60fb      	str	r3, [r7, #12]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d22:	4b79      	ldr	r3, [pc, #484]	; (8001f08 <HAL_RCC_OscConfig+0x4bc>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d118      	bne.n	8001d60 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d2e:	4b76      	ldr	r3, [pc, #472]	; (8001f08 <HAL_RCC_OscConfig+0x4bc>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a75      	ldr	r2, [pc, #468]	; (8001f08 <HAL_RCC_OscConfig+0x4bc>)
 8001d34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d3a:	f7ff fa17 	bl	800116c <HAL_GetTick>
 8001d3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d40:	e008      	b.n	8001d54 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d42:	f7ff fa13 	bl	800116c <HAL_GetTick>
 8001d46:	4602      	mov	r2, r0
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	2b02      	cmp	r3, #2
 8001d4e:	d901      	bls.n	8001d54 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001d50:	2303      	movs	r3, #3
 8001d52:	e18b      	b.n	800206c <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d54:	4b6c      	ldr	r3, [pc, #432]	; (8001f08 <HAL_RCC_OscConfig+0x4bc>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d0f0      	beq.n	8001d42 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d108      	bne.n	8001d7a <HAL_RCC_OscConfig+0x32e>
 8001d68:	4b66      	ldr	r3, [pc, #408]	; (8001f04 <HAL_RCC_OscConfig+0x4b8>)
 8001d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d6e:	4a65      	ldr	r2, [pc, #404]	; (8001f04 <HAL_RCC_OscConfig+0x4b8>)
 8001d70:	f043 0301 	orr.w	r3, r3, #1
 8001d74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d78:	e024      	b.n	8001dc4 <HAL_RCC_OscConfig+0x378>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	2b05      	cmp	r3, #5
 8001d80:	d110      	bne.n	8001da4 <HAL_RCC_OscConfig+0x358>
 8001d82:	4b60      	ldr	r3, [pc, #384]	; (8001f04 <HAL_RCC_OscConfig+0x4b8>)
 8001d84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d88:	4a5e      	ldr	r2, [pc, #376]	; (8001f04 <HAL_RCC_OscConfig+0x4b8>)
 8001d8a:	f043 0304 	orr.w	r3, r3, #4
 8001d8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d92:	4b5c      	ldr	r3, [pc, #368]	; (8001f04 <HAL_RCC_OscConfig+0x4b8>)
 8001d94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d98:	4a5a      	ldr	r2, [pc, #360]	; (8001f04 <HAL_RCC_OscConfig+0x4b8>)
 8001d9a:	f043 0301 	orr.w	r3, r3, #1
 8001d9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001da2:	e00f      	b.n	8001dc4 <HAL_RCC_OscConfig+0x378>
 8001da4:	4b57      	ldr	r3, [pc, #348]	; (8001f04 <HAL_RCC_OscConfig+0x4b8>)
 8001da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001daa:	4a56      	ldr	r2, [pc, #344]	; (8001f04 <HAL_RCC_OscConfig+0x4b8>)
 8001dac:	f023 0301 	bic.w	r3, r3, #1
 8001db0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001db4:	4b53      	ldr	r3, [pc, #332]	; (8001f04 <HAL_RCC_OscConfig+0x4b8>)
 8001db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dba:	4a52      	ldr	r2, [pc, #328]	; (8001f04 <HAL_RCC_OscConfig+0x4b8>)
 8001dbc:	f023 0304 	bic.w	r3, r3, #4
 8001dc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d016      	beq.n	8001dfa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dcc:	f7ff f9ce 	bl	800116c <HAL_GetTick>
 8001dd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dd2:	e00a      	b.n	8001dea <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dd4:	f7ff f9ca 	bl	800116c <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	f241 3288 	movw	r2, #5000	; 0x1388
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d901      	bls.n	8001dea <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e140      	b.n	800206c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dea:	4b46      	ldr	r3, [pc, #280]	; (8001f04 <HAL_RCC_OscConfig+0x4b8>)
 8001dec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001df0:	f003 0302 	and.w	r3, r3, #2
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d0ed      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x388>
 8001df8:	e015      	b.n	8001e26 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dfa:	f7ff f9b7 	bl	800116c <HAL_GetTick>
 8001dfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e00:	e00a      	b.n	8001e18 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e02:	f7ff f9b3 	bl	800116c <HAL_GetTick>
 8001e06:	4602      	mov	r2, r0
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d901      	bls.n	8001e18 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001e14:	2303      	movs	r3, #3
 8001e16:	e129      	b.n	800206c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e18:	4b3a      	ldr	r3, [pc, #232]	; (8001f04 <HAL_RCC_OscConfig+0x4b8>)
 8001e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e1e:	f003 0302 	and.w	r3, r3, #2
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d1ed      	bne.n	8001e02 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e26:	7ffb      	ldrb	r3, [r7, #31]
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d105      	bne.n	8001e38 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e2c:	4b35      	ldr	r3, [pc, #212]	; (8001f04 <HAL_RCC_OscConfig+0x4b8>)
 8001e2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e30:	4a34      	ldr	r2, [pc, #208]	; (8001f04 <HAL_RCC_OscConfig+0x4b8>)
 8001e32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e36:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0320 	and.w	r3, r3, #32
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d03c      	beq.n	8001ebe <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	699b      	ldr	r3, [r3, #24]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d01c      	beq.n	8001e86 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001e4c:	4b2d      	ldr	r3, [pc, #180]	; (8001f04 <HAL_RCC_OscConfig+0x4b8>)
 8001e4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e52:	4a2c      	ldr	r2, [pc, #176]	; (8001f04 <HAL_RCC_OscConfig+0x4b8>)
 8001e54:	f043 0301 	orr.w	r3, r3, #1
 8001e58:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e5c:	f7ff f986 	bl	800116c <HAL_GetTick>
 8001e60:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001e62:	e008      	b.n	8001e76 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e64:	f7ff f982 	bl	800116c <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d901      	bls.n	8001e76 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e0fa      	b.n	800206c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001e76:	4b23      	ldr	r3, [pc, #140]	; (8001f04 <HAL_RCC_OscConfig+0x4b8>)
 8001e78:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e7c:	f003 0302 	and.w	r3, r3, #2
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d0ef      	beq.n	8001e64 <HAL_RCC_OscConfig+0x418>
 8001e84:	e01b      	b.n	8001ebe <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001e86:	4b1f      	ldr	r3, [pc, #124]	; (8001f04 <HAL_RCC_OscConfig+0x4b8>)
 8001e88:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e8c:	4a1d      	ldr	r2, [pc, #116]	; (8001f04 <HAL_RCC_OscConfig+0x4b8>)
 8001e8e:	f023 0301 	bic.w	r3, r3, #1
 8001e92:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e96:	f7ff f969 	bl	800116c <HAL_GetTick>
 8001e9a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001e9c:	e008      	b.n	8001eb0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e9e:	f7ff f965 	bl	800116c <HAL_GetTick>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	d901      	bls.n	8001eb0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001eac:	2303      	movs	r3, #3
 8001eae:	e0dd      	b.n	800206c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001eb0:	4b14      	ldr	r3, [pc, #80]	; (8001f04 <HAL_RCC_OscConfig+0x4b8>)
 8001eb2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001eb6:	f003 0302 	and.w	r3, r3, #2
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d1ef      	bne.n	8001e9e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	69db      	ldr	r3, [r3, #28]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	f000 80d1 	beq.w	800206a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ec8:	4b0e      	ldr	r3, [pc, #56]	; (8001f04 <HAL_RCC_OscConfig+0x4b8>)
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f003 030c 	and.w	r3, r3, #12
 8001ed0:	2b0c      	cmp	r3, #12
 8001ed2:	f000 808b 	beq.w	8001fec <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	69db      	ldr	r3, [r3, #28]
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d15e      	bne.n	8001f9c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ede:	4b09      	ldr	r3, [pc, #36]	; (8001f04 <HAL_RCC_OscConfig+0x4b8>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a08      	ldr	r2, [pc, #32]	; (8001f04 <HAL_RCC_OscConfig+0x4b8>)
 8001ee4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ee8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eea:	f7ff f93f 	bl	800116c <HAL_GetTick>
 8001eee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ef0:	e00c      	b.n	8001f0c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ef2:	f7ff f93b 	bl	800116c <HAL_GetTick>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d905      	bls.n	8001f0c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	e0b3      	b.n	800206c <HAL_RCC_OscConfig+0x620>
 8001f04:	40021000 	.word	0x40021000
 8001f08:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f0c:	4b59      	ldr	r3, [pc, #356]	; (8002074 <HAL_RCC_OscConfig+0x628>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d1ec      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f18:	4b56      	ldr	r3, [pc, #344]	; (8002074 <HAL_RCC_OscConfig+0x628>)
 8001f1a:	68da      	ldr	r2, [r3, #12]
 8001f1c:	4b56      	ldr	r3, [pc, #344]	; (8002078 <HAL_RCC_OscConfig+0x62c>)
 8001f1e:	4013      	ands	r3, r2
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	6a11      	ldr	r1, [r2, #32]
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f28:	3a01      	subs	r2, #1
 8001f2a:	0112      	lsls	r2, r2, #4
 8001f2c:	4311      	orrs	r1, r2
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001f32:	0212      	lsls	r2, r2, #8
 8001f34:	4311      	orrs	r1, r2
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001f3a:	0852      	lsrs	r2, r2, #1
 8001f3c:	3a01      	subs	r2, #1
 8001f3e:	0552      	lsls	r2, r2, #21
 8001f40:	4311      	orrs	r1, r2
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001f46:	0852      	lsrs	r2, r2, #1
 8001f48:	3a01      	subs	r2, #1
 8001f4a:	0652      	lsls	r2, r2, #25
 8001f4c:	4311      	orrs	r1, r2
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001f52:	06d2      	lsls	r2, r2, #27
 8001f54:	430a      	orrs	r2, r1
 8001f56:	4947      	ldr	r1, [pc, #284]	; (8002074 <HAL_RCC_OscConfig+0x628>)
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f5c:	4b45      	ldr	r3, [pc, #276]	; (8002074 <HAL_RCC_OscConfig+0x628>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a44      	ldr	r2, [pc, #272]	; (8002074 <HAL_RCC_OscConfig+0x628>)
 8001f62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f66:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f68:	4b42      	ldr	r3, [pc, #264]	; (8002074 <HAL_RCC_OscConfig+0x628>)
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	4a41      	ldr	r2, [pc, #260]	; (8002074 <HAL_RCC_OscConfig+0x628>)
 8001f6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f72:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f74:	f7ff f8fa 	bl	800116c <HAL_GetTick>
 8001f78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f7a:	e008      	b.n	8001f8e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f7c:	f7ff f8f6 	bl	800116c <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	2b02      	cmp	r3, #2
 8001f88:	d901      	bls.n	8001f8e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e06e      	b.n	800206c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f8e:	4b39      	ldr	r3, [pc, #228]	; (8002074 <HAL_RCC_OscConfig+0x628>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d0f0      	beq.n	8001f7c <HAL_RCC_OscConfig+0x530>
 8001f9a:	e066      	b.n	800206a <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f9c:	4b35      	ldr	r3, [pc, #212]	; (8002074 <HAL_RCC_OscConfig+0x628>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a34      	ldr	r2, [pc, #208]	; (8002074 <HAL_RCC_OscConfig+0x628>)
 8001fa2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fa6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001fa8:	4b32      	ldr	r3, [pc, #200]	; (8002074 <HAL_RCC_OscConfig+0x628>)
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	4a31      	ldr	r2, [pc, #196]	; (8002074 <HAL_RCC_OscConfig+0x628>)
 8001fae:	f023 0303 	bic.w	r3, r3, #3
 8001fb2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001fb4:	4b2f      	ldr	r3, [pc, #188]	; (8002074 <HAL_RCC_OscConfig+0x628>)
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	4a2e      	ldr	r2, [pc, #184]	; (8002074 <HAL_RCC_OscConfig+0x628>)
 8001fba:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001fbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fc2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc4:	f7ff f8d2 	bl	800116c <HAL_GetTick>
 8001fc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fca:	e008      	b.n	8001fde <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fcc:	f7ff f8ce 	bl	800116c <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d901      	bls.n	8001fde <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e046      	b.n	800206c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fde:	4b25      	ldr	r3, [pc, #148]	; (8002074 <HAL_RCC_OscConfig+0x628>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d1f0      	bne.n	8001fcc <HAL_RCC_OscConfig+0x580>
 8001fea:	e03e      	b.n	800206a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	69db      	ldr	r3, [r3, #28]
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d101      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e039      	b.n	800206c <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001ff8:	4b1e      	ldr	r3, [pc, #120]	; (8002074 <HAL_RCC_OscConfig+0x628>)
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	f003 0203 	and.w	r2, r3, #3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6a1b      	ldr	r3, [r3, #32]
 8002008:	429a      	cmp	r2, r3
 800200a:	d12c      	bne.n	8002066 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002016:	3b01      	subs	r3, #1
 8002018:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800201a:	429a      	cmp	r2, r3
 800201c:	d123      	bne.n	8002066 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002028:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800202a:	429a      	cmp	r2, r3
 800202c:	d11b      	bne.n	8002066 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002038:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800203a:	429a      	cmp	r2, r3
 800203c:	d113      	bne.n	8002066 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002048:	085b      	lsrs	r3, r3, #1
 800204a:	3b01      	subs	r3, #1
 800204c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800204e:	429a      	cmp	r2, r3
 8002050:	d109      	bne.n	8002066 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800205c:	085b      	lsrs	r3, r3, #1
 800205e:	3b01      	subs	r3, #1
 8002060:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002062:	429a      	cmp	r2, r3
 8002064:	d001      	beq.n	800206a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e000      	b.n	800206c <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800206a:	2300      	movs	r3, #0
}
 800206c:	4618      	mov	r0, r3
 800206e:	3720      	adds	r7, #32
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	40021000 	.word	0x40021000
 8002078:	019f800c 	.word	0x019f800c

0800207c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b086      	sub	sp, #24
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002086:	2300      	movs	r3, #0
 8002088:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d101      	bne.n	8002094 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e11e      	b.n	80022d2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002094:	4b91      	ldr	r3, [pc, #580]	; (80022dc <HAL_RCC_ClockConfig+0x260>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 030f 	and.w	r3, r3, #15
 800209c:	683a      	ldr	r2, [r7, #0]
 800209e:	429a      	cmp	r2, r3
 80020a0:	d910      	bls.n	80020c4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020a2:	4b8e      	ldr	r3, [pc, #568]	; (80022dc <HAL_RCC_ClockConfig+0x260>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f023 020f 	bic.w	r2, r3, #15
 80020aa:	498c      	ldr	r1, [pc, #560]	; (80022dc <HAL_RCC_ClockConfig+0x260>)
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020b2:	4b8a      	ldr	r3, [pc, #552]	; (80022dc <HAL_RCC_ClockConfig+0x260>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 030f 	and.w	r3, r3, #15
 80020ba:	683a      	ldr	r2, [r7, #0]
 80020bc:	429a      	cmp	r2, r3
 80020be:	d001      	beq.n	80020c4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e106      	b.n	80022d2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0301 	and.w	r3, r3, #1
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d073      	beq.n	80021b8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	2b03      	cmp	r3, #3
 80020d6:	d129      	bne.n	800212c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020d8:	4b81      	ldr	r3, [pc, #516]	; (80022e0 <HAL_RCC_ClockConfig+0x264>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d101      	bne.n	80020e8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e0f4      	b.n	80022d2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80020e8:	f000 f99e 	bl	8002428 <RCC_GetSysClockFreqFromPLLSource>
 80020ec:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	4a7c      	ldr	r2, [pc, #496]	; (80022e4 <HAL_RCC_ClockConfig+0x268>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d93f      	bls.n	8002176 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80020f6:	4b7a      	ldr	r3, [pc, #488]	; (80022e0 <HAL_RCC_ClockConfig+0x264>)
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d009      	beq.n	8002116 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800210a:	2b00      	cmp	r3, #0
 800210c:	d033      	beq.n	8002176 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002112:	2b00      	cmp	r3, #0
 8002114:	d12f      	bne.n	8002176 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002116:	4b72      	ldr	r3, [pc, #456]	; (80022e0 <HAL_RCC_ClockConfig+0x264>)
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800211e:	4a70      	ldr	r2, [pc, #448]	; (80022e0 <HAL_RCC_ClockConfig+0x264>)
 8002120:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002124:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002126:	2380      	movs	r3, #128	; 0x80
 8002128:	617b      	str	r3, [r7, #20]
 800212a:	e024      	b.n	8002176 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	2b02      	cmp	r3, #2
 8002132:	d107      	bne.n	8002144 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002134:	4b6a      	ldr	r3, [pc, #424]	; (80022e0 <HAL_RCC_ClockConfig+0x264>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d109      	bne.n	8002154 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e0c6      	b.n	80022d2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002144:	4b66      	ldr	r3, [pc, #408]	; (80022e0 <HAL_RCC_ClockConfig+0x264>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800214c:	2b00      	cmp	r3, #0
 800214e:	d101      	bne.n	8002154 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e0be      	b.n	80022d2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002154:	f000 f8ce 	bl	80022f4 <HAL_RCC_GetSysClockFreq>
 8002158:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	4a61      	ldr	r2, [pc, #388]	; (80022e4 <HAL_RCC_ClockConfig+0x268>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d909      	bls.n	8002176 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002162:	4b5f      	ldr	r3, [pc, #380]	; (80022e0 <HAL_RCC_ClockConfig+0x264>)
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800216a:	4a5d      	ldr	r2, [pc, #372]	; (80022e0 <HAL_RCC_ClockConfig+0x264>)
 800216c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002170:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002172:	2380      	movs	r3, #128	; 0x80
 8002174:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002176:	4b5a      	ldr	r3, [pc, #360]	; (80022e0 <HAL_RCC_ClockConfig+0x264>)
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	f023 0203 	bic.w	r2, r3, #3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	4957      	ldr	r1, [pc, #348]	; (80022e0 <HAL_RCC_ClockConfig+0x264>)
 8002184:	4313      	orrs	r3, r2
 8002186:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002188:	f7fe fff0 	bl	800116c <HAL_GetTick>
 800218c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800218e:	e00a      	b.n	80021a6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002190:	f7fe ffec 	bl	800116c <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	f241 3288 	movw	r2, #5000	; 0x1388
 800219e:	4293      	cmp	r3, r2
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e095      	b.n	80022d2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021a6:	4b4e      	ldr	r3, [pc, #312]	; (80022e0 <HAL_RCC_ClockConfig+0x264>)
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	f003 020c 	and.w	r2, r3, #12
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d1eb      	bne.n	8002190 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0302 	and.w	r3, r3, #2
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d023      	beq.n	800220c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0304 	and.w	r3, r3, #4
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d005      	beq.n	80021dc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021d0:	4b43      	ldr	r3, [pc, #268]	; (80022e0 <HAL_RCC_ClockConfig+0x264>)
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	4a42      	ldr	r2, [pc, #264]	; (80022e0 <HAL_RCC_ClockConfig+0x264>)
 80021d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80021da:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0308 	and.w	r3, r3, #8
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d007      	beq.n	80021f8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80021e8:	4b3d      	ldr	r3, [pc, #244]	; (80022e0 <HAL_RCC_ClockConfig+0x264>)
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80021f0:	4a3b      	ldr	r2, [pc, #236]	; (80022e0 <HAL_RCC_ClockConfig+0x264>)
 80021f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80021f6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021f8:	4b39      	ldr	r3, [pc, #228]	; (80022e0 <HAL_RCC_ClockConfig+0x264>)
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	4936      	ldr	r1, [pc, #216]	; (80022e0 <HAL_RCC_ClockConfig+0x264>)
 8002206:	4313      	orrs	r3, r2
 8002208:	608b      	str	r3, [r1, #8]
 800220a:	e008      	b.n	800221e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	2b80      	cmp	r3, #128	; 0x80
 8002210:	d105      	bne.n	800221e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002212:	4b33      	ldr	r3, [pc, #204]	; (80022e0 <HAL_RCC_ClockConfig+0x264>)
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	4a32      	ldr	r2, [pc, #200]	; (80022e0 <HAL_RCC_ClockConfig+0x264>)
 8002218:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800221c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800221e:	4b2f      	ldr	r3, [pc, #188]	; (80022dc <HAL_RCC_ClockConfig+0x260>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 030f 	and.w	r3, r3, #15
 8002226:	683a      	ldr	r2, [r7, #0]
 8002228:	429a      	cmp	r2, r3
 800222a:	d21d      	bcs.n	8002268 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800222c:	4b2b      	ldr	r3, [pc, #172]	; (80022dc <HAL_RCC_ClockConfig+0x260>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f023 020f 	bic.w	r2, r3, #15
 8002234:	4929      	ldr	r1, [pc, #164]	; (80022dc <HAL_RCC_ClockConfig+0x260>)
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	4313      	orrs	r3, r2
 800223a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800223c:	f7fe ff96 	bl	800116c <HAL_GetTick>
 8002240:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002242:	e00a      	b.n	800225a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002244:	f7fe ff92 	bl	800116c <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002252:	4293      	cmp	r3, r2
 8002254:	d901      	bls.n	800225a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e03b      	b.n	80022d2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800225a:	4b20      	ldr	r3, [pc, #128]	; (80022dc <HAL_RCC_ClockConfig+0x260>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 030f 	and.w	r3, r3, #15
 8002262:	683a      	ldr	r2, [r7, #0]
 8002264:	429a      	cmp	r2, r3
 8002266:	d1ed      	bne.n	8002244 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0304 	and.w	r3, r3, #4
 8002270:	2b00      	cmp	r3, #0
 8002272:	d008      	beq.n	8002286 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002274:	4b1a      	ldr	r3, [pc, #104]	; (80022e0 <HAL_RCC_ClockConfig+0x264>)
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	4917      	ldr	r1, [pc, #92]	; (80022e0 <HAL_RCC_ClockConfig+0x264>)
 8002282:	4313      	orrs	r3, r2
 8002284:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0308 	and.w	r3, r3, #8
 800228e:	2b00      	cmp	r3, #0
 8002290:	d009      	beq.n	80022a6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002292:	4b13      	ldr	r3, [pc, #76]	; (80022e0 <HAL_RCC_ClockConfig+0x264>)
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	691b      	ldr	r3, [r3, #16]
 800229e:	00db      	lsls	r3, r3, #3
 80022a0:	490f      	ldr	r1, [pc, #60]	; (80022e0 <HAL_RCC_ClockConfig+0x264>)
 80022a2:	4313      	orrs	r3, r2
 80022a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80022a6:	f000 f825 	bl	80022f4 <HAL_RCC_GetSysClockFreq>
 80022aa:	4602      	mov	r2, r0
 80022ac:	4b0c      	ldr	r3, [pc, #48]	; (80022e0 <HAL_RCC_ClockConfig+0x264>)
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	091b      	lsrs	r3, r3, #4
 80022b2:	f003 030f 	and.w	r3, r3, #15
 80022b6:	490c      	ldr	r1, [pc, #48]	; (80022e8 <HAL_RCC_ClockConfig+0x26c>)
 80022b8:	5ccb      	ldrb	r3, [r1, r3]
 80022ba:	f003 031f 	and.w	r3, r3, #31
 80022be:	fa22 f303 	lsr.w	r3, r2, r3
 80022c2:	4a0a      	ldr	r2, [pc, #40]	; (80022ec <HAL_RCC_ClockConfig+0x270>)
 80022c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80022c6:	4b0a      	ldr	r3, [pc, #40]	; (80022f0 <HAL_RCC_ClockConfig+0x274>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7fe ff02 	bl	80010d4 <HAL_InitTick>
 80022d0:	4603      	mov	r3, r0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3718      	adds	r7, #24
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	40022000 	.word	0x40022000
 80022e0:	40021000 	.word	0x40021000
 80022e4:	04c4b400 	.word	0x04c4b400
 80022e8:	08007710 	.word	0x08007710
 80022ec:	20000098 	.word	0x20000098
 80022f0:	2000009c 	.word	0x2000009c

080022f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b087      	sub	sp, #28
 80022f8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80022fa:	4b2c      	ldr	r3, [pc, #176]	; (80023ac <HAL_RCC_GetSysClockFreq+0xb8>)
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	f003 030c 	and.w	r3, r3, #12
 8002302:	2b04      	cmp	r3, #4
 8002304:	d102      	bne.n	800230c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002306:	4b2a      	ldr	r3, [pc, #168]	; (80023b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002308:	613b      	str	r3, [r7, #16]
 800230a:	e047      	b.n	800239c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800230c:	4b27      	ldr	r3, [pc, #156]	; (80023ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	f003 030c 	and.w	r3, r3, #12
 8002314:	2b08      	cmp	r3, #8
 8002316:	d102      	bne.n	800231e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002318:	4b26      	ldr	r3, [pc, #152]	; (80023b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800231a:	613b      	str	r3, [r7, #16]
 800231c:	e03e      	b.n	800239c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800231e:	4b23      	ldr	r3, [pc, #140]	; (80023ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	f003 030c 	and.w	r3, r3, #12
 8002326:	2b0c      	cmp	r3, #12
 8002328:	d136      	bne.n	8002398 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800232a:	4b20      	ldr	r3, [pc, #128]	; (80023ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800232c:	68db      	ldr	r3, [r3, #12]
 800232e:	f003 0303 	and.w	r3, r3, #3
 8002332:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002334:	4b1d      	ldr	r3, [pc, #116]	; (80023ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	091b      	lsrs	r3, r3, #4
 800233a:	f003 030f 	and.w	r3, r3, #15
 800233e:	3301      	adds	r3, #1
 8002340:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2b03      	cmp	r3, #3
 8002346:	d10c      	bne.n	8002362 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002348:	4a1a      	ldr	r2, [pc, #104]	; (80023b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002350:	4a16      	ldr	r2, [pc, #88]	; (80023ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002352:	68d2      	ldr	r2, [r2, #12]
 8002354:	0a12      	lsrs	r2, r2, #8
 8002356:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800235a:	fb02 f303 	mul.w	r3, r2, r3
 800235e:	617b      	str	r3, [r7, #20]
      break;
 8002360:	e00c      	b.n	800237c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002362:	4a13      	ldr	r2, [pc, #76]	; (80023b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	fbb2 f3f3 	udiv	r3, r2, r3
 800236a:	4a10      	ldr	r2, [pc, #64]	; (80023ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800236c:	68d2      	ldr	r2, [r2, #12]
 800236e:	0a12      	lsrs	r2, r2, #8
 8002370:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002374:	fb02 f303 	mul.w	r3, r2, r3
 8002378:	617b      	str	r3, [r7, #20]
      break;
 800237a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800237c:	4b0b      	ldr	r3, [pc, #44]	; (80023ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	0e5b      	lsrs	r3, r3, #25
 8002382:	f003 0303 	and.w	r3, r3, #3
 8002386:	3301      	adds	r3, #1
 8002388:	005b      	lsls	r3, r3, #1
 800238a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800238c:	697a      	ldr	r2, [r7, #20]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	fbb2 f3f3 	udiv	r3, r2, r3
 8002394:	613b      	str	r3, [r7, #16]
 8002396:	e001      	b.n	800239c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002398:	2300      	movs	r3, #0
 800239a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800239c:	693b      	ldr	r3, [r7, #16]
}
 800239e:	4618      	mov	r0, r3
 80023a0:	371c      	adds	r7, #28
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	40021000 	.word	0x40021000
 80023b0:	00f42400 	.word	0x00f42400
 80023b4:	016e3600 	.word	0x016e3600

080023b8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023bc:	4b03      	ldr	r3, [pc, #12]	; (80023cc <HAL_RCC_GetHCLKFreq+0x14>)
 80023be:	681b      	ldr	r3, [r3, #0]
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	20000098 	.word	0x20000098

080023d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80023d4:	f7ff fff0 	bl	80023b8 <HAL_RCC_GetHCLKFreq>
 80023d8:	4602      	mov	r2, r0
 80023da:	4b06      	ldr	r3, [pc, #24]	; (80023f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	0a1b      	lsrs	r3, r3, #8
 80023e0:	f003 0307 	and.w	r3, r3, #7
 80023e4:	4904      	ldr	r1, [pc, #16]	; (80023f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80023e6:	5ccb      	ldrb	r3, [r1, r3]
 80023e8:	f003 031f 	and.w	r3, r3, #31
 80023ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	40021000 	.word	0x40021000
 80023f8:	08007720 	.word	0x08007720

080023fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002400:	f7ff ffda 	bl	80023b8 <HAL_RCC_GetHCLKFreq>
 8002404:	4602      	mov	r2, r0
 8002406:	4b06      	ldr	r3, [pc, #24]	; (8002420 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	0adb      	lsrs	r3, r3, #11
 800240c:	f003 0307 	and.w	r3, r3, #7
 8002410:	4904      	ldr	r1, [pc, #16]	; (8002424 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002412:	5ccb      	ldrb	r3, [r1, r3]
 8002414:	f003 031f 	and.w	r3, r3, #31
 8002418:	fa22 f303 	lsr.w	r3, r2, r3
}
 800241c:	4618      	mov	r0, r3
 800241e:	bd80      	pop	{r7, pc}
 8002420:	40021000 	.word	0x40021000
 8002424:	08007720 	.word	0x08007720

08002428 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002428:	b480      	push	{r7}
 800242a:	b087      	sub	sp, #28
 800242c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800242e:	4b1e      	ldr	r3, [pc, #120]	; (80024a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	f003 0303 	and.w	r3, r3, #3
 8002436:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002438:	4b1b      	ldr	r3, [pc, #108]	; (80024a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	091b      	lsrs	r3, r3, #4
 800243e:	f003 030f 	and.w	r3, r3, #15
 8002442:	3301      	adds	r3, #1
 8002444:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	2b03      	cmp	r3, #3
 800244a:	d10c      	bne.n	8002466 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800244c:	4a17      	ldr	r2, [pc, #92]	; (80024ac <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	fbb2 f3f3 	udiv	r3, r2, r3
 8002454:	4a14      	ldr	r2, [pc, #80]	; (80024a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002456:	68d2      	ldr	r2, [r2, #12]
 8002458:	0a12      	lsrs	r2, r2, #8
 800245a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800245e:	fb02 f303 	mul.w	r3, r2, r3
 8002462:	617b      	str	r3, [r7, #20]
    break;
 8002464:	e00c      	b.n	8002480 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002466:	4a12      	ldr	r2, [pc, #72]	; (80024b0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	fbb2 f3f3 	udiv	r3, r2, r3
 800246e:	4a0e      	ldr	r2, [pc, #56]	; (80024a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002470:	68d2      	ldr	r2, [r2, #12]
 8002472:	0a12      	lsrs	r2, r2, #8
 8002474:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002478:	fb02 f303 	mul.w	r3, r2, r3
 800247c:	617b      	str	r3, [r7, #20]
    break;
 800247e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002480:	4b09      	ldr	r3, [pc, #36]	; (80024a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	0e5b      	lsrs	r3, r3, #25
 8002486:	f003 0303 	and.w	r3, r3, #3
 800248a:	3301      	adds	r3, #1
 800248c:	005b      	lsls	r3, r3, #1
 800248e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002490:	697a      	ldr	r2, [r7, #20]
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	fbb2 f3f3 	udiv	r3, r2, r3
 8002498:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800249a:	687b      	ldr	r3, [r7, #4]
}
 800249c:	4618      	mov	r0, r3
 800249e:	371c      	adds	r7, #28
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr
 80024a8:	40021000 	.word	0x40021000
 80024ac:	016e3600 	.word	0x016e3600
 80024b0:	00f42400 	.word	0x00f42400

080024b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b086      	sub	sp, #24
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80024bc:	2300      	movs	r3, #0
 80024be:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80024c0:	2300      	movs	r3, #0
 80024c2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	f000 8098 	beq.w	8002602 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024d2:	2300      	movs	r3, #0
 80024d4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024d6:	4b43      	ldr	r3, [pc, #268]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d10d      	bne.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024e2:	4b40      	ldr	r3, [pc, #256]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024e6:	4a3f      	ldr	r2, [pc, #252]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024ec:	6593      	str	r3, [r2, #88]	; 0x58
 80024ee:	4b3d      	ldr	r3, [pc, #244]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024f6:	60bb      	str	r3, [r7, #8]
 80024f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024fa:	2301      	movs	r3, #1
 80024fc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024fe:	4b3a      	ldr	r3, [pc, #232]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a39      	ldr	r2, [pc, #228]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002504:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002508:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800250a:	f7fe fe2f 	bl	800116c <HAL_GetTick>
 800250e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002510:	e009      	b.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002512:	f7fe fe2b 	bl	800116c <HAL_GetTick>
 8002516:	4602      	mov	r2, r0
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	2b02      	cmp	r3, #2
 800251e:	d902      	bls.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	74fb      	strb	r3, [r7, #19]
        break;
 8002524:	e005      	b.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002526:	4b30      	ldr	r3, [pc, #192]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800252e:	2b00      	cmp	r3, #0
 8002530:	d0ef      	beq.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002532:	7cfb      	ldrb	r3, [r7, #19]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d159      	bne.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002538:	4b2a      	ldr	r3, [pc, #168]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800253a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800253e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002542:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d01e      	beq.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800254e:	697a      	ldr	r2, [r7, #20]
 8002550:	429a      	cmp	r2, r3
 8002552:	d019      	beq.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002554:	4b23      	ldr	r3, [pc, #140]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002556:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800255a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800255e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002560:	4b20      	ldr	r3, [pc, #128]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002562:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002566:	4a1f      	ldr	r2, [pc, #124]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002568:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800256c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002570:	4b1c      	ldr	r3, [pc, #112]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002576:	4a1b      	ldr	r2, [pc, #108]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002578:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800257c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002580:	4a18      	ldr	r2, [pc, #96]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	f003 0301 	and.w	r3, r3, #1
 800258e:	2b00      	cmp	r3, #0
 8002590:	d016      	beq.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002592:	f7fe fdeb 	bl	800116c <HAL_GetTick>
 8002596:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002598:	e00b      	b.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800259a:	f7fe fde7 	bl	800116c <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d902      	bls.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80025ac:	2303      	movs	r3, #3
 80025ae:	74fb      	strb	r3, [r7, #19]
            break;
 80025b0:	e006      	b.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025b2:	4b0c      	ldr	r3, [pc, #48]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025b8:	f003 0302 	and.w	r3, r3, #2
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d0ec      	beq.n	800259a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80025c0:	7cfb      	ldrb	r3, [r7, #19]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d10b      	bne.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025c6:	4b07      	ldr	r3, [pc, #28]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025d4:	4903      	ldr	r1, [pc, #12]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80025dc:	e008      	b.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80025de:	7cfb      	ldrb	r3, [r7, #19]
 80025e0:	74bb      	strb	r3, [r7, #18]
 80025e2:	e005      	b.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80025e4:	40021000 	.word	0x40021000
 80025e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025ec:	7cfb      	ldrb	r3, [r7, #19]
 80025ee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025f0:	7c7b      	ldrb	r3, [r7, #17]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d105      	bne.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025f6:	4ba7      	ldr	r3, [pc, #668]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025fa:	4aa6      	ldr	r2, [pc, #664]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002600:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0301 	and.w	r3, r3, #1
 800260a:	2b00      	cmp	r3, #0
 800260c:	d00a      	beq.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800260e:	4ba1      	ldr	r3, [pc, #644]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002610:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002614:	f023 0203 	bic.w	r2, r3, #3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	499d      	ldr	r1, [pc, #628]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800261e:	4313      	orrs	r3, r2
 8002620:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0302 	and.w	r3, r3, #2
 800262c:	2b00      	cmp	r3, #0
 800262e:	d00a      	beq.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002630:	4b98      	ldr	r3, [pc, #608]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002636:	f023 020c 	bic.w	r2, r3, #12
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	4995      	ldr	r1, [pc, #596]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002640:	4313      	orrs	r3, r2
 8002642:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0304 	and.w	r3, r3, #4
 800264e:	2b00      	cmp	r3, #0
 8002650:	d00a      	beq.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002652:	4b90      	ldr	r3, [pc, #576]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002654:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002658:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	498c      	ldr	r1, [pc, #560]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002662:	4313      	orrs	r3, r2
 8002664:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0308 	and.w	r3, r3, #8
 8002670:	2b00      	cmp	r3, #0
 8002672:	d00a      	beq.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002674:	4b87      	ldr	r3, [pc, #540]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800267a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	691b      	ldr	r3, [r3, #16]
 8002682:	4984      	ldr	r1, [pc, #528]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002684:	4313      	orrs	r3, r2
 8002686:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0310 	and.w	r3, r3, #16
 8002692:	2b00      	cmp	r3, #0
 8002694:	d00a      	beq.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002696:	4b7f      	ldr	r3, [pc, #508]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002698:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800269c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	695b      	ldr	r3, [r3, #20]
 80026a4:	497b      	ldr	r1, [pc, #492]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0320 	and.w	r3, r3, #32
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d00a      	beq.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80026b8:	4b76      	ldr	r3, [pc, #472]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026be:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	699b      	ldr	r3, [r3, #24]
 80026c6:	4973      	ldr	r1, [pc, #460]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026c8:	4313      	orrs	r3, r2
 80026ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d00a      	beq.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026da:	4b6e      	ldr	r3, [pc, #440]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026e0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	69db      	ldr	r3, [r3, #28]
 80026e8:	496a      	ldr	r1, [pc, #424]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d00a      	beq.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80026fc:	4b65      	ldr	r3, [pc, #404]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002702:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6a1b      	ldr	r3, [r3, #32]
 800270a:	4962      	ldr	r1, [pc, #392]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800270c:	4313      	orrs	r3, r2
 800270e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800271a:	2b00      	cmp	r3, #0
 800271c:	d00a      	beq.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800271e:	4b5d      	ldr	r3, [pc, #372]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002720:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002724:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272c:	4959      	ldr	r1, [pc, #356]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800272e:	4313      	orrs	r3, r2
 8002730:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800273c:	2b00      	cmp	r3, #0
 800273e:	d00a      	beq.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002740:	4b54      	ldr	r3, [pc, #336]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002742:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002746:	f023 0203 	bic.w	r2, r3, #3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800274e:	4951      	ldr	r1, [pc, #324]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002750:	4313      	orrs	r3, r2
 8002752:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800275e:	2b00      	cmp	r3, #0
 8002760:	d00a      	beq.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002762:	4b4c      	ldr	r3, [pc, #304]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002764:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002768:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002770:	4948      	ldr	r1, [pc, #288]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002772:	4313      	orrs	r3, r2
 8002774:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002780:	2b00      	cmp	r3, #0
 8002782:	d015      	beq.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002784:	4b43      	ldr	r3, [pc, #268]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800278a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002792:	4940      	ldr	r1, [pc, #256]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002794:	4313      	orrs	r3, r2
 8002796:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80027a2:	d105      	bne.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027a4:	4b3b      	ldr	r3, [pc, #236]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	4a3a      	ldr	r2, [pc, #232]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027ae:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d015      	beq.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80027bc:	4b35      	ldr	r3, [pc, #212]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027c2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ca:	4932      	ldr	r1, [pc, #200]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027cc:	4313      	orrs	r3, r2
 80027ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027da:	d105      	bne.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027dc:	4b2d      	ldr	r3, [pc, #180]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	4a2c      	ldr	r2, [pc, #176]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027e6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d015      	beq.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80027f4:	4b27      	ldr	r3, [pc, #156]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027fa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002802:	4924      	ldr	r1, [pc, #144]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002804:	4313      	orrs	r3, r2
 8002806:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800280e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002812:	d105      	bne.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002814:	4b1f      	ldr	r3, [pc, #124]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	4a1e      	ldr	r2, [pc, #120]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800281a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800281e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d015      	beq.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800282c:	4b19      	ldr	r3, [pc, #100]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800282e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002832:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800283a:	4916      	ldr	r1, [pc, #88]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800283c:	4313      	orrs	r3, r2
 800283e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002846:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800284a:	d105      	bne.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800284c:	4b11      	ldr	r3, [pc, #68]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	4a10      	ldr	r2, [pc, #64]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002852:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002856:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d019      	beq.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002864:	4b0b      	ldr	r3, [pc, #44]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800286a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002872:	4908      	ldr	r1, [pc, #32]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002874:	4313      	orrs	r3, r2
 8002876:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002882:	d109      	bne.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002884:	4b03      	ldr	r3, [pc, #12]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	4a02      	ldr	r2, [pc, #8]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800288a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800288e:	60d3      	str	r3, [r2, #12]
 8002890:	e002      	b.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002892:	bf00      	nop
 8002894:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d015      	beq.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80028a4:	4b29      	ldr	r3, [pc, #164]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80028a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028aa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b2:	4926      	ldr	r1, [pc, #152]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80028b4:	4313      	orrs	r3, r2
 80028b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80028c2:	d105      	bne.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80028c4:	4b21      	ldr	r3, [pc, #132]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	4a20      	ldr	r2, [pc, #128]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80028ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028ce:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d015      	beq.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80028dc:	4b1b      	ldr	r3, [pc, #108]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80028de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028e2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028ea:	4918      	ldr	r1, [pc, #96]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80028ec:	4313      	orrs	r3, r2
 80028ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028fa:	d105      	bne.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80028fc:	4b13      	ldr	r3, [pc, #76]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	4a12      	ldr	r2, [pc, #72]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002902:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002906:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002910:	2b00      	cmp	r3, #0
 8002912:	d015      	beq.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002914:	4b0d      	ldr	r3, [pc, #52]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002916:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800291a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002922:	490a      	ldr	r1, [pc, #40]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002924:	4313      	orrs	r3, r2
 8002926:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800292e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002932:	d105      	bne.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002934:	4b05      	ldr	r3, [pc, #20]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	4a04      	ldr	r2, [pc, #16]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800293a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800293e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002940:	7cbb      	ldrb	r3, [r7, #18]
}
 8002942:	4618      	mov	r0, r3
 8002944:	3718      	adds	r7, #24
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	40021000 	.word	0x40021000

08002950 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d101      	bne.n	8002962 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e049      	b.n	80029f6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002968:	b2db      	uxtb	r3, r3
 800296a:	2b00      	cmp	r3, #0
 800296c:	d106      	bne.n	800297c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f7fe f99e 	bl	8000cb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2202      	movs	r2, #2
 8002980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	3304      	adds	r3, #4
 800298c:	4619      	mov	r1, r3
 800298e:	4610      	mov	r0, r2
 8002990:	f000 fbd2 	bl	8003138 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2201      	movs	r2, #1
 80029d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3708      	adds	r7, #8
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}

080029fe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80029fe:	b580      	push	{r7, lr}
 8002a00:	b082      	sub	sp, #8
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d101      	bne.n	8002a10 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e049      	b.n	8002aa4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d106      	bne.n	8002a2a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f000 f841 	bl	8002aac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2202      	movs	r2, #2
 8002a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	3304      	adds	r3, #4
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	4610      	mov	r0, r2
 8002a3e:	f000 fb7b 	bl	8003138 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2201      	movs	r2, #1
 8002a46:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2201      	movs	r2, #1
 8002a56:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2201      	movs	r2, #1
 8002a66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2201      	movs	r2, #1
 8002a76:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2201      	movs	r2, #1
 8002a86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2201      	movs	r2, #1
 8002a96:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002aa2:	2300      	movs	r3, #0
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3708      	adds	r7, #8
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002ab4:	bf00      	nop
 8002ab6:	370c      	adds	r7, #12
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr

08002ac0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b084      	sub	sp, #16
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d109      	bne.n	8002ae4 <HAL_TIM_PWM_Start+0x24>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	bf14      	ite	ne
 8002adc:	2301      	movne	r3, #1
 8002ade:	2300      	moveq	r3, #0
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	e03c      	b.n	8002b5e <HAL_TIM_PWM_Start+0x9e>
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	2b04      	cmp	r3, #4
 8002ae8:	d109      	bne.n	8002afe <HAL_TIM_PWM_Start+0x3e>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	bf14      	ite	ne
 8002af6:	2301      	movne	r3, #1
 8002af8:	2300      	moveq	r3, #0
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	e02f      	b.n	8002b5e <HAL_TIM_PWM_Start+0x9e>
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	2b08      	cmp	r3, #8
 8002b02:	d109      	bne.n	8002b18 <HAL_TIM_PWM_Start+0x58>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	bf14      	ite	ne
 8002b10:	2301      	movne	r3, #1
 8002b12:	2300      	moveq	r3, #0
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	e022      	b.n	8002b5e <HAL_TIM_PWM_Start+0x9e>
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	2b0c      	cmp	r3, #12
 8002b1c:	d109      	bne.n	8002b32 <HAL_TIM_PWM_Start+0x72>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	bf14      	ite	ne
 8002b2a:	2301      	movne	r3, #1
 8002b2c:	2300      	moveq	r3, #0
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	e015      	b.n	8002b5e <HAL_TIM_PWM_Start+0x9e>
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	2b10      	cmp	r3, #16
 8002b36:	d109      	bne.n	8002b4c <HAL_TIM_PWM_Start+0x8c>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	bf14      	ite	ne
 8002b44:	2301      	movne	r3, #1
 8002b46:	2300      	moveq	r3, #0
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	e008      	b.n	8002b5e <HAL_TIM_PWM_Start+0x9e>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	bf14      	ite	ne
 8002b58:	2301      	movne	r3, #1
 8002b5a:	2300      	moveq	r3, #0
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e0a6      	b.n	8002cb4 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d104      	bne.n	8002b76 <HAL_TIM_PWM_Start+0xb6>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2202      	movs	r2, #2
 8002b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b74:	e023      	b.n	8002bbe <HAL_TIM_PWM_Start+0xfe>
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	2b04      	cmp	r3, #4
 8002b7a:	d104      	bne.n	8002b86 <HAL_TIM_PWM_Start+0xc6>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2202      	movs	r2, #2
 8002b80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b84:	e01b      	b.n	8002bbe <HAL_TIM_PWM_Start+0xfe>
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	2b08      	cmp	r3, #8
 8002b8a:	d104      	bne.n	8002b96 <HAL_TIM_PWM_Start+0xd6>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2202      	movs	r2, #2
 8002b90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b94:	e013      	b.n	8002bbe <HAL_TIM_PWM_Start+0xfe>
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	2b0c      	cmp	r3, #12
 8002b9a:	d104      	bne.n	8002ba6 <HAL_TIM_PWM_Start+0xe6>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2202      	movs	r2, #2
 8002ba0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002ba4:	e00b      	b.n	8002bbe <HAL_TIM_PWM_Start+0xfe>
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	2b10      	cmp	r3, #16
 8002baa:	d104      	bne.n	8002bb6 <HAL_TIM_PWM_Start+0xf6>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2202      	movs	r2, #2
 8002bb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002bb4:	e003      	b.n	8002bbe <HAL_TIM_PWM_Start+0xfe>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2202      	movs	r2, #2
 8002bba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	6839      	ldr	r1, [r7, #0]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f000 ff24 	bl	8003a14 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a3a      	ldr	r2, [pc, #232]	; (8002cbc <HAL_TIM_PWM_Start+0x1fc>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d018      	beq.n	8002c08 <HAL_TIM_PWM_Start+0x148>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a39      	ldr	r2, [pc, #228]	; (8002cc0 <HAL_TIM_PWM_Start+0x200>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d013      	beq.n	8002c08 <HAL_TIM_PWM_Start+0x148>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a37      	ldr	r2, [pc, #220]	; (8002cc4 <HAL_TIM_PWM_Start+0x204>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d00e      	beq.n	8002c08 <HAL_TIM_PWM_Start+0x148>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a36      	ldr	r2, [pc, #216]	; (8002cc8 <HAL_TIM_PWM_Start+0x208>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d009      	beq.n	8002c08 <HAL_TIM_PWM_Start+0x148>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a34      	ldr	r2, [pc, #208]	; (8002ccc <HAL_TIM_PWM_Start+0x20c>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d004      	beq.n	8002c08 <HAL_TIM_PWM_Start+0x148>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a33      	ldr	r2, [pc, #204]	; (8002cd0 <HAL_TIM_PWM_Start+0x210>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d101      	bne.n	8002c0c <HAL_TIM_PWM_Start+0x14c>
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e000      	b.n	8002c0e <HAL_TIM_PWM_Start+0x14e>
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d007      	beq.n	8002c22 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c20:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a25      	ldr	r2, [pc, #148]	; (8002cbc <HAL_TIM_PWM_Start+0x1fc>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d022      	beq.n	8002c72 <HAL_TIM_PWM_Start+0x1b2>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c34:	d01d      	beq.n	8002c72 <HAL_TIM_PWM_Start+0x1b2>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a26      	ldr	r2, [pc, #152]	; (8002cd4 <HAL_TIM_PWM_Start+0x214>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d018      	beq.n	8002c72 <HAL_TIM_PWM_Start+0x1b2>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a24      	ldr	r2, [pc, #144]	; (8002cd8 <HAL_TIM_PWM_Start+0x218>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d013      	beq.n	8002c72 <HAL_TIM_PWM_Start+0x1b2>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a23      	ldr	r2, [pc, #140]	; (8002cdc <HAL_TIM_PWM_Start+0x21c>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d00e      	beq.n	8002c72 <HAL_TIM_PWM_Start+0x1b2>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a19      	ldr	r2, [pc, #100]	; (8002cc0 <HAL_TIM_PWM_Start+0x200>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d009      	beq.n	8002c72 <HAL_TIM_PWM_Start+0x1b2>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a18      	ldr	r2, [pc, #96]	; (8002cc4 <HAL_TIM_PWM_Start+0x204>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d004      	beq.n	8002c72 <HAL_TIM_PWM_Start+0x1b2>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a18      	ldr	r2, [pc, #96]	; (8002cd0 <HAL_TIM_PWM_Start+0x210>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d115      	bne.n	8002c9e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	689a      	ldr	r2, [r3, #8]
 8002c78:	4b19      	ldr	r3, [pc, #100]	; (8002ce0 <HAL_TIM_PWM_Start+0x220>)
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2b06      	cmp	r3, #6
 8002c82:	d015      	beq.n	8002cb0 <HAL_TIM_PWM_Start+0x1f0>
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c8a:	d011      	beq.n	8002cb0 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f042 0201 	orr.w	r2, r2, #1
 8002c9a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c9c:	e008      	b.n	8002cb0 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f042 0201 	orr.w	r2, r2, #1
 8002cac:	601a      	str	r2, [r3, #0]
 8002cae:	e000      	b.n	8002cb2 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cb0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002cb2:	2300      	movs	r3, #0
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3710      	adds	r7, #16
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	40012c00 	.word	0x40012c00
 8002cc0:	40013400 	.word	0x40013400
 8002cc4:	40014000 	.word	0x40014000
 8002cc8:	40014400 	.word	0x40014400
 8002ccc:	40014800 	.word	0x40014800
 8002cd0:	40015000 	.word	0x40015000
 8002cd4:	40000400 	.word	0x40000400
 8002cd8:	40000800 	.word	0x40000800
 8002cdc:	40000c00 	.word	0x40000c00
 8002ce0:	00010007 	.word	0x00010007

08002ce4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b086      	sub	sp, #24
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	60f8      	str	r0, [r7, #12]
 8002cec:	60b9      	str	r1, [r7, #8]
 8002cee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d101      	bne.n	8002d02 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002cfe:	2302      	movs	r3, #2
 8002d00:	e0ff      	b.n	8002f02 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2201      	movs	r2, #1
 8002d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2b14      	cmp	r3, #20
 8002d0e:	f200 80f0 	bhi.w	8002ef2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002d12:	a201      	add	r2, pc, #4	; (adr r2, 8002d18 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d18:	08002d6d 	.word	0x08002d6d
 8002d1c:	08002ef3 	.word	0x08002ef3
 8002d20:	08002ef3 	.word	0x08002ef3
 8002d24:	08002ef3 	.word	0x08002ef3
 8002d28:	08002dad 	.word	0x08002dad
 8002d2c:	08002ef3 	.word	0x08002ef3
 8002d30:	08002ef3 	.word	0x08002ef3
 8002d34:	08002ef3 	.word	0x08002ef3
 8002d38:	08002def 	.word	0x08002def
 8002d3c:	08002ef3 	.word	0x08002ef3
 8002d40:	08002ef3 	.word	0x08002ef3
 8002d44:	08002ef3 	.word	0x08002ef3
 8002d48:	08002e2f 	.word	0x08002e2f
 8002d4c:	08002ef3 	.word	0x08002ef3
 8002d50:	08002ef3 	.word	0x08002ef3
 8002d54:	08002ef3 	.word	0x08002ef3
 8002d58:	08002e71 	.word	0x08002e71
 8002d5c:	08002ef3 	.word	0x08002ef3
 8002d60:	08002ef3 	.word	0x08002ef3
 8002d64:	08002ef3 	.word	0x08002ef3
 8002d68:	08002eb1 	.word	0x08002eb1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	68b9      	ldr	r1, [r7, #8]
 8002d72:	4618      	mov	r0, r3
 8002d74:	f000 fa88 	bl	8003288 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	699a      	ldr	r2, [r3, #24]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f042 0208 	orr.w	r2, r2, #8
 8002d86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	699a      	ldr	r2, [r3, #24]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f022 0204 	bic.w	r2, r2, #4
 8002d96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	6999      	ldr	r1, [r3, #24]
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	691a      	ldr	r2, [r3, #16]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	430a      	orrs	r2, r1
 8002da8:	619a      	str	r2, [r3, #24]
      break;
 8002daa:	e0a5      	b.n	8002ef8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	68b9      	ldr	r1, [r7, #8]
 8002db2:	4618      	mov	r0, r3
 8002db4:	f000 fb02 	bl	80033bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	699a      	ldr	r2, [r3, #24]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002dc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	699a      	ldr	r2, [r3, #24]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	6999      	ldr	r1, [r3, #24]
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	691b      	ldr	r3, [r3, #16]
 8002de2:	021a      	lsls	r2, r3, #8
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	430a      	orrs	r2, r1
 8002dea:	619a      	str	r2, [r3, #24]
      break;
 8002dec:	e084      	b.n	8002ef8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	68b9      	ldr	r1, [r7, #8]
 8002df4:	4618      	mov	r0, r3
 8002df6:	f000 fb75 	bl	80034e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	69da      	ldr	r2, [r3, #28]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f042 0208 	orr.w	r2, r2, #8
 8002e08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	69da      	ldr	r2, [r3, #28]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f022 0204 	bic.w	r2, r2, #4
 8002e18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	69d9      	ldr	r1, [r3, #28]
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	691a      	ldr	r2, [r3, #16]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	430a      	orrs	r2, r1
 8002e2a:	61da      	str	r2, [r3, #28]
      break;
 8002e2c:	e064      	b.n	8002ef8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	68b9      	ldr	r1, [r7, #8]
 8002e34:	4618      	mov	r0, r3
 8002e36:	f000 fbe7 	bl	8003608 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	69da      	ldr	r2, [r3, #28]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	69da      	ldr	r2, [r3, #28]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	69d9      	ldr	r1, [r3, #28]
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	691b      	ldr	r3, [r3, #16]
 8002e64:	021a      	lsls	r2, r3, #8
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	430a      	orrs	r2, r1
 8002e6c:	61da      	str	r2, [r3, #28]
      break;
 8002e6e:	e043      	b.n	8002ef8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	68b9      	ldr	r1, [r7, #8]
 8002e76:	4618      	mov	r0, r3
 8002e78:	f000 fc5a 	bl	8003730 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f042 0208 	orr.w	r2, r2, #8
 8002e8a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f022 0204 	bic.w	r2, r2, #4
 8002e9a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	691a      	ldr	r2, [r3, #16]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	430a      	orrs	r2, r1
 8002eac:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8002eae:	e023      	b.n	8002ef8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	68b9      	ldr	r1, [r7, #8]
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f000 fca4 	bl	8003804 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002eca:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002eda:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	691b      	ldr	r3, [r3, #16]
 8002ee6:	021a      	lsls	r2, r3, #8
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	430a      	orrs	r2, r1
 8002eee:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8002ef0:	e002      	b.n	8002ef8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	75fb      	strb	r3, [r7, #23]
      break;
 8002ef6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2200      	movs	r2, #0
 8002efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002f00:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3718      	adds	r7, #24
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop

08002f0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f16:	2300      	movs	r3, #0
 8002f18:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d101      	bne.n	8002f28 <HAL_TIM_ConfigClockSource+0x1c>
 8002f24:	2302      	movs	r3, #2
 8002f26:	e0f6      	b.n	8003116 <HAL_TIM_ConfigClockSource+0x20a>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2202      	movs	r2, #2
 8002f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8002f46:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002f4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f52:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	68ba      	ldr	r2, [r7, #8]
 8002f5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a6f      	ldr	r2, [pc, #444]	; (8003120 <HAL_TIM_ConfigClockSource+0x214>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	f000 80c1 	beq.w	80030ea <HAL_TIM_ConfigClockSource+0x1de>
 8002f68:	4a6d      	ldr	r2, [pc, #436]	; (8003120 <HAL_TIM_ConfigClockSource+0x214>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	f200 80c6 	bhi.w	80030fc <HAL_TIM_ConfigClockSource+0x1f0>
 8002f70:	4a6c      	ldr	r2, [pc, #432]	; (8003124 <HAL_TIM_ConfigClockSource+0x218>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	f000 80b9 	beq.w	80030ea <HAL_TIM_ConfigClockSource+0x1de>
 8002f78:	4a6a      	ldr	r2, [pc, #424]	; (8003124 <HAL_TIM_ConfigClockSource+0x218>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	f200 80be 	bhi.w	80030fc <HAL_TIM_ConfigClockSource+0x1f0>
 8002f80:	4a69      	ldr	r2, [pc, #420]	; (8003128 <HAL_TIM_ConfigClockSource+0x21c>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	f000 80b1 	beq.w	80030ea <HAL_TIM_ConfigClockSource+0x1de>
 8002f88:	4a67      	ldr	r2, [pc, #412]	; (8003128 <HAL_TIM_ConfigClockSource+0x21c>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	f200 80b6 	bhi.w	80030fc <HAL_TIM_ConfigClockSource+0x1f0>
 8002f90:	4a66      	ldr	r2, [pc, #408]	; (800312c <HAL_TIM_ConfigClockSource+0x220>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	f000 80a9 	beq.w	80030ea <HAL_TIM_ConfigClockSource+0x1de>
 8002f98:	4a64      	ldr	r2, [pc, #400]	; (800312c <HAL_TIM_ConfigClockSource+0x220>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	f200 80ae 	bhi.w	80030fc <HAL_TIM_ConfigClockSource+0x1f0>
 8002fa0:	4a63      	ldr	r2, [pc, #396]	; (8003130 <HAL_TIM_ConfigClockSource+0x224>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	f000 80a1 	beq.w	80030ea <HAL_TIM_ConfigClockSource+0x1de>
 8002fa8:	4a61      	ldr	r2, [pc, #388]	; (8003130 <HAL_TIM_ConfigClockSource+0x224>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	f200 80a6 	bhi.w	80030fc <HAL_TIM_ConfigClockSource+0x1f0>
 8002fb0:	4a60      	ldr	r2, [pc, #384]	; (8003134 <HAL_TIM_ConfigClockSource+0x228>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	f000 8099 	beq.w	80030ea <HAL_TIM_ConfigClockSource+0x1de>
 8002fb8:	4a5e      	ldr	r2, [pc, #376]	; (8003134 <HAL_TIM_ConfigClockSource+0x228>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	f200 809e 	bhi.w	80030fc <HAL_TIM_ConfigClockSource+0x1f0>
 8002fc0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8002fc4:	f000 8091 	beq.w	80030ea <HAL_TIM_ConfigClockSource+0x1de>
 8002fc8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8002fcc:	f200 8096 	bhi.w	80030fc <HAL_TIM_ConfigClockSource+0x1f0>
 8002fd0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fd4:	f000 8089 	beq.w	80030ea <HAL_TIM_ConfigClockSource+0x1de>
 8002fd8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fdc:	f200 808e 	bhi.w	80030fc <HAL_TIM_ConfigClockSource+0x1f0>
 8002fe0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fe4:	d03e      	beq.n	8003064 <HAL_TIM_ConfigClockSource+0x158>
 8002fe6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fea:	f200 8087 	bhi.w	80030fc <HAL_TIM_ConfigClockSource+0x1f0>
 8002fee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ff2:	f000 8086 	beq.w	8003102 <HAL_TIM_ConfigClockSource+0x1f6>
 8002ff6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ffa:	d87f      	bhi.n	80030fc <HAL_TIM_ConfigClockSource+0x1f0>
 8002ffc:	2b70      	cmp	r3, #112	; 0x70
 8002ffe:	d01a      	beq.n	8003036 <HAL_TIM_ConfigClockSource+0x12a>
 8003000:	2b70      	cmp	r3, #112	; 0x70
 8003002:	d87b      	bhi.n	80030fc <HAL_TIM_ConfigClockSource+0x1f0>
 8003004:	2b60      	cmp	r3, #96	; 0x60
 8003006:	d050      	beq.n	80030aa <HAL_TIM_ConfigClockSource+0x19e>
 8003008:	2b60      	cmp	r3, #96	; 0x60
 800300a:	d877      	bhi.n	80030fc <HAL_TIM_ConfigClockSource+0x1f0>
 800300c:	2b50      	cmp	r3, #80	; 0x50
 800300e:	d03c      	beq.n	800308a <HAL_TIM_ConfigClockSource+0x17e>
 8003010:	2b50      	cmp	r3, #80	; 0x50
 8003012:	d873      	bhi.n	80030fc <HAL_TIM_ConfigClockSource+0x1f0>
 8003014:	2b40      	cmp	r3, #64	; 0x40
 8003016:	d058      	beq.n	80030ca <HAL_TIM_ConfigClockSource+0x1be>
 8003018:	2b40      	cmp	r3, #64	; 0x40
 800301a:	d86f      	bhi.n	80030fc <HAL_TIM_ConfigClockSource+0x1f0>
 800301c:	2b30      	cmp	r3, #48	; 0x30
 800301e:	d064      	beq.n	80030ea <HAL_TIM_ConfigClockSource+0x1de>
 8003020:	2b30      	cmp	r3, #48	; 0x30
 8003022:	d86b      	bhi.n	80030fc <HAL_TIM_ConfigClockSource+0x1f0>
 8003024:	2b20      	cmp	r3, #32
 8003026:	d060      	beq.n	80030ea <HAL_TIM_ConfigClockSource+0x1de>
 8003028:	2b20      	cmp	r3, #32
 800302a:	d867      	bhi.n	80030fc <HAL_TIM_ConfigClockSource+0x1f0>
 800302c:	2b00      	cmp	r3, #0
 800302e:	d05c      	beq.n	80030ea <HAL_TIM_ConfigClockSource+0x1de>
 8003030:	2b10      	cmp	r3, #16
 8003032:	d05a      	beq.n	80030ea <HAL_TIM_ConfigClockSource+0x1de>
 8003034:	e062      	b.n	80030fc <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6818      	ldr	r0, [r3, #0]
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	6899      	ldr	r1, [r3, #8]
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	685a      	ldr	r2, [r3, #4]
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	f000 fcc5 	bl	80039d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003058:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	68ba      	ldr	r2, [r7, #8]
 8003060:	609a      	str	r2, [r3, #8]
      break;
 8003062:	e04f      	b.n	8003104 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6818      	ldr	r0, [r3, #0]
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	6899      	ldr	r1, [r3, #8]
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	685a      	ldr	r2, [r3, #4]
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	f000 fcae 	bl	80039d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	689a      	ldr	r2, [r3, #8]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003086:	609a      	str	r2, [r3, #8]
      break;
 8003088:	e03c      	b.n	8003104 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6818      	ldr	r0, [r3, #0]
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	6859      	ldr	r1, [r3, #4]
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	461a      	mov	r2, r3
 8003098:	f000 fc20 	bl	80038dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2150      	movs	r1, #80	; 0x50
 80030a2:	4618      	mov	r0, r3
 80030a4:	f000 fc79 	bl	800399a <TIM_ITRx_SetConfig>
      break;
 80030a8:	e02c      	b.n	8003104 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6818      	ldr	r0, [r3, #0]
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	6859      	ldr	r1, [r3, #4]
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	68db      	ldr	r3, [r3, #12]
 80030b6:	461a      	mov	r2, r3
 80030b8:	f000 fc3f 	bl	800393a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2160      	movs	r1, #96	; 0x60
 80030c2:	4618      	mov	r0, r3
 80030c4:	f000 fc69 	bl	800399a <TIM_ITRx_SetConfig>
      break;
 80030c8:	e01c      	b.n	8003104 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6818      	ldr	r0, [r3, #0]
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	6859      	ldr	r1, [r3, #4]
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	461a      	mov	r2, r3
 80030d8:	f000 fc00 	bl	80038dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2140      	movs	r1, #64	; 0x40
 80030e2:	4618      	mov	r0, r3
 80030e4:	f000 fc59 	bl	800399a <TIM_ITRx_SetConfig>
      break;
 80030e8:	e00c      	b.n	8003104 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4619      	mov	r1, r3
 80030f4:	4610      	mov	r0, r2
 80030f6:	f000 fc50 	bl	800399a <TIM_ITRx_SetConfig>
      break;
 80030fa:	e003      	b.n	8003104 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	73fb      	strb	r3, [r7, #15]
      break;
 8003100:	e000      	b.n	8003104 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8003102:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003114:	7bfb      	ldrb	r3, [r7, #15]
}
 8003116:	4618      	mov	r0, r3
 8003118:	3710      	adds	r7, #16
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	00100070 	.word	0x00100070
 8003124:	00100060 	.word	0x00100060
 8003128:	00100050 	.word	0x00100050
 800312c:	00100040 	.word	0x00100040
 8003130:	00100030 	.word	0x00100030
 8003134:	00100020 	.word	0x00100020

08003138 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003138:	b480      	push	{r7}
 800313a:	b085      	sub	sp, #20
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	4a46      	ldr	r2, [pc, #280]	; (8003264 <TIM_Base_SetConfig+0x12c>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d017      	beq.n	8003180 <TIM_Base_SetConfig+0x48>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003156:	d013      	beq.n	8003180 <TIM_Base_SetConfig+0x48>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	4a43      	ldr	r2, [pc, #268]	; (8003268 <TIM_Base_SetConfig+0x130>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d00f      	beq.n	8003180 <TIM_Base_SetConfig+0x48>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	4a42      	ldr	r2, [pc, #264]	; (800326c <TIM_Base_SetConfig+0x134>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d00b      	beq.n	8003180 <TIM_Base_SetConfig+0x48>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	4a41      	ldr	r2, [pc, #260]	; (8003270 <TIM_Base_SetConfig+0x138>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d007      	beq.n	8003180 <TIM_Base_SetConfig+0x48>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	4a40      	ldr	r2, [pc, #256]	; (8003274 <TIM_Base_SetConfig+0x13c>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d003      	beq.n	8003180 <TIM_Base_SetConfig+0x48>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	4a3f      	ldr	r2, [pc, #252]	; (8003278 <TIM_Base_SetConfig+0x140>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d108      	bne.n	8003192 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003186:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	68fa      	ldr	r2, [r7, #12]
 800318e:	4313      	orrs	r3, r2
 8003190:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a33      	ldr	r2, [pc, #204]	; (8003264 <TIM_Base_SetConfig+0x12c>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d023      	beq.n	80031e2 <TIM_Base_SetConfig+0xaa>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031a0:	d01f      	beq.n	80031e2 <TIM_Base_SetConfig+0xaa>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a30      	ldr	r2, [pc, #192]	; (8003268 <TIM_Base_SetConfig+0x130>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d01b      	beq.n	80031e2 <TIM_Base_SetConfig+0xaa>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a2f      	ldr	r2, [pc, #188]	; (800326c <TIM_Base_SetConfig+0x134>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d017      	beq.n	80031e2 <TIM_Base_SetConfig+0xaa>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a2e      	ldr	r2, [pc, #184]	; (8003270 <TIM_Base_SetConfig+0x138>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d013      	beq.n	80031e2 <TIM_Base_SetConfig+0xaa>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a2d      	ldr	r2, [pc, #180]	; (8003274 <TIM_Base_SetConfig+0x13c>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d00f      	beq.n	80031e2 <TIM_Base_SetConfig+0xaa>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a2d      	ldr	r2, [pc, #180]	; (800327c <TIM_Base_SetConfig+0x144>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d00b      	beq.n	80031e2 <TIM_Base_SetConfig+0xaa>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a2c      	ldr	r2, [pc, #176]	; (8003280 <TIM_Base_SetConfig+0x148>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d007      	beq.n	80031e2 <TIM_Base_SetConfig+0xaa>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a2b      	ldr	r2, [pc, #172]	; (8003284 <TIM_Base_SetConfig+0x14c>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d003      	beq.n	80031e2 <TIM_Base_SetConfig+0xaa>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a26      	ldr	r2, [pc, #152]	; (8003278 <TIM_Base_SetConfig+0x140>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d108      	bne.n	80031f4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	68fa      	ldr	r2, [r7, #12]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	695b      	ldr	r3, [r3, #20]
 80031fe:	4313      	orrs	r3, r2
 8003200:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	68fa      	ldr	r2, [r7, #12]
 8003206:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	689a      	ldr	r2, [r3, #8]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	4a12      	ldr	r2, [pc, #72]	; (8003264 <TIM_Base_SetConfig+0x12c>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d013      	beq.n	8003248 <TIM_Base_SetConfig+0x110>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	4a14      	ldr	r2, [pc, #80]	; (8003274 <TIM_Base_SetConfig+0x13c>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d00f      	beq.n	8003248 <TIM_Base_SetConfig+0x110>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	4a14      	ldr	r2, [pc, #80]	; (800327c <TIM_Base_SetConfig+0x144>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d00b      	beq.n	8003248 <TIM_Base_SetConfig+0x110>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	4a13      	ldr	r2, [pc, #76]	; (8003280 <TIM_Base_SetConfig+0x148>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d007      	beq.n	8003248 <TIM_Base_SetConfig+0x110>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	4a12      	ldr	r2, [pc, #72]	; (8003284 <TIM_Base_SetConfig+0x14c>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d003      	beq.n	8003248 <TIM_Base_SetConfig+0x110>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	4a0d      	ldr	r2, [pc, #52]	; (8003278 <TIM_Base_SetConfig+0x140>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d103      	bne.n	8003250 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	691a      	ldr	r2, [r3, #16]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	615a      	str	r2, [r3, #20]
}
 8003256:	bf00      	nop
 8003258:	3714      	adds	r7, #20
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr
 8003262:	bf00      	nop
 8003264:	40012c00 	.word	0x40012c00
 8003268:	40000400 	.word	0x40000400
 800326c:	40000800 	.word	0x40000800
 8003270:	40000c00 	.word	0x40000c00
 8003274:	40013400 	.word	0x40013400
 8003278:	40015000 	.word	0x40015000
 800327c:	40014000 	.word	0x40014000
 8003280:	40014400 	.word	0x40014400
 8003284:	40014800 	.word	0x40014800

08003288 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003288:	b480      	push	{r7}
 800328a:	b087      	sub	sp, #28
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6a1b      	ldr	r3, [r3, #32]
 8003296:	f023 0201 	bic.w	r2, r3, #1
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6a1b      	ldr	r3, [r3, #32]
 80032a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	699b      	ldr	r3, [r3, #24]
 80032ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f023 0303 	bic.w	r3, r3, #3
 80032c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	68fa      	ldr	r2, [r7, #12]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	f023 0302 	bic.w	r3, r3, #2
 80032d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	697a      	ldr	r2, [r7, #20]
 80032dc:	4313      	orrs	r3, r2
 80032de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	4a30      	ldr	r2, [pc, #192]	; (80033a4 <TIM_OC1_SetConfig+0x11c>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d013      	beq.n	8003310 <TIM_OC1_SetConfig+0x88>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	4a2f      	ldr	r2, [pc, #188]	; (80033a8 <TIM_OC1_SetConfig+0x120>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d00f      	beq.n	8003310 <TIM_OC1_SetConfig+0x88>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	4a2e      	ldr	r2, [pc, #184]	; (80033ac <TIM_OC1_SetConfig+0x124>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d00b      	beq.n	8003310 <TIM_OC1_SetConfig+0x88>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	4a2d      	ldr	r2, [pc, #180]	; (80033b0 <TIM_OC1_SetConfig+0x128>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d007      	beq.n	8003310 <TIM_OC1_SetConfig+0x88>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	4a2c      	ldr	r2, [pc, #176]	; (80033b4 <TIM_OC1_SetConfig+0x12c>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d003      	beq.n	8003310 <TIM_OC1_SetConfig+0x88>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	4a2b      	ldr	r2, [pc, #172]	; (80033b8 <TIM_OC1_SetConfig+0x130>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d10c      	bne.n	800332a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	f023 0308 	bic.w	r3, r3, #8
 8003316:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	697a      	ldr	r2, [r7, #20]
 800331e:	4313      	orrs	r3, r2
 8003320:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	f023 0304 	bic.w	r3, r3, #4
 8003328:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a1d      	ldr	r2, [pc, #116]	; (80033a4 <TIM_OC1_SetConfig+0x11c>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d013      	beq.n	800335a <TIM_OC1_SetConfig+0xd2>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a1c      	ldr	r2, [pc, #112]	; (80033a8 <TIM_OC1_SetConfig+0x120>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d00f      	beq.n	800335a <TIM_OC1_SetConfig+0xd2>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a1b      	ldr	r2, [pc, #108]	; (80033ac <TIM_OC1_SetConfig+0x124>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d00b      	beq.n	800335a <TIM_OC1_SetConfig+0xd2>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a1a      	ldr	r2, [pc, #104]	; (80033b0 <TIM_OC1_SetConfig+0x128>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d007      	beq.n	800335a <TIM_OC1_SetConfig+0xd2>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a19      	ldr	r2, [pc, #100]	; (80033b4 <TIM_OC1_SetConfig+0x12c>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d003      	beq.n	800335a <TIM_OC1_SetConfig+0xd2>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a18      	ldr	r2, [pc, #96]	; (80033b8 <TIM_OC1_SetConfig+0x130>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d111      	bne.n	800337e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003360:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003368:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	695b      	ldr	r3, [r3, #20]
 800336e:	693a      	ldr	r2, [r7, #16]
 8003370:	4313      	orrs	r3, r2
 8003372:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	699b      	ldr	r3, [r3, #24]
 8003378:	693a      	ldr	r2, [r7, #16]
 800337a:	4313      	orrs	r3, r2
 800337c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	693a      	ldr	r2, [r7, #16]
 8003382:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	68fa      	ldr	r2, [r7, #12]
 8003388:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	685a      	ldr	r2, [r3, #4]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	697a      	ldr	r2, [r7, #20]
 8003396:	621a      	str	r2, [r3, #32]
}
 8003398:	bf00      	nop
 800339a:	371c      	adds	r7, #28
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr
 80033a4:	40012c00 	.word	0x40012c00
 80033a8:	40013400 	.word	0x40013400
 80033ac:	40014000 	.word	0x40014000
 80033b0:	40014400 	.word	0x40014400
 80033b4:	40014800 	.word	0x40014800
 80033b8:	40015000 	.word	0x40015000

080033bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033bc:	b480      	push	{r7}
 80033be:	b087      	sub	sp, #28
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a1b      	ldr	r3, [r3, #32]
 80033ca:	f023 0210 	bic.w	r2, r3, #16
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6a1b      	ldr	r3, [r3, #32]
 80033d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	699b      	ldr	r3, [r3, #24]
 80033e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	021b      	lsls	r3, r3, #8
 80033fe:	68fa      	ldr	r2, [r7, #12]
 8003400:	4313      	orrs	r3, r2
 8003402:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	f023 0320 	bic.w	r3, r3, #32
 800340a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	011b      	lsls	r3, r3, #4
 8003412:	697a      	ldr	r2, [r7, #20]
 8003414:	4313      	orrs	r3, r2
 8003416:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	4a2c      	ldr	r2, [pc, #176]	; (80034cc <TIM_OC2_SetConfig+0x110>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d007      	beq.n	8003430 <TIM_OC2_SetConfig+0x74>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	4a2b      	ldr	r2, [pc, #172]	; (80034d0 <TIM_OC2_SetConfig+0x114>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d003      	beq.n	8003430 <TIM_OC2_SetConfig+0x74>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	4a2a      	ldr	r2, [pc, #168]	; (80034d4 <TIM_OC2_SetConfig+0x118>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d10d      	bne.n	800344c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003436:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	011b      	lsls	r3, r3, #4
 800343e:	697a      	ldr	r2, [r7, #20]
 8003440:	4313      	orrs	r3, r2
 8003442:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800344a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	4a1f      	ldr	r2, [pc, #124]	; (80034cc <TIM_OC2_SetConfig+0x110>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d013      	beq.n	800347c <TIM_OC2_SetConfig+0xc0>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	4a1e      	ldr	r2, [pc, #120]	; (80034d0 <TIM_OC2_SetConfig+0x114>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d00f      	beq.n	800347c <TIM_OC2_SetConfig+0xc0>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	4a1e      	ldr	r2, [pc, #120]	; (80034d8 <TIM_OC2_SetConfig+0x11c>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d00b      	beq.n	800347c <TIM_OC2_SetConfig+0xc0>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	4a1d      	ldr	r2, [pc, #116]	; (80034dc <TIM_OC2_SetConfig+0x120>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d007      	beq.n	800347c <TIM_OC2_SetConfig+0xc0>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	4a1c      	ldr	r2, [pc, #112]	; (80034e0 <TIM_OC2_SetConfig+0x124>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d003      	beq.n	800347c <TIM_OC2_SetConfig+0xc0>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	4a17      	ldr	r2, [pc, #92]	; (80034d4 <TIM_OC2_SetConfig+0x118>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d113      	bne.n	80034a4 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003482:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800348a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	695b      	ldr	r3, [r3, #20]
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	693a      	ldr	r2, [r7, #16]
 8003494:	4313      	orrs	r3, r2
 8003496:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	699b      	ldr	r3, [r3, #24]
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	693a      	ldr	r2, [r7, #16]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	693a      	ldr	r2, [r7, #16]
 80034a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	68fa      	ldr	r2, [r7, #12]
 80034ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	685a      	ldr	r2, [r3, #4]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	697a      	ldr	r2, [r7, #20]
 80034bc:	621a      	str	r2, [r3, #32]
}
 80034be:	bf00      	nop
 80034c0:	371c      	adds	r7, #28
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr
 80034ca:	bf00      	nop
 80034cc:	40012c00 	.word	0x40012c00
 80034d0:	40013400 	.word	0x40013400
 80034d4:	40015000 	.word	0x40015000
 80034d8:	40014000 	.word	0x40014000
 80034dc:	40014400 	.word	0x40014400
 80034e0:	40014800 	.word	0x40014800

080034e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b087      	sub	sp, #28
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a1b      	ldr	r3, [r3, #32]
 80034f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a1b      	ldr	r3, [r3, #32]
 80034fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	69db      	ldr	r3, [r3, #28]
 800350a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003512:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003516:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f023 0303 	bic.w	r3, r3, #3
 800351e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	68fa      	ldr	r2, [r7, #12]
 8003526:	4313      	orrs	r3, r2
 8003528:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003530:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	021b      	lsls	r3, r3, #8
 8003538:	697a      	ldr	r2, [r7, #20]
 800353a:	4313      	orrs	r3, r2
 800353c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a2b      	ldr	r2, [pc, #172]	; (80035f0 <TIM_OC3_SetConfig+0x10c>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d007      	beq.n	8003556 <TIM_OC3_SetConfig+0x72>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a2a      	ldr	r2, [pc, #168]	; (80035f4 <TIM_OC3_SetConfig+0x110>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d003      	beq.n	8003556 <TIM_OC3_SetConfig+0x72>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a29      	ldr	r2, [pc, #164]	; (80035f8 <TIM_OC3_SetConfig+0x114>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d10d      	bne.n	8003572 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800355c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	021b      	lsls	r3, r3, #8
 8003564:	697a      	ldr	r2, [r7, #20]
 8003566:	4313      	orrs	r3, r2
 8003568:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003570:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a1e      	ldr	r2, [pc, #120]	; (80035f0 <TIM_OC3_SetConfig+0x10c>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d013      	beq.n	80035a2 <TIM_OC3_SetConfig+0xbe>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a1d      	ldr	r2, [pc, #116]	; (80035f4 <TIM_OC3_SetConfig+0x110>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d00f      	beq.n	80035a2 <TIM_OC3_SetConfig+0xbe>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a1d      	ldr	r2, [pc, #116]	; (80035fc <TIM_OC3_SetConfig+0x118>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d00b      	beq.n	80035a2 <TIM_OC3_SetConfig+0xbe>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a1c      	ldr	r2, [pc, #112]	; (8003600 <TIM_OC3_SetConfig+0x11c>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d007      	beq.n	80035a2 <TIM_OC3_SetConfig+0xbe>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a1b      	ldr	r2, [pc, #108]	; (8003604 <TIM_OC3_SetConfig+0x120>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d003      	beq.n	80035a2 <TIM_OC3_SetConfig+0xbe>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a16      	ldr	r2, [pc, #88]	; (80035f8 <TIM_OC3_SetConfig+0x114>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d113      	bne.n	80035ca <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80035a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80035b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	695b      	ldr	r3, [r3, #20]
 80035b6:	011b      	lsls	r3, r3, #4
 80035b8:	693a      	ldr	r2, [r7, #16]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	699b      	ldr	r3, [r3, #24]
 80035c2:	011b      	lsls	r3, r3, #4
 80035c4:	693a      	ldr	r2, [r7, #16]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	693a      	ldr	r2, [r7, #16]
 80035ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	68fa      	ldr	r2, [r7, #12]
 80035d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	685a      	ldr	r2, [r3, #4]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	697a      	ldr	r2, [r7, #20]
 80035e2:	621a      	str	r2, [r3, #32]
}
 80035e4:	bf00      	nop
 80035e6:	371c      	adds	r7, #28
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr
 80035f0:	40012c00 	.word	0x40012c00
 80035f4:	40013400 	.word	0x40013400
 80035f8:	40015000 	.word	0x40015000
 80035fc:	40014000 	.word	0x40014000
 8003600:	40014400 	.word	0x40014400
 8003604:	40014800 	.word	0x40014800

08003608 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003608:	b480      	push	{r7}
 800360a:	b087      	sub	sp, #28
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6a1b      	ldr	r3, [r3, #32]
 8003616:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a1b      	ldr	r3, [r3, #32]
 8003622:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	69db      	ldr	r3, [r3, #28]
 800362e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003636:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800363a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003642:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	021b      	lsls	r3, r3, #8
 800364a:	68fa      	ldr	r2, [r7, #12]
 800364c:	4313      	orrs	r3, r2
 800364e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003656:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	031b      	lsls	r3, r3, #12
 800365e:	697a      	ldr	r2, [r7, #20]
 8003660:	4313      	orrs	r3, r2
 8003662:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4a2c      	ldr	r2, [pc, #176]	; (8003718 <TIM_OC4_SetConfig+0x110>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d007      	beq.n	800367c <TIM_OC4_SetConfig+0x74>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	4a2b      	ldr	r2, [pc, #172]	; (800371c <TIM_OC4_SetConfig+0x114>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d003      	beq.n	800367c <TIM_OC4_SetConfig+0x74>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	4a2a      	ldr	r2, [pc, #168]	; (8003720 <TIM_OC4_SetConfig+0x118>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d10d      	bne.n	8003698 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003682:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	031b      	lsls	r3, r3, #12
 800368a:	697a      	ldr	r2, [r7, #20]
 800368c:	4313      	orrs	r3, r2
 800368e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003696:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	4a1f      	ldr	r2, [pc, #124]	; (8003718 <TIM_OC4_SetConfig+0x110>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d013      	beq.n	80036c8 <TIM_OC4_SetConfig+0xc0>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	4a1e      	ldr	r2, [pc, #120]	; (800371c <TIM_OC4_SetConfig+0x114>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d00f      	beq.n	80036c8 <TIM_OC4_SetConfig+0xc0>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	4a1e      	ldr	r2, [pc, #120]	; (8003724 <TIM_OC4_SetConfig+0x11c>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d00b      	beq.n	80036c8 <TIM_OC4_SetConfig+0xc0>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	4a1d      	ldr	r2, [pc, #116]	; (8003728 <TIM_OC4_SetConfig+0x120>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d007      	beq.n	80036c8 <TIM_OC4_SetConfig+0xc0>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	4a1c      	ldr	r2, [pc, #112]	; (800372c <TIM_OC4_SetConfig+0x124>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d003      	beq.n	80036c8 <TIM_OC4_SetConfig+0xc0>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	4a17      	ldr	r2, [pc, #92]	; (8003720 <TIM_OC4_SetConfig+0x118>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d113      	bne.n	80036f0 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80036ce:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80036d6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	695b      	ldr	r3, [r3, #20]
 80036dc:	019b      	lsls	r3, r3, #6
 80036de:	693a      	ldr	r2, [r7, #16]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	699b      	ldr	r3, [r3, #24]
 80036e8:	019b      	lsls	r3, r3, #6
 80036ea:	693a      	ldr	r2, [r7, #16]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	693a      	ldr	r2, [r7, #16]
 80036f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	68fa      	ldr	r2, [r7, #12]
 80036fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	685a      	ldr	r2, [r3, #4]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	697a      	ldr	r2, [r7, #20]
 8003708:	621a      	str	r2, [r3, #32]
}
 800370a:	bf00      	nop
 800370c:	371c      	adds	r7, #28
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr
 8003716:	bf00      	nop
 8003718:	40012c00 	.word	0x40012c00
 800371c:	40013400 	.word	0x40013400
 8003720:	40015000 	.word	0x40015000
 8003724:	40014000 	.word	0x40014000
 8003728:	40014400 	.word	0x40014400
 800372c:	40014800 	.word	0x40014800

08003730 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003730:	b480      	push	{r7}
 8003732:	b087      	sub	sp, #28
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a1b      	ldr	r3, [r3, #32]
 800373e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6a1b      	ldr	r3, [r3, #32]
 800374a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003756:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800375e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003762:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	68fa      	ldr	r2, [r7, #12]
 800376a:	4313      	orrs	r3, r2
 800376c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003774:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	041b      	lsls	r3, r3, #16
 800377c:	693a      	ldr	r2, [r7, #16]
 800377e:	4313      	orrs	r3, r2
 8003780:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a19      	ldr	r2, [pc, #100]	; (80037ec <TIM_OC5_SetConfig+0xbc>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d013      	beq.n	80037b2 <TIM_OC5_SetConfig+0x82>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a18      	ldr	r2, [pc, #96]	; (80037f0 <TIM_OC5_SetConfig+0xc0>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d00f      	beq.n	80037b2 <TIM_OC5_SetConfig+0x82>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a17      	ldr	r2, [pc, #92]	; (80037f4 <TIM_OC5_SetConfig+0xc4>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d00b      	beq.n	80037b2 <TIM_OC5_SetConfig+0x82>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a16      	ldr	r2, [pc, #88]	; (80037f8 <TIM_OC5_SetConfig+0xc8>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d007      	beq.n	80037b2 <TIM_OC5_SetConfig+0x82>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a15      	ldr	r2, [pc, #84]	; (80037fc <TIM_OC5_SetConfig+0xcc>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d003      	beq.n	80037b2 <TIM_OC5_SetConfig+0x82>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a14      	ldr	r2, [pc, #80]	; (8003800 <TIM_OC5_SetConfig+0xd0>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d109      	bne.n	80037c6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037b8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	695b      	ldr	r3, [r3, #20]
 80037be:	021b      	lsls	r3, r3, #8
 80037c0:	697a      	ldr	r2, [r7, #20]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	697a      	ldr	r2, [r7, #20]
 80037ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	68fa      	ldr	r2, [r7, #12]
 80037d0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	685a      	ldr	r2, [r3, #4]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	693a      	ldr	r2, [r7, #16]
 80037de:	621a      	str	r2, [r3, #32]
}
 80037e0:	bf00      	nop
 80037e2:	371c      	adds	r7, #28
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr
 80037ec:	40012c00 	.word	0x40012c00
 80037f0:	40013400 	.word	0x40013400
 80037f4:	40014000 	.word	0x40014000
 80037f8:	40014400 	.word	0x40014400
 80037fc:	40014800 	.word	0x40014800
 8003800:	40015000 	.word	0x40015000

08003804 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003804:	b480      	push	{r7}
 8003806:	b087      	sub	sp, #28
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a1b      	ldr	r3, [r3, #32]
 8003812:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a1b      	ldr	r3, [r3, #32]
 800381e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800382a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003832:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003836:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	021b      	lsls	r3, r3, #8
 800383e:	68fa      	ldr	r2, [r7, #12]
 8003840:	4313      	orrs	r3, r2
 8003842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800384a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	051b      	lsls	r3, r3, #20
 8003852:	693a      	ldr	r2, [r7, #16]
 8003854:	4313      	orrs	r3, r2
 8003856:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	4a1a      	ldr	r2, [pc, #104]	; (80038c4 <TIM_OC6_SetConfig+0xc0>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d013      	beq.n	8003888 <TIM_OC6_SetConfig+0x84>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	4a19      	ldr	r2, [pc, #100]	; (80038c8 <TIM_OC6_SetConfig+0xc4>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d00f      	beq.n	8003888 <TIM_OC6_SetConfig+0x84>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	4a18      	ldr	r2, [pc, #96]	; (80038cc <TIM_OC6_SetConfig+0xc8>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d00b      	beq.n	8003888 <TIM_OC6_SetConfig+0x84>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	4a17      	ldr	r2, [pc, #92]	; (80038d0 <TIM_OC6_SetConfig+0xcc>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d007      	beq.n	8003888 <TIM_OC6_SetConfig+0x84>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	4a16      	ldr	r2, [pc, #88]	; (80038d4 <TIM_OC6_SetConfig+0xd0>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d003      	beq.n	8003888 <TIM_OC6_SetConfig+0x84>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4a15      	ldr	r2, [pc, #84]	; (80038d8 <TIM_OC6_SetConfig+0xd4>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d109      	bne.n	800389c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800388e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	695b      	ldr	r3, [r3, #20]
 8003894:	029b      	lsls	r3, r3, #10
 8003896:	697a      	ldr	r2, [r7, #20]
 8003898:	4313      	orrs	r3, r2
 800389a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	697a      	ldr	r2, [r7, #20]
 80038a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	68fa      	ldr	r2, [r7, #12]
 80038a6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	685a      	ldr	r2, [r3, #4]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	693a      	ldr	r2, [r7, #16]
 80038b4:	621a      	str	r2, [r3, #32]
}
 80038b6:	bf00      	nop
 80038b8:	371c      	adds	r7, #28
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr
 80038c2:	bf00      	nop
 80038c4:	40012c00 	.word	0x40012c00
 80038c8:	40013400 	.word	0x40013400
 80038cc:	40014000 	.word	0x40014000
 80038d0:	40014400 	.word	0x40014400
 80038d4:	40014800 	.word	0x40014800
 80038d8:	40015000 	.word	0x40015000

080038dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038dc:	b480      	push	{r7}
 80038de:	b087      	sub	sp, #28
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	60f8      	str	r0, [r7, #12]
 80038e4:	60b9      	str	r1, [r7, #8]
 80038e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6a1b      	ldr	r3, [r3, #32]
 80038ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6a1b      	ldr	r3, [r3, #32]
 80038f2:	f023 0201 	bic.w	r2, r3, #1
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	699b      	ldr	r3, [r3, #24]
 80038fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003906:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	011b      	lsls	r3, r3, #4
 800390c:	693a      	ldr	r2, [r7, #16]
 800390e:	4313      	orrs	r3, r2
 8003910:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	f023 030a 	bic.w	r3, r3, #10
 8003918:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800391a:	697a      	ldr	r2, [r7, #20]
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	4313      	orrs	r3, r2
 8003920:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	693a      	ldr	r2, [r7, #16]
 8003926:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	697a      	ldr	r2, [r7, #20]
 800392c:	621a      	str	r2, [r3, #32]
}
 800392e:	bf00      	nop
 8003930:	371c      	adds	r7, #28
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr

0800393a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800393a:	b480      	push	{r7}
 800393c:	b087      	sub	sp, #28
 800393e:	af00      	add	r7, sp, #0
 8003940:	60f8      	str	r0, [r7, #12]
 8003942:	60b9      	str	r1, [r7, #8]
 8003944:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	6a1b      	ldr	r3, [r3, #32]
 800394a:	f023 0210 	bic.w	r2, r3, #16
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	699b      	ldr	r3, [r3, #24]
 8003956:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6a1b      	ldr	r3, [r3, #32]
 800395c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003964:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	031b      	lsls	r3, r3, #12
 800396a:	697a      	ldr	r2, [r7, #20]
 800396c:	4313      	orrs	r3, r2
 800396e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003976:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	011b      	lsls	r3, r3, #4
 800397c:	693a      	ldr	r2, [r7, #16]
 800397e:	4313      	orrs	r3, r2
 8003980:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	697a      	ldr	r2, [r7, #20]
 8003986:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	693a      	ldr	r2, [r7, #16]
 800398c:	621a      	str	r2, [r3, #32]
}
 800398e:	bf00      	nop
 8003990:	371c      	adds	r7, #28
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr

0800399a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800399a:	b480      	push	{r7}
 800399c:	b085      	sub	sp, #20
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
 80039a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80039b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80039b6:	683a      	ldr	r2, [r7, #0]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	f043 0307 	orr.w	r3, r3, #7
 80039c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	68fa      	ldr	r2, [r7, #12]
 80039c6:	609a      	str	r2, [r3, #8]
}
 80039c8:	bf00      	nop
 80039ca:	3714      	adds	r7, #20
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b087      	sub	sp, #28
 80039d8:	af00      	add	r7, sp, #0
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	60b9      	str	r1, [r7, #8]
 80039de:	607a      	str	r2, [r7, #4]
 80039e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	021a      	lsls	r2, r3, #8
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	431a      	orrs	r2, r3
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	697a      	ldr	r2, [r7, #20]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	697a      	ldr	r2, [r7, #20]
 8003a06:	609a      	str	r2, [r3, #8]
}
 8003a08:	bf00      	nop
 8003a0a:	371c      	adds	r7, #28
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr

08003a14 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b087      	sub	sp, #28
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	60b9      	str	r1, [r7, #8]
 8003a1e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	f003 031f 	and.w	r3, r3, #31
 8003a26:	2201      	movs	r2, #1
 8003a28:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6a1a      	ldr	r2, [r3, #32]
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	43db      	mvns	r3, r3
 8003a36:	401a      	ands	r2, r3
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6a1a      	ldr	r2, [r3, #32]
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	f003 031f 	and.w	r3, r3, #31
 8003a46:	6879      	ldr	r1, [r7, #4]
 8003a48:	fa01 f303 	lsl.w	r3, r1, r3
 8003a4c:	431a      	orrs	r2, r3
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	621a      	str	r2, [r3, #32]
}
 8003a52:	bf00      	nop
 8003a54:	371c      	adds	r7, #28
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr
	...

08003a60 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d109      	bne.n	8003a84 <HAL_TIMEx_PWMN_Start+0x24>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	bf14      	ite	ne
 8003a7c:	2301      	movne	r3, #1
 8003a7e:	2300      	moveq	r3, #0
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	e022      	b.n	8003aca <HAL_TIMEx_PWMN_Start+0x6a>
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	2b04      	cmp	r3, #4
 8003a88:	d109      	bne.n	8003a9e <HAL_TIMEx_PWMN_Start+0x3e>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	bf14      	ite	ne
 8003a96:	2301      	movne	r3, #1
 8003a98:	2300      	moveq	r3, #0
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	e015      	b.n	8003aca <HAL_TIMEx_PWMN_Start+0x6a>
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	2b08      	cmp	r3, #8
 8003aa2:	d109      	bne.n	8003ab8 <HAL_TIMEx_PWMN_Start+0x58>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	bf14      	ite	ne
 8003ab0:	2301      	movne	r3, #1
 8003ab2:	2300      	moveq	r3, #0
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	e008      	b.n	8003aca <HAL_TIMEx_PWMN_Start+0x6a>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	bf14      	ite	ne
 8003ac4:	2301      	movne	r3, #1
 8003ac6:	2300      	moveq	r3, #0
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d001      	beq.n	8003ad2 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e073      	b.n	8003bba <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d104      	bne.n	8003ae2 <HAL_TIMEx_PWMN_Start+0x82>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2202      	movs	r2, #2
 8003adc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ae0:	e013      	b.n	8003b0a <HAL_TIMEx_PWMN_Start+0xaa>
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	2b04      	cmp	r3, #4
 8003ae6:	d104      	bne.n	8003af2 <HAL_TIMEx_PWMN_Start+0x92>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2202      	movs	r2, #2
 8003aec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003af0:	e00b      	b.n	8003b0a <HAL_TIMEx_PWMN_Start+0xaa>
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	2b08      	cmp	r3, #8
 8003af6:	d104      	bne.n	8003b02 <HAL_TIMEx_PWMN_Start+0xa2>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2202      	movs	r2, #2
 8003afc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003b00:	e003      	b.n	8003b0a <HAL_TIMEx_PWMN_Start+0xaa>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2202      	movs	r2, #2
 8003b06:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	2204      	movs	r2, #4
 8003b10:	6839      	ldr	r1, [r7, #0]
 8003b12:	4618      	mov	r0, r3
 8003b14:	f000 f9ae 	bl	8003e74 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b26:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a25      	ldr	r2, [pc, #148]	; (8003bc4 <HAL_TIMEx_PWMN_Start+0x164>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d022      	beq.n	8003b78 <HAL_TIMEx_PWMN_Start+0x118>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b3a:	d01d      	beq.n	8003b78 <HAL_TIMEx_PWMN_Start+0x118>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a21      	ldr	r2, [pc, #132]	; (8003bc8 <HAL_TIMEx_PWMN_Start+0x168>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d018      	beq.n	8003b78 <HAL_TIMEx_PWMN_Start+0x118>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a20      	ldr	r2, [pc, #128]	; (8003bcc <HAL_TIMEx_PWMN_Start+0x16c>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d013      	beq.n	8003b78 <HAL_TIMEx_PWMN_Start+0x118>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a1e      	ldr	r2, [pc, #120]	; (8003bd0 <HAL_TIMEx_PWMN_Start+0x170>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d00e      	beq.n	8003b78 <HAL_TIMEx_PWMN_Start+0x118>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a1d      	ldr	r2, [pc, #116]	; (8003bd4 <HAL_TIMEx_PWMN_Start+0x174>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d009      	beq.n	8003b78 <HAL_TIMEx_PWMN_Start+0x118>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a1b      	ldr	r2, [pc, #108]	; (8003bd8 <HAL_TIMEx_PWMN_Start+0x178>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d004      	beq.n	8003b78 <HAL_TIMEx_PWMN_Start+0x118>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a1a      	ldr	r2, [pc, #104]	; (8003bdc <HAL_TIMEx_PWMN_Start+0x17c>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d115      	bne.n	8003ba4 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	689a      	ldr	r2, [r3, #8]
 8003b7e:	4b18      	ldr	r3, [pc, #96]	; (8003be0 <HAL_TIMEx_PWMN_Start+0x180>)
 8003b80:	4013      	ands	r3, r2
 8003b82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2b06      	cmp	r3, #6
 8003b88:	d015      	beq.n	8003bb6 <HAL_TIMEx_PWMN_Start+0x156>
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b90:	d011      	beq.n	8003bb6 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f042 0201 	orr.w	r2, r2, #1
 8003ba0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ba2:	e008      	b.n	8003bb6 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f042 0201 	orr.w	r2, r2, #1
 8003bb2:	601a      	str	r2, [r3, #0]
 8003bb4:	e000      	b.n	8003bb8 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bb6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003bb8:	2300      	movs	r3, #0
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3710      	adds	r7, #16
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	40012c00 	.word	0x40012c00
 8003bc8:	40000400 	.word	0x40000400
 8003bcc:	40000800 	.word	0x40000800
 8003bd0:	40000c00 	.word	0x40000c00
 8003bd4:	40013400 	.word	0x40013400
 8003bd8:	40014000 	.word	0x40014000
 8003bdc:	40015000 	.word	0x40015000
 8003be0:	00010007 	.word	0x00010007

08003be4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b085      	sub	sp, #20
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d101      	bne.n	8003bfc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003bf8:	2302      	movs	r3, #2
 8003bfa:	e074      	b.n	8003ce6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2202      	movs	r2, #2
 8003c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a34      	ldr	r2, [pc, #208]	; (8003cf4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d009      	beq.n	8003c3a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a33      	ldr	r2, [pc, #204]	; (8003cf8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d004      	beq.n	8003c3a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a31      	ldr	r2, [pc, #196]	; (8003cfc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d108      	bne.n	8003c4c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003c40:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	68fa      	ldr	r2, [r7, #12]
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003c52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	68fa      	ldr	r2, [r7, #12]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	68fa      	ldr	r2, [r7, #12]
 8003c68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a21      	ldr	r2, [pc, #132]	; (8003cf4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d022      	beq.n	8003cba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c7c:	d01d      	beq.n	8003cba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a1f      	ldr	r2, [pc, #124]	; (8003d00 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d018      	beq.n	8003cba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a1d      	ldr	r2, [pc, #116]	; (8003d04 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d013      	beq.n	8003cba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a1c      	ldr	r2, [pc, #112]	; (8003d08 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d00e      	beq.n	8003cba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a15      	ldr	r2, [pc, #84]	; (8003cf8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d009      	beq.n	8003cba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a18      	ldr	r2, [pc, #96]	; (8003d0c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d004      	beq.n	8003cba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a11      	ldr	r2, [pc, #68]	; (8003cfc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d10c      	bne.n	8003cd4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cc0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	68ba      	ldr	r2, [r7, #8]
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	68ba      	ldr	r2, [r7, #8]
 8003cd2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3714      	adds	r7, #20
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr
 8003cf2:	bf00      	nop
 8003cf4:	40012c00 	.word	0x40012c00
 8003cf8:	40013400 	.word	0x40013400
 8003cfc:	40015000 	.word	0x40015000
 8003d00:	40000400 	.word	0x40000400
 8003d04:	40000800 	.word	0x40000800
 8003d08:	40000c00 	.word	0x40000c00
 8003d0c:	40014000 	.word	0x40014000

08003d10 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b085      	sub	sp, #20
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d101      	bne.n	8003d2c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003d28:	2302      	movs	r3, #2
 8003d2a:	e096      	b.n	8003e5a <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	691b      	ldr	r3, [r3, #16]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	695b      	ldr	r3, [r3, #20]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d92:	4313      	orrs	r3, r2
 8003d94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	699b      	ldr	r3, [r3, #24]
 8003da0:	041b      	lsls	r3, r3, #16
 8003da2:	4313      	orrs	r3, r2
 8003da4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a2f      	ldr	r2, [pc, #188]	; (8003e68 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d009      	beq.n	8003dc4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a2d      	ldr	r2, [pc, #180]	; (8003e6c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d004      	beq.n	8003dc4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a2c      	ldr	r2, [pc, #176]	; (8003e70 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d106      	bne.n	8003dd2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	69db      	ldr	r3, [r3, #28]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a24      	ldr	r2, [pc, #144]	; (8003e68 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d009      	beq.n	8003df0 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a22      	ldr	r2, [pc, #136]	; (8003e6c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d004      	beq.n	8003df0 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a21      	ldr	r2, [pc, #132]	; (8003e70 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d12b      	bne.n	8003e48 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dfa:	051b      	lsls	r3, r3, #20
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	6a1b      	ldr	r3, [r3, #32]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a11      	ldr	r2, [pc, #68]	; (8003e68 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d009      	beq.n	8003e3a <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a10      	ldr	r2, [pc, #64]	; (8003e6c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d004      	beq.n	8003e3a <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a0e      	ldr	r2, [pc, #56]	; (8003e70 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d106      	bne.n	8003e48 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e44:	4313      	orrs	r3, r2
 8003e46:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	68fa      	ldr	r2, [r7, #12]
 8003e4e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e58:	2300      	movs	r3, #0
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3714      	adds	r7, #20
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr
 8003e66:	bf00      	nop
 8003e68:	40012c00 	.word	0x40012c00
 8003e6c:	40013400 	.word	0x40013400
 8003e70:	40015000 	.word	0x40015000

08003e74 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b087      	sub	sp, #28
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	60f8      	str	r0, [r7, #12]
 8003e7c:	60b9      	str	r1, [r7, #8]
 8003e7e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	f003 031f 	and.w	r3, r3, #31
 8003e86:	2204      	movs	r2, #4
 8003e88:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6a1a      	ldr	r2, [r3, #32]
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	43db      	mvns	r3, r3
 8003e96:	401a      	ands	r2, r3
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6a1a      	ldr	r2, [r3, #32]
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	f003 031f 	and.w	r3, r3, #31
 8003ea6:	6879      	ldr	r1, [r7, #4]
 8003ea8:	fa01 f303 	lsl.w	r3, r1, r3
 8003eac:	431a      	orrs	r2, r3
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	621a      	str	r2, [r3, #32]
}
 8003eb2:	bf00      	nop
 8003eb4:	371c      	adds	r7, #28
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr

08003ebe <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ebe:	b580      	push	{r7, lr}
 8003ec0:	b082      	sub	sp, #8
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d101      	bne.n	8003ed0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e042      	b.n	8003f56 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d106      	bne.n	8003ee8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f7fc ff40 	bl	8000d68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2224      	movs	r2, #36	; 0x24
 8003eec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f022 0201 	bic.w	r2, r2, #1
 8003efe:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f000 fc51 	bl	80047a8 <UART_SetConfig>
 8003f06:	4603      	mov	r3, r0
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d101      	bne.n	8003f10 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e022      	b.n	8003f56 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d002      	beq.n	8003f1e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f000 ff41 	bl	8004da0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	685a      	ldr	r2, [r3, #4]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f2c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	689a      	ldr	r2, [r3, #8]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f3c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f042 0201 	orr.w	r2, r2, #1
 8003f4c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f000 ffc8 	bl	8004ee4 <UART_CheckIdleState>
 8003f54:	4603      	mov	r3, r0
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3708      	adds	r7, #8
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}

08003f5e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f5e:	b580      	push	{r7, lr}
 8003f60:	b08a      	sub	sp, #40	; 0x28
 8003f62:	af02      	add	r7, sp, #8
 8003f64:	60f8      	str	r0, [r7, #12]
 8003f66:	60b9      	str	r1, [r7, #8]
 8003f68:	603b      	str	r3, [r7, #0]
 8003f6a:	4613      	mov	r3, r2
 8003f6c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f74:	2b20      	cmp	r3, #32
 8003f76:	f040 8083 	bne.w	8004080 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d002      	beq.n	8003f86 <HAL_UART_Transmit+0x28>
 8003f80:	88fb      	ldrh	r3, [r7, #6]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d101      	bne.n	8003f8a <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e07b      	b.n	8004082 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d101      	bne.n	8003f98 <HAL_UART_Transmit+0x3a>
 8003f94:	2302      	movs	r3, #2
 8003f96:	e074      	b.n	8004082 <HAL_UART_Transmit+0x124>
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2221      	movs	r2, #33	; 0x21
 8003fac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003fb0:	f7fd f8dc 	bl	800116c <HAL_GetTick>
 8003fb4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	88fa      	ldrh	r2, [r7, #6]
 8003fba:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	88fa      	ldrh	r2, [r7, #6]
 8003fc2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fce:	d108      	bne.n	8003fe2 <HAL_UART_Transmit+0x84>
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	691b      	ldr	r3, [r3, #16]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d104      	bne.n	8003fe2 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	61bb      	str	r3, [r7, #24]
 8003fe0:	e003      	b.n	8003fea <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8003ff2:	e02c      	b.n	800404e <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	9300      	str	r3, [sp, #0]
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	2180      	movs	r1, #128	; 0x80
 8003ffe:	68f8      	ldr	r0, [r7, #12]
 8004000:	f000 ffbb 	bl	8004f7a <UART_WaitOnFlagUntilTimeout>
 8004004:	4603      	mov	r3, r0
 8004006:	2b00      	cmp	r3, #0
 8004008:	d001      	beq.n	800400e <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	e039      	b.n	8004082 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800400e:	69fb      	ldr	r3, [r7, #28]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d10b      	bne.n	800402c <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004014:	69bb      	ldr	r3, [r7, #24]
 8004016:	881b      	ldrh	r3, [r3, #0]
 8004018:	461a      	mov	r2, r3
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004022:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004024:	69bb      	ldr	r3, [r7, #24]
 8004026:	3302      	adds	r3, #2
 8004028:	61bb      	str	r3, [r7, #24]
 800402a:	e007      	b.n	800403c <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	781a      	ldrb	r2, [r3, #0]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	3301      	adds	r3, #1
 800403a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004042:	b29b      	uxth	r3, r3
 8004044:	3b01      	subs	r3, #1
 8004046:	b29a      	uxth	r2, r3
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004054:	b29b      	uxth	r3, r3
 8004056:	2b00      	cmp	r3, #0
 8004058:	d1cc      	bne.n	8003ff4 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	9300      	str	r3, [sp, #0]
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	2200      	movs	r2, #0
 8004062:	2140      	movs	r1, #64	; 0x40
 8004064:	68f8      	ldr	r0, [r7, #12]
 8004066:	f000 ff88 	bl	8004f7a <UART_WaitOnFlagUntilTimeout>
 800406a:	4603      	mov	r3, r0
 800406c:	2b00      	cmp	r3, #0
 800406e:	d001      	beq.n	8004074 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8004070:	2303      	movs	r3, #3
 8004072:	e006      	b.n	8004082 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2220      	movs	r2, #32
 8004078:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800407c:	2300      	movs	r3, #0
 800407e:	e000      	b.n	8004082 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8004080:	2302      	movs	r3, #2
  }
}
 8004082:	4618      	mov	r0, r3
 8004084:	3720      	adds	r7, #32
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
	...

0800408c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b08a      	sub	sp, #40	; 0x28
 8004090:	af00      	add	r7, sp, #0
 8004092:	60f8      	str	r0, [r7, #12]
 8004094:	60b9      	str	r1, [r7, #8]
 8004096:	4613      	mov	r3, r2
 8004098:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040a0:	2b20      	cmp	r3, #32
 80040a2:	d142      	bne.n	800412a <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d002      	beq.n	80040b0 <HAL_UART_Receive_IT+0x24>
 80040aa:	88fb      	ldrh	r3, [r7, #6]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d101      	bne.n	80040b4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	e03b      	b.n	800412c <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d101      	bne.n	80040c2 <HAL_UART_Receive_IT+0x36>
 80040be:	2302      	movs	r3, #2
 80040c0:	e034      	b.n	800412c <HAL_UART_Receive_IT+0xa0>
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2201      	movs	r2, #1
 80040c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2200      	movs	r2, #0
 80040ce:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a17      	ldr	r2, [pc, #92]	; (8004134 <HAL_UART_Receive_IT+0xa8>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d01f      	beq.n	800411a <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d018      	beq.n	800411a <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	e853 3f00 	ldrex	r3, [r3]
 80040f4:	613b      	str	r3, [r7, #16]
   return(result);
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80040fc:	627b      	str	r3, [r7, #36]	; 0x24
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	461a      	mov	r2, r3
 8004104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004106:	623b      	str	r3, [r7, #32]
 8004108:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800410a:	69f9      	ldr	r1, [r7, #28]
 800410c:	6a3a      	ldr	r2, [r7, #32]
 800410e:	e841 2300 	strex	r3, r2, [r1]
 8004112:	61bb      	str	r3, [r7, #24]
   return(result);
 8004114:	69bb      	ldr	r3, [r7, #24]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d1e6      	bne.n	80040e8 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800411a:	88fb      	ldrh	r3, [r7, #6]
 800411c:	461a      	mov	r2, r3
 800411e:	68b9      	ldr	r1, [r7, #8]
 8004120:	68f8      	ldr	r0, [r7, #12]
 8004122:	f000 fff3 	bl	800510c <UART_Start_Receive_IT>
 8004126:	4603      	mov	r3, r0
 8004128:	e000      	b.n	800412c <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800412a:	2302      	movs	r3, #2
  }
}
 800412c:	4618      	mov	r0, r3
 800412e:	3728      	adds	r7, #40	; 0x28
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}
 8004134:	40008000 	.word	0x40008000

08004138 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b0ba      	sub	sp, #232	; 0xe8
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	69db      	ldr	r3, [r3, #28]
 8004146:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800415e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004162:	f640 030f 	movw	r3, #2063	; 0x80f
 8004166:	4013      	ands	r3, r2
 8004168:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800416c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004170:	2b00      	cmp	r3, #0
 8004172:	d11b      	bne.n	80041ac <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004174:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004178:	f003 0320 	and.w	r3, r3, #32
 800417c:	2b00      	cmp	r3, #0
 800417e:	d015      	beq.n	80041ac <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004180:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004184:	f003 0320 	and.w	r3, r3, #32
 8004188:	2b00      	cmp	r3, #0
 800418a:	d105      	bne.n	8004198 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800418c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004190:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004194:	2b00      	cmp	r3, #0
 8004196:	d009      	beq.n	80041ac <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800419c:	2b00      	cmp	r3, #0
 800419e:	f000 82d6 	beq.w	800474e <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	4798      	blx	r3
      }
      return;
 80041aa:	e2d0      	b.n	800474e <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80041ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	f000 811f 	beq.w	80043f4 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80041b6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80041ba:	4b8b      	ldr	r3, [pc, #556]	; (80043e8 <HAL_UART_IRQHandler+0x2b0>)
 80041bc:	4013      	ands	r3, r2
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d106      	bne.n	80041d0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80041c2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80041c6:	4b89      	ldr	r3, [pc, #548]	; (80043ec <HAL_UART_IRQHandler+0x2b4>)
 80041c8:	4013      	ands	r3, r2
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	f000 8112 	beq.w	80043f4 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80041d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041d4:	f003 0301 	and.w	r3, r3, #1
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d011      	beq.n	8004200 <HAL_UART_IRQHandler+0xc8>
 80041dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d00b      	beq.n	8004200 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	2201      	movs	r2, #1
 80041ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041f6:	f043 0201 	orr.w	r2, r3, #1
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004200:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004204:	f003 0302 	and.w	r3, r3, #2
 8004208:	2b00      	cmp	r3, #0
 800420a:	d011      	beq.n	8004230 <HAL_UART_IRQHandler+0xf8>
 800420c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004210:	f003 0301 	and.w	r3, r3, #1
 8004214:	2b00      	cmp	r3, #0
 8004216:	d00b      	beq.n	8004230 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2202      	movs	r2, #2
 800421e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004226:	f043 0204 	orr.w	r2, r3, #4
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004230:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004234:	f003 0304 	and.w	r3, r3, #4
 8004238:	2b00      	cmp	r3, #0
 800423a:	d011      	beq.n	8004260 <HAL_UART_IRQHandler+0x128>
 800423c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004240:	f003 0301 	and.w	r3, r3, #1
 8004244:	2b00      	cmp	r3, #0
 8004246:	d00b      	beq.n	8004260 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	2204      	movs	r2, #4
 800424e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004256:	f043 0202 	orr.w	r2, r3, #2
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004260:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004264:	f003 0308 	and.w	r3, r3, #8
 8004268:	2b00      	cmp	r3, #0
 800426a:	d017      	beq.n	800429c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800426c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004270:	f003 0320 	and.w	r3, r3, #32
 8004274:	2b00      	cmp	r3, #0
 8004276:	d105      	bne.n	8004284 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004278:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800427c:	4b5a      	ldr	r3, [pc, #360]	; (80043e8 <HAL_UART_IRQHandler+0x2b0>)
 800427e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004280:	2b00      	cmp	r3, #0
 8004282:	d00b      	beq.n	800429c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	2208      	movs	r2, #8
 800428a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004292:	f043 0208 	orr.w	r2, r3, #8
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800429c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d012      	beq.n	80042ce <HAL_UART_IRQHandler+0x196>
 80042a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d00c      	beq.n	80042ce <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80042bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042c4:	f043 0220 	orr.w	r2, r3, #32
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	f000 823c 	beq.w	8004752 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80042da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042de:	f003 0320 	and.w	r3, r3, #32
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d013      	beq.n	800430e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80042e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042ea:	f003 0320 	and.w	r3, r3, #32
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d105      	bne.n	80042fe <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80042f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d007      	beq.n	800430e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004302:	2b00      	cmp	r3, #0
 8004304:	d003      	beq.n	800430e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004314:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004322:	2b40      	cmp	r3, #64	; 0x40
 8004324:	d005      	beq.n	8004332 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004326:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800432a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800432e:	2b00      	cmp	r3, #0
 8004330:	d04f      	beq.n	80043d2 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f001 f814 	bl	8005360 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004342:	2b40      	cmp	r3, #64	; 0x40
 8004344:	d141      	bne.n	80043ca <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	3308      	adds	r3, #8
 800434c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004350:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004354:	e853 3f00 	ldrex	r3, [r3]
 8004358:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800435c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004360:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004364:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	3308      	adds	r3, #8
 800436e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004372:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004376:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800437a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800437e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004382:	e841 2300 	strex	r3, r2, [r1]
 8004386:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800438a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800438e:	2b00      	cmp	r3, #0
 8004390:	d1d9      	bne.n	8004346 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004396:	2b00      	cmp	r3, #0
 8004398:	d013      	beq.n	80043c2 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800439e:	4a14      	ldr	r2, [pc, #80]	; (80043f0 <HAL_UART_IRQHandler+0x2b8>)
 80043a0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043a6:	4618      	mov	r0, r3
 80043a8:	f7fd f876 	bl	8001498 <HAL_DMA_Abort_IT>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d017      	beq.n	80043e2 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80043bc:	4610      	mov	r0, r2
 80043be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043c0:	e00f      	b.n	80043e2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f000 f9da 	bl	800477c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043c8:	e00b      	b.n	80043e2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f000 f9d6 	bl	800477c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043d0:	e007      	b.n	80043e2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f000 f9d2 	bl	800477c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80043e0:	e1b7      	b.n	8004752 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043e2:	bf00      	nop
    return;
 80043e4:	e1b5      	b.n	8004752 <HAL_UART_IRQHandler+0x61a>
 80043e6:	bf00      	nop
 80043e8:	10000001 	.word	0x10000001
 80043ec:	04000120 	.word	0x04000120
 80043f0:	0800542d 	.word	0x0800542d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	f040 814a 	bne.w	8004692 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80043fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004402:	f003 0310 	and.w	r3, r3, #16
 8004406:	2b00      	cmp	r3, #0
 8004408:	f000 8143 	beq.w	8004692 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800440c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004410:	f003 0310 	and.w	r3, r3, #16
 8004414:	2b00      	cmp	r3, #0
 8004416:	f000 813c 	beq.w	8004692 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	2210      	movs	r2, #16
 8004420:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800442c:	2b40      	cmp	r3, #64	; 0x40
 800442e:	f040 80b5 	bne.w	800459c <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800443e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004442:	2b00      	cmp	r3, #0
 8004444:	f000 8187 	beq.w	8004756 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800444e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004452:	429a      	cmp	r2, r3
 8004454:	f080 817f 	bcs.w	8004756 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800445e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 0320 	and.w	r3, r3, #32
 800446e:	2b00      	cmp	r3, #0
 8004470:	f040 8086 	bne.w	8004580 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800447c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004480:	e853 3f00 	ldrex	r3, [r3]
 8004484:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004488:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800448c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004490:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	461a      	mov	r2, r3
 800449a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800449e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80044a2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044a6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80044aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80044ae:	e841 2300 	strex	r3, r2, [r1]
 80044b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80044b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d1da      	bne.n	8004474 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	3308      	adds	r3, #8
 80044c4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044c8:	e853 3f00 	ldrex	r3, [r3]
 80044cc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80044ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80044d0:	f023 0301 	bic.w	r3, r3, #1
 80044d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	3308      	adds	r3, #8
 80044de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80044e2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80044e6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80044ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80044ee:	e841 2300 	strex	r3, r2, [r1]
 80044f2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80044f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d1e1      	bne.n	80044be <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	3308      	adds	r3, #8
 8004500:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004502:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004504:	e853 3f00 	ldrex	r3, [r3]
 8004508:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800450a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800450c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004510:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	3308      	adds	r3, #8
 800451a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800451e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004520:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004522:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004524:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004526:	e841 2300 	strex	r3, r2, [r1]
 800452a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800452c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800452e:	2b00      	cmp	r3, #0
 8004530:	d1e3      	bne.n	80044fa <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2220      	movs	r2, #32
 8004536:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004546:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004548:	e853 3f00 	ldrex	r3, [r3]
 800454c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800454e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004550:	f023 0310 	bic.w	r3, r3, #16
 8004554:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	461a      	mov	r2, r3
 800455e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004562:	65bb      	str	r3, [r7, #88]	; 0x58
 8004564:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004566:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004568:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800456a:	e841 2300 	strex	r3, r2, [r1]
 800456e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004570:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004572:	2b00      	cmp	r3, #0
 8004574:	d1e4      	bne.n	8004540 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800457a:	4618      	mov	r0, r3
 800457c:	f7fc ff33 	bl	80013e6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800458c:	b29b      	uxth	r3, r3
 800458e:	1ad3      	subs	r3, r2, r3
 8004590:	b29b      	uxth	r3, r3
 8004592:	4619      	mov	r1, r3
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f000 f8fb 	bl	8004790 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800459a:	e0dc      	b.n	8004756 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	f000 80ce 	beq.w	800475a <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 80045be:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	f000 80c9 	beq.w	800475a <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045d0:	e853 3f00 	ldrex	r3, [r3]
 80045d4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80045d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80045dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	461a      	mov	r2, r3
 80045e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80045ea:	647b      	str	r3, [r7, #68]	; 0x44
 80045ec:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80045f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80045f2:	e841 2300 	strex	r3, r2, [r1]
 80045f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80045f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d1e4      	bne.n	80045c8 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	3308      	adds	r3, #8
 8004604:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004608:	e853 3f00 	ldrex	r3, [r3]
 800460c:	623b      	str	r3, [r7, #32]
   return(result);
 800460e:	6a3b      	ldr	r3, [r7, #32]
 8004610:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004614:	f023 0301 	bic.w	r3, r3, #1
 8004618:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	3308      	adds	r3, #8
 8004622:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004626:	633a      	str	r2, [r7, #48]	; 0x30
 8004628:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800462a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800462c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800462e:	e841 2300 	strex	r3, r2, [r1]
 8004632:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004636:	2b00      	cmp	r3, #0
 8004638:	d1e1      	bne.n	80045fe <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2220      	movs	r2, #32
 800463e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2200      	movs	r2, #0
 8004646:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2200      	movs	r2, #0
 800464c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	e853 3f00 	ldrex	r3, [r3]
 800465a:	60fb      	str	r3, [r7, #12]
   return(result);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f023 0310 	bic.w	r3, r3, #16
 8004662:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	461a      	mov	r2, r3
 800466c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004670:	61fb      	str	r3, [r7, #28]
 8004672:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004674:	69b9      	ldr	r1, [r7, #24]
 8004676:	69fa      	ldr	r2, [r7, #28]
 8004678:	e841 2300 	strex	r3, r2, [r1]
 800467c:	617b      	str	r3, [r7, #20]
   return(result);
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d1e4      	bne.n	800464e <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004684:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004688:	4619      	mov	r1, r3
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f000 f880 	bl	8004790 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004690:	e063      	b.n	800475a <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004692:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004696:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d00e      	beq.n	80046bc <HAL_UART_IRQHandler+0x584>
 800469e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d008      	beq.n	80046bc <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80046b2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f001 fb57 	bl	8005d68 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80046ba:	e051      	b.n	8004760 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80046bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d014      	beq.n	80046f2 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80046c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d105      	bne.n	80046e0 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80046d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d008      	beq.n	80046f2 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d03a      	beq.n	800475e <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	4798      	blx	r3
    }
    return;
 80046f0:	e035      	b.n	800475e <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80046f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d009      	beq.n	8004712 <HAL_UART_IRQHandler+0x5da>
 80046fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004706:	2b00      	cmp	r3, #0
 8004708:	d003      	beq.n	8004712 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f000 fea4 	bl	8005458 <UART_EndTransmit_IT>
    return;
 8004710:	e026      	b.n	8004760 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004712:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004716:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d009      	beq.n	8004732 <HAL_UART_IRQHandler+0x5fa>
 800471e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004722:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004726:	2b00      	cmp	r3, #0
 8004728:	d003      	beq.n	8004732 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f001 fb30 	bl	8005d90 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004730:	e016      	b.n	8004760 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004732:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004736:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800473a:	2b00      	cmp	r3, #0
 800473c:	d010      	beq.n	8004760 <HAL_UART_IRQHandler+0x628>
 800473e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004742:	2b00      	cmp	r3, #0
 8004744:	da0c      	bge.n	8004760 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f001 fb18 	bl	8005d7c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800474c:	e008      	b.n	8004760 <HAL_UART_IRQHandler+0x628>
      return;
 800474e:	bf00      	nop
 8004750:	e006      	b.n	8004760 <HAL_UART_IRQHandler+0x628>
    return;
 8004752:	bf00      	nop
 8004754:	e004      	b.n	8004760 <HAL_UART_IRQHandler+0x628>
      return;
 8004756:	bf00      	nop
 8004758:	e002      	b.n	8004760 <HAL_UART_IRQHandler+0x628>
      return;
 800475a:	bf00      	nop
 800475c:	e000      	b.n	8004760 <HAL_UART_IRQHandler+0x628>
    return;
 800475e:	bf00      	nop
  }
}
 8004760:	37e8      	adds	r7, #232	; 0xe8
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
 8004766:	bf00      	nop

08004768 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004768:	b480      	push	{r7}
 800476a:	b083      	sub	sp, #12
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004770:	bf00      	nop
 8004772:	370c      	adds	r7, #12
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr

0800477c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800477c:	b480      	push	{r7}
 800477e:	b083      	sub	sp, #12
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004784:	bf00      	nop
 8004786:	370c      	adds	r7, #12
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr

08004790 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004790:	b480      	push	{r7}
 8004792:	b083      	sub	sp, #12
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
 8004798:	460b      	mov	r3, r1
 800479a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800479c:	bf00      	nop
 800479e:	370c      	adds	r7, #12
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr

080047a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047ac:	b08c      	sub	sp, #48	; 0x30
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80047b2:	2300      	movs	r3, #0
 80047b4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	689a      	ldr	r2, [r3, #8]
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	691b      	ldr	r3, [r3, #16]
 80047c0:	431a      	orrs	r2, r3
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	695b      	ldr	r3, [r3, #20]
 80047c6:	431a      	orrs	r2, r3
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	69db      	ldr	r3, [r3, #28]
 80047cc:	4313      	orrs	r3, r2
 80047ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	4baa      	ldr	r3, [pc, #680]	; (8004a80 <UART_SetConfig+0x2d8>)
 80047d8:	4013      	ands	r3, r2
 80047da:	697a      	ldr	r2, [r7, #20]
 80047dc:	6812      	ldr	r2, [r2, #0]
 80047de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80047e0:	430b      	orrs	r3, r1
 80047e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	68da      	ldr	r2, [r3, #12]
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	430a      	orrs	r2, r1
 80047f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	699b      	ldr	r3, [r3, #24]
 80047fe:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a9f      	ldr	r2, [pc, #636]	; (8004a84 <UART_SetConfig+0x2dc>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d004      	beq.n	8004814 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	6a1b      	ldr	r3, [r3, #32]
 800480e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004810:	4313      	orrs	r3, r2
 8004812:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800481e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004822:	697a      	ldr	r2, [r7, #20]
 8004824:	6812      	ldr	r2, [r2, #0]
 8004826:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004828:	430b      	orrs	r3, r1
 800482a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004832:	f023 010f 	bic.w	r1, r3, #15
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	430a      	orrs	r2, r1
 8004840:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a90      	ldr	r2, [pc, #576]	; (8004a88 <UART_SetConfig+0x2e0>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d125      	bne.n	8004898 <UART_SetConfig+0xf0>
 800484c:	4b8f      	ldr	r3, [pc, #572]	; (8004a8c <UART_SetConfig+0x2e4>)
 800484e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004852:	f003 0303 	and.w	r3, r3, #3
 8004856:	2b03      	cmp	r3, #3
 8004858:	d81a      	bhi.n	8004890 <UART_SetConfig+0xe8>
 800485a:	a201      	add	r2, pc, #4	; (adr r2, 8004860 <UART_SetConfig+0xb8>)
 800485c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004860:	08004871 	.word	0x08004871
 8004864:	08004881 	.word	0x08004881
 8004868:	08004879 	.word	0x08004879
 800486c:	08004889 	.word	0x08004889
 8004870:	2301      	movs	r3, #1
 8004872:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004876:	e116      	b.n	8004aa6 <UART_SetConfig+0x2fe>
 8004878:	2302      	movs	r3, #2
 800487a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800487e:	e112      	b.n	8004aa6 <UART_SetConfig+0x2fe>
 8004880:	2304      	movs	r3, #4
 8004882:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004886:	e10e      	b.n	8004aa6 <UART_SetConfig+0x2fe>
 8004888:	2308      	movs	r3, #8
 800488a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800488e:	e10a      	b.n	8004aa6 <UART_SetConfig+0x2fe>
 8004890:	2310      	movs	r3, #16
 8004892:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004896:	e106      	b.n	8004aa6 <UART_SetConfig+0x2fe>
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a7c      	ldr	r2, [pc, #496]	; (8004a90 <UART_SetConfig+0x2e8>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d138      	bne.n	8004914 <UART_SetConfig+0x16c>
 80048a2:	4b7a      	ldr	r3, [pc, #488]	; (8004a8c <UART_SetConfig+0x2e4>)
 80048a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048a8:	f003 030c 	and.w	r3, r3, #12
 80048ac:	2b0c      	cmp	r3, #12
 80048ae:	d82d      	bhi.n	800490c <UART_SetConfig+0x164>
 80048b0:	a201      	add	r2, pc, #4	; (adr r2, 80048b8 <UART_SetConfig+0x110>)
 80048b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048b6:	bf00      	nop
 80048b8:	080048ed 	.word	0x080048ed
 80048bc:	0800490d 	.word	0x0800490d
 80048c0:	0800490d 	.word	0x0800490d
 80048c4:	0800490d 	.word	0x0800490d
 80048c8:	080048fd 	.word	0x080048fd
 80048cc:	0800490d 	.word	0x0800490d
 80048d0:	0800490d 	.word	0x0800490d
 80048d4:	0800490d 	.word	0x0800490d
 80048d8:	080048f5 	.word	0x080048f5
 80048dc:	0800490d 	.word	0x0800490d
 80048e0:	0800490d 	.word	0x0800490d
 80048e4:	0800490d 	.word	0x0800490d
 80048e8:	08004905 	.word	0x08004905
 80048ec:	2300      	movs	r3, #0
 80048ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048f2:	e0d8      	b.n	8004aa6 <UART_SetConfig+0x2fe>
 80048f4:	2302      	movs	r3, #2
 80048f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048fa:	e0d4      	b.n	8004aa6 <UART_SetConfig+0x2fe>
 80048fc:	2304      	movs	r3, #4
 80048fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004902:	e0d0      	b.n	8004aa6 <UART_SetConfig+0x2fe>
 8004904:	2308      	movs	r3, #8
 8004906:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800490a:	e0cc      	b.n	8004aa6 <UART_SetConfig+0x2fe>
 800490c:	2310      	movs	r3, #16
 800490e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004912:	e0c8      	b.n	8004aa6 <UART_SetConfig+0x2fe>
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a5e      	ldr	r2, [pc, #376]	; (8004a94 <UART_SetConfig+0x2ec>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d125      	bne.n	800496a <UART_SetConfig+0x1c2>
 800491e:	4b5b      	ldr	r3, [pc, #364]	; (8004a8c <UART_SetConfig+0x2e4>)
 8004920:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004924:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004928:	2b30      	cmp	r3, #48	; 0x30
 800492a:	d016      	beq.n	800495a <UART_SetConfig+0x1b2>
 800492c:	2b30      	cmp	r3, #48	; 0x30
 800492e:	d818      	bhi.n	8004962 <UART_SetConfig+0x1ba>
 8004930:	2b20      	cmp	r3, #32
 8004932:	d00a      	beq.n	800494a <UART_SetConfig+0x1a2>
 8004934:	2b20      	cmp	r3, #32
 8004936:	d814      	bhi.n	8004962 <UART_SetConfig+0x1ba>
 8004938:	2b00      	cmp	r3, #0
 800493a:	d002      	beq.n	8004942 <UART_SetConfig+0x19a>
 800493c:	2b10      	cmp	r3, #16
 800493e:	d008      	beq.n	8004952 <UART_SetConfig+0x1aa>
 8004940:	e00f      	b.n	8004962 <UART_SetConfig+0x1ba>
 8004942:	2300      	movs	r3, #0
 8004944:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004948:	e0ad      	b.n	8004aa6 <UART_SetConfig+0x2fe>
 800494a:	2302      	movs	r3, #2
 800494c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004950:	e0a9      	b.n	8004aa6 <UART_SetConfig+0x2fe>
 8004952:	2304      	movs	r3, #4
 8004954:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004958:	e0a5      	b.n	8004aa6 <UART_SetConfig+0x2fe>
 800495a:	2308      	movs	r3, #8
 800495c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004960:	e0a1      	b.n	8004aa6 <UART_SetConfig+0x2fe>
 8004962:	2310      	movs	r3, #16
 8004964:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004968:	e09d      	b.n	8004aa6 <UART_SetConfig+0x2fe>
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a4a      	ldr	r2, [pc, #296]	; (8004a98 <UART_SetConfig+0x2f0>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d125      	bne.n	80049c0 <UART_SetConfig+0x218>
 8004974:	4b45      	ldr	r3, [pc, #276]	; (8004a8c <UART_SetConfig+0x2e4>)
 8004976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800497a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800497e:	2bc0      	cmp	r3, #192	; 0xc0
 8004980:	d016      	beq.n	80049b0 <UART_SetConfig+0x208>
 8004982:	2bc0      	cmp	r3, #192	; 0xc0
 8004984:	d818      	bhi.n	80049b8 <UART_SetConfig+0x210>
 8004986:	2b80      	cmp	r3, #128	; 0x80
 8004988:	d00a      	beq.n	80049a0 <UART_SetConfig+0x1f8>
 800498a:	2b80      	cmp	r3, #128	; 0x80
 800498c:	d814      	bhi.n	80049b8 <UART_SetConfig+0x210>
 800498e:	2b00      	cmp	r3, #0
 8004990:	d002      	beq.n	8004998 <UART_SetConfig+0x1f0>
 8004992:	2b40      	cmp	r3, #64	; 0x40
 8004994:	d008      	beq.n	80049a8 <UART_SetConfig+0x200>
 8004996:	e00f      	b.n	80049b8 <UART_SetConfig+0x210>
 8004998:	2300      	movs	r3, #0
 800499a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800499e:	e082      	b.n	8004aa6 <UART_SetConfig+0x2fe>
 80049a0:	2302      	movs	r3, #2
 80049a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049a6:	e07e      	b.n	8004aa6 <UART_SetConfig+0x2fe>
 80049a8:	2304      	movs	r3, #4
 80049aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049ae:	e07a      	b.n	8004aa6 <UART_SetConfig+0x2fe>
 80049b0:	2308      	movs	r3, #8
 80049b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049b6:	e076      	b.n	8004aa6 <UART_SetConfig+0x2fe>
 80049b8:	2310      	movs	r3, #16
 80049ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049be:	e072      	b.n	8004aa6 <UART_SetConfig+0x2fe>
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a35      	ldr	r2, [pc, #212]	; (8004a9c <UART_SetConfig+0x2f4>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d12a      	bne.n	8004a20 <UART_SetConfig+0x278>
 80049ca:	4b30      	ldr	r3, [pc, #192]	; (8004a8c <UART_SetConfig+0x2e4>)
 80049cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049d8:	d01a      	beq.n	8004a10 <UART_SetConfig+0x268>
 80049da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049de:	d81b      	bhi.n	8004a18 <UART_SetConfig+0x270>
 80049e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049e4:	d00c      	beq.n	8004a00 <UART_SetConfig+0x258>
 80049e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049ea:	d815      	bhi.n	8004a18 <UART_SetConfig+0x270>
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d003      	beq.n	80049f8 <UART_SetConfig+0x250>
 80049f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049f4:	d008      	beq.n	8004a08 <UART_SetConfig+0x260>
 80049f6:	e00f      	b.n	8004a18 <UART_SetConfig+0x270>
 80049f8:	2300      	movs	r3, #0
 80049fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049fe:	e052      	b.n	8004aa6 <UART_SetConfig+0x2fe>
 8004a00:	2302      	movs	r3, #2
 8004a02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a06:	e04e      	b.n	8004aa6 <UART_SetConfig+0x2fe>
 8004a08:	2304      	movs	r3, #4
 8004a0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a0e:	e04a      	b.n	8004aa6 <UART_SetConfig+0x2fe>
 8004a10:	2308      	movs	r3, #8
 8004a12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a16:	e046      	b.n	8004aa6 <UART_SetConfig+0x2fe>
 8004a18:	2310      	movs	r3, #16
 8004a1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a1e:	e042      	b.n	8004aa6 <UART_SetConfig+0x2fe>
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a17      	ldr	r2, [pc, #92]	; (8004a84 <UART_SetConfig+0x2dc>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d13a      	bne.n	8004aa0 <UART_SetConfig+0x2f8>
 8004a2a:	4b18      	ldr	r3, [pc, #96]	; (8004a8c <UART_SetConfig+0x2e4>)
 8004a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a30:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004a34:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a38:	d01a      	beq.n	8004a70 <UART_SetConfig+0x2c8>
 8004a3a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a3e:	d81b      	bhi.n	8004a78 <UART_SetConfig+0x2d0>
 8004a40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a44:	d00c      	beq.n	8004a60 <UART_SetConfig+0x2b8>
 8004a46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a4a:	d815      	bhi.n	8004a78 <UART_SetConfig+0x2d0>
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d003      	beq.n	8004a58 <UART_SetConfig+0x2b0>
 8004a50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a54:	d008      	beq.n	8004a68 <UART_SetConfig+0x2c0>
 8004a56:	e00f      	b.n	8004a78 <UART_SetConfig+0x2d0>
 8004a58:	2300      	movs	r3, #0
 8004a5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a5e:	e022      	b.n	8004aa6 <UART_SetConfig+0x2fe>
 8004a60:	2302      	movs	r3, #2
 8004a62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a66:	e01e      	b.n	8004aa6 <UART_SetConfig+0x2fe>
 8004a68:	2304      	movs	r3, #4
 8004a6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a6e:	e01a      	b.n	8004aa6 <UART_SetConfig+0x2fe>
 8004a70:	2308      	movs	r3, #8
 8004a72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a76:	e016      	b.n	8004aa6 <UART_SetConfig+0x2fe>
 8004a78:	2310      	movs	r3, #16
 8004a7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a7e:	e012      	b.n	8004aa6 <UART_SetConfig+0x2fe>
 8004a80:	cfff69f3 	.word	0xcfff69f3
 8004a84:	40008000 	.word	0x40008000
 8004a88:	40013800 	.word	0x40013800
 8004a8c:	40021000 	.word	0x40021000
 8004a90:	40004400 	.word	0x40004400
 8004a94:	40004800 	.word	0x40004800
 8004a98:	40004c00 	.word	0x40004c00
 8004a9c:	40005000 	.word	0x40005000
 8004aa0:	2310      	movs	r3, #16
 8004aa2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4aae      	ldr	r2, [pc, #696]	; (8004d64 <UART_SetConfig+0x5bc>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	f040 8097 	bne.w	8004be0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004ab2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004ab6:	2b08      	cmp	r3, #8
 8004ab8:	d823      	bhi.n	8004b02 <UART_SetConfig+0x35a>
 8004aba:	a201      	add	r2, pc, #4	; (adr r2, 8004ac0 <UART_SetConfig+0x318>)
 8004abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ac0:	08004ae5 	.word	0x08004ae5
 8004ac4:	08004b03 	.word	0x08004b03
 8004ac8:	08004aed 	.word	0x08004aed
 8004acc:	08004b03 	.word	0x08004b03
 8004ad0:	08004af3 	.word	0x08004af3
 8004ad4:	08004b03 	.word	0x08004b03
 8004ad8:	08004b03 	.word	0x08004b03
 8004adc:	08004b03 	.word	0x08004b03
 8004ae0:	08004afb 	.word	0x08004afb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ae4:	f7fd fc74 	bl	80023d0 <HAL_RCC_GetPCLK1Freq>
 8004ae8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004aea:	e010      	b.n	8004b0e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004aec:	4b9e      	ldr	r3, [pc, #632]	; (8004d68 <UART_SetConfig+0x5c0>)
 8004aee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004af0:	e00d      	b.n	8004b0e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004af2:	f7fd fbff 	bl	80022f4 <HAL_RCC_GetSysClockFreq>
 8004af6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004af8:	e009      	b.n	8004b0e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004afa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004afe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004b00:	e005      	b.n	8004b0e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004b02:	2300      	movs	r3, #0
 8004b04:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004b0c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	f000 8130 	beq.w	8004d76 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1a:	4a94      	ldr	r2, [pc, #592]	; (8004d6c <UART_SetConfig+0x5c4>)
 8004b1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b20:	461a      	mov	r2, r3
 8004b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b24:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b28:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	685a      	ldr	r2, [r3, #4]
 8004b2e:	4613      	mov	r3, r2
 8004b30:	005b      	lsls	r3, r3, #1
 8004b32:	4413      	add	r3, r2
 8004b34:	69ba      	ldr	r2, [r7, #24]
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d305      	bcc.n	8004b46 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004b40:	69ba      	ldr	r2, [r7, #24]
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d903      	bls.n	8004b4e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004b4c:	e113      	b.n	8004d76 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b50:	2200      	movs	r2, #0
 8004b52:	60bb      	str	r3, [r7, #8]
 8004b54:	60fa      	str	r2, [r7, #12]
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5a:	4a84      	ldr	r2, [pc, #528]	; (8004d6c <UART_SetConfig+0x5c4>)
 8004b5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	2200      	movs	r2, #0
 8004b64:	603b      	str	r3, [r7, #0]
 8004b66:	607a      	str	r2, [r7, #4]
 8004b68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b6c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004b70:	f7fb fbb6 	bl	80002e0 <__aeabi_uldivmod>
 8004b74:	4602      	mov	r2, r0
 8004b76:	460b      	mov	r3, r1
 8004b78:	4610      	mov	r0, r2
 8004b7a:	4619      	mov	r1, r3
 8004b7c:	f04f 0200 	mov.w	r2, #0
 8004b80:	f04f 0300 	mov.w	r3, #0
 8004b84:	020b      	lsls	r3, r1, #8
 8004b86:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004b8a:	0202      	lsls	r2, r0, #8
 8004b8c:	6979      	ldr	r1, [r7, #20]
 8004b8e:	6849      	ldr	r1, [r1, #4]
 8004b90:	0849      	lsrs	r1, r1, #1
 8004b92:	2000      	movs	r0, #0
 8004b94:	460c      	mov	r4, r1
 8004b96:	4605      	mov	r5, r0
 8004b98:	eb12 0804 	adds.w	r8, r2, r4
 8004b9c:	eb43 0905 	adc.w	r9, r3, r5
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	469a      	mov	sl, r3
 8004ba8:	4693      	mov	fp, r2
 8004baa:	4652      	mov	r2, sl
 8004bac:	465b      	mov	r3, fp
 8004bae:	4640      	mov	r0, r8
 8004bb0:	4649      	mov	r1, r9
 8004bb2:	f7fb fb95 	bl	80002e0 <__aeabi_uldivmod>
 8004bb6:	4602      	mov	r2, r0
 8004bb8:	460b      	mov	r3, r1
 8004bba:	4613      	mov	r3, r2
 8004bbc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004bbe:	6a3b      	ldr	r3, [r7, #32]
 8004bc0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004bc4:	d308      	bcc.n	8004bd8 <UART_SetConfig+0x430>
 8004bc6:	6a3b      	ldr	r3, [r7, #32]
 8004bc8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bcc:	d204      	bcs.n	8004bd8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	6a3a      	ldr	r2, [r7, #32]
 8004bd4:	60da      	str	r2, [r3, #12]
 8004bd6:	e0ce      	b.n	8004d76 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004bde:	e0ca      	b.n	8004d76 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	69db      	ldr	r3, [r3, #28]
 8004be4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004be8:	d166      	bne.n	8004cb8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004bea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004bee:	2b08      	cmp	r3, #8
 8004bf0:	d827      	bhi.n	8004c42 <UART_SetConfig+0x49a>
 8004bf2:	a201      	add	r2, pc, #4	; (adr r2, 8004bf8 <UART_SetConfig+0x450>)
 8004bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bf8:	08004c1d 	.word	0x08004c1d
 8004bfc:	08004c25 	.word	0x08004c25
 8004c00:	08004c2d 	.word	0x08004c2d
 8004c04:	08004c43 	.word	0x08004c43
 8004c08:	08004c33 	.word	0x08004c33
 8004c0c:	08004c43 	.word	0x08004c43
 8004c10:	08004c43 	.word	0x08004c43
 8004c14:	08004c43 	.word	0x08004c43
 8004c18:	08004c3b 	.word	0x08004c3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c1c:	f7fd fbd8 	bl	80023d0 <HAL_RCC_GetPCLK1Freq>
 8004c20:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004c22:	e014      	b.n	8004c4e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c24:	f7fd fbea 	bl	80023fc <HAL_RCC_GetPCLK2Freq>
 8004c28:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004c2a:	e010      	b.n	8004c4e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c2c:	4b4e      	ldr	r3, [pc, #312]	; (8004d68 <UART_SetConfig+0x5c0>)
 8004c2e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004c30:	e00d      	b.n	8004c4e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c32:	f7fd fb5f 	bl	80022f4 <HAL_RCC_GetSysClockFreq>
 8004c36:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004c38:	e009      	b.n	8004c4e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c3e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004c40:	e005      	b.n	8004c4e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004c42:	2300      	movs	r3, #0
 8004c44:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004c4c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	f000 8090 	beq.w	8004d76 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5a:	4a44      	ldr	r2, [pc, #272]	; (8004d6c <UART_SetConfig+0x5c4>)
 8004c5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c60:	461a      	mov	r2, r3
 8004c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c64:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c68:	005a      	lsls	r2, r3, #1
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	085b      	lsrs	r3, r3, #1
 8004c70:	441a      	add	r2, r3
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c7a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c7c:	6a3b      	ldr	r3, [r7, #32]
 8004c7e:	2b0f      	cmp	r3, #15
 8004c80:	d916      	bls.n	8004cb0 <UART_SetConfig+0x508>
 8004c82:	6a3b      	ldr	r3, [r7, #32]
 8004c84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c88:	d212      	bcs.n	8004cb0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c8a:	6a3b      	ldr	r3, [r7, #32]
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	f023 030f 	bic.w	r3, r3, #15
 8004c92:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c94:	6a3b      	ldr	r3, [r7, #32]
 8004c96:	085b      	lsrs	r3, r3, #1
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	f003 0307 	and.w	r3, r3, #7
 8004c9e:	b29a      	uxth	r2, r3
 8004ca0:	8bfb      	ldrh	r3, [r7, #30]
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	8bfa      	ldrh	r2, [r7, #30]
 8004cac:	60da      	str	r2, [r3, #12]
 8004cae:	e062      	b.n	8004d76 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004cb6:	e05e      	b.n	8004d76 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004cb8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004cbc:	2b08      	cmp	r3, #8
 8004cbe:	d828      	bhi.n	8004d12 <UART_SetConfig+0x56a>
 8004cc0:	a201      	add	r2, pc, #4	; (adr r2, 8004cc8 <UART_SetConfig+0x520>)
 8004cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cc6:	bf00      	nop
 8004cc8:	08004ced 	.word	0x08004ced
 8004ccc:	08004cf5 	.word	0x08004cf5
 8004cd0:	08004cfd 	.word	0x08004cfd
 8004cd4:	08004d13 	.word	0x08004d13
 8004cd8:	08004d03 	.word	0x08004d03
 8004cdc:	08004d13 	.word	0x08004d13
 8004ce0:	08004d13 	.word	0x08004d13
 8004ce4:	08004d13 	.word	0x08004d13
 8004ce8:	08004d0b 	.word	0x08004d0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cec:	f7fd fb70 	bl	80023d0 <HAL_RCC_GetPCLK1Freq>
 8004cf0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004cf2:	e014      	b.n	8004d1e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004cf4:	f7fd fb82 	bl	80023fc <HAL_RCC_GetPCLK2Freq>
 8004cf8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004cfa:	e010      	b.n	8004d1e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cfc:	4b1a      	ldr	r3, [pc, #104]	; (8004d68 <UART_SetConfig+0x5c0>)
 8004cfe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004d00:	e00d      	b.n	8004d1e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d02:	f7fd faf7 	bl	80022f4 <HAL_RCC_GetSysClockFreq>
 8004d06:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004d08:	e009      	b.n	8004d1e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d0e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004d10:	e005      	b.n	8004d1e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004d12:	2300      	movs	r3, #0
 8004d14:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004d1c:	bf00      	nop
    }

    if (pclk != 0U)
 8004d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d028      	beq.n	8004d76 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d28:	4a10      	ldr	r2, [pc, #64]	; (8004d6c <UART_SetConfig+0x5c4>)
 8004d2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d2e:	461a      	mov	r2, r3
 8004d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d32:	fbb3 f2f2 	udiv	r2, r3, r2
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	085b      	lsrs	r3, r3, #1
 8004d3c:	441a      	add	r2, r3
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d46:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d48:	6a3b      	ldr	r3, [r7, #32]
 8004d4a:	2b0f      	cmp	r3, #15
 8004d4c:	d910      	bls.n	8004d70 <UART_SetConfig+0x5c8>
 8004d4e:	6a3b      	ldr	r3, [r7, #32]
 8004d50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d54:	d20c      	bcs.n	8004d70 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004d56:	6a3b      	ldr	r3, [r7, #32]
 8004d58:	b29a      	uxth	r2, r3
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	60da      	str	r2, [r3, #12]
 8004d60:	e009      	b.n	8004d76 <UART_SetConfig+0x5ce>
 8004d62:	bf00      	nop
 8004d64:	40008000 	.word	0x40008000
 8004d68:	00f42400 	.word	0x00f42400
 8004d6c:	08007728 	.word	0x08007728
      }
      else
      {
        ret = HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	2201      	movs	r2, #1
 8004d7a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	2201      	movs	r2, #1
 8004d82:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004d92:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3730      	adds	r7, #48	; 0x30
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004da0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dac:	f003 0301 	and.w	r3, r3, #1
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d00a      	beq.n	8004dca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	430a      	orrs	r2, r1
 8004dc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dce:	f003 0302 	and.w	r3, r3, #2
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d00a      	beq.n	8004dec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	430a      	orrs	r2, r1
 8004dea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004df0:	f003 0304 	and.w	r3, r3, #4
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d00a      	beq.n	8004e0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	430a      	orrs	r2, r1
 8004e0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e12:	f003 0308 	and.w	r3, r3, #8
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d00a      	beq.n	8004e30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	430a      	orrs	r2, r1
 8004e2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e34:	f003 0310 	and.w	r3, r3, #16
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d00a      	beq.n	8004e52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	430a      	orrs	r2, r1
 8004e50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e56:	f003 0320 	and.w	r3, r3, #32
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d00a      	beq.n	8004e74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	430a      	orrs	r2, r1
 8004e72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d01a      	beq.n	8004eb6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	430a      	orrs	r2, r1
 8004e94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e9e:	d10a      	bne.n	8004eb6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	430a      	orrs	r2, r1
 8004eb4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d00a      	beq.n	8004ed8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	430a      	orrs	r2, r1
 8004ed6:	605a      	str	r2, [r3, #4]
  }
}
 8004ed8:	bf00      	nop
 8004eda:	370c      	adds	r7, #12
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr

08004ee4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b086      	sub	sp, #24
 8004ee8:	af02      	add	r7, sp, #8
 8004eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ef4:	f7fc f93a 	bl	800116c <HAL_GetTick>
 8004ef8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 0308 	and.w	r3, r3, #8
 8004f04:	2b08      	cmp	r3, #8
 8004f06:	d10e      	bne.n	8004f26 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f0c:	9300      	str	r3, [sp, #0]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2200      	movs	r2, #0
 8004f12:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f000 f82f 	bl	8004f7a <UART_WaitOnFlagUntilTimeout>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d001      	beq.n	8004f26 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f22:	2303      	movs	r3, #3
 8004f24:	e025      	b.n	8004f72 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 0304 	and.w	r3, r3, #4
 8004f30:	2b04      	cmp	r3, #4
 8004f32:	d10e      	bne.n	8004f52 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f38:	9300      	str	r3, [sp, #0]
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f000 f819 	bl	8004f7a <UART_WaitOnFlagUntilTimeout>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d001      	beq.n	8004f52 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f4e:	2303      	movs	r3, #3
 8004f50:	e00f      	b.n	8004f72 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2220      	movs	r2, #32
 8004f56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2220      	movs	r2, #32
 8004f5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2200      	movs	r2, #0
 8004f66:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004f70:	2300      	movs	r3, #0
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3710      	adds	r7, #16
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}

08004f7a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f7a:	b580      	push	{r7, lr}
 8004f7c:	b09c      	sub	sp, #112	; 0x70
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	60f8      	str	r0, [r7, #12]
 8004f82:	60b9      	str	r1, [r7, #8]
 8004f84:	603b      	str	r3, [r7, #0]
 8004f86:	4613      	mov	r3, r2
 8004f88:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f8a:	e0a9      	b.n	80050e0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f92:	f000 80a5 	beq.w	80050e0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f96:	f7fc f8e9 	bl	800116c <HAL_GetTick>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	1ad3      	subs	r3, r2, r3
 8004fa0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d302      	bcc.n	8004fac <UART_WaitOnFlagUntilTimeout+0x32>
 8004fa6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d140      	bne.n	800502e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fb4:	e853 3f00 	ldrex	r3, [r3]
 8004fb8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004fba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fbc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004fc0:	667b      	str	r3, [r7, #100]	; 0x64
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004fca:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004fcc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004fd0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004fd2:	e841 2300 	strex	r3, r2, [r1]
 8004fd6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004fd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d1e6      	bne.n	8004fac <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	3308      	adds	r3, #8
 8004fe4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fe6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fe8:	e853 3f00 	ldrex	r3, [r3]
 8004fec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ff0:	f023 0301 	bic.w	r3, r3, #1
 8004ff4:	663b      	str	r3, [r7, #96]	; 0x60
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	3308      	adds	r3, #8
 8004ffc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004ffe:	64ba      	str	r2, [r7, #72]	; 0x48
 8005000:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005002:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005004:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005006:	e841 2300 	strex	r3, r2, [r1]
 800500a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800500c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800500e:	2b00      	cmp	r3, #0
 8005010:	d1e5      	bne.n	8004fde <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2220      	movs	r2, #32
 8005016:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2220      	movs	r2, #32
 800501e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2200      	movs	r2, #0
 8005026:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800502a:	2303      	movs	r3, #3
 800502c:	e069      	b.n	8005102 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f003 0304 	and.w	r3, r3, #4
 8005038:	2b00      	cmp	r3, #0
 800503a:	d051      	beq.n	80050e0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	69db      	ldr	r3, [r3, #28]
 8005042:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005046:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800504a:	d149      	bne.n	80050e0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005054:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800505c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800505e:	e853 3f00 	ldrex	r3, [r3]
 8005062:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005066:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800506a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	461a      	mov	r2, r3
 8005072:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005074:	637b      	str	r3, [r7, #52]	; 0x34
 8005076:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005078:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800507a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800507c:	e841 2300 	strex	r3, r2, [r1]
 8005080:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005084:	2b00      	cmp	r3, #0
 8005086:	d1e6      	bne.n	8005056 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	3308      	adds	r3, #8
 800508e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	e853 3f00 	ldrex	r3, [r3]
 8005096:	613b      	str	r3, [r7, #16]
   return(result);
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	f023 0301 	bic.w	r3, r3, #1
 800509e:	66bb      	str	r3, [r7, #104]	; 0x68
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	3308      	adds	r3, #8
 80050a6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80050a8:	623a      	str	r2, [r7, #32]
 80050aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ac:	69f9      	ldr	r1, [r7, #28]
 80050ae:	6a3a      	ldr	r2, [r7, #32]
 80050b0:	e841 2300 	strex	r3, r2, [r1]
 80050b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80050b6:	69bb      	ldr	r3, [r7, #24]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d1e5      	bne.n	8005088 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2220      	movs	r2, #32
 80050c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2220      	movs	r2, #32
 80050c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2220      	movs	r2, #32
 80050d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2200      	movs	r2, #0
 80050d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80050dc:	2303      	movs	r3, #3
 80050de:	e010      	b.n	8005102 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	69da      	ldr	r2, [r3, #28]
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	4013      	ands	r3, r2
 80050ea:	68ba      	ldr	r2, [r7, #8]
 80050ec:	429a      	cmp	r2, r3
 80050ee:	bf0c      	ite	eq
 80050f0:	2301      	moveq	r3, #1
 80050f2:	2300      	movne	r3, #0
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	461a      	mov	r2, r3
 80050f8:	79fb      	ldrb	r3, [r7, #7]
 80050fa:	429a      	cmp	r2, r3
 80050fc:	f43f af46 	beq.w	8004f8c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005100:	2300      	movs	r3, #0
}
 8005102:	4618      	mov	r0, r3
 8005104:	3770      	adds	r7, #112	; 0x70
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}
	...

0800510c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800510c:	b480      	push	{r7}
 800510e:	b0a3      	sub	sp, #140	; 0x8c
 8005110:	af00      	add	r7, sp, #0
 8005112:	60f8      	str	r0, [r7, #12]
 8005114:	60b9      	str	r1, [r7, #8]
 8005116:	4613      	mov	r3, r2
 8005118:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	68ba      	ldr	r2, [r7, #8]
 800511e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	88fa      	ldrh	r2, [r7, #6]
 8005124:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	88fa      	ldrh	r2, [r7, #6]
 800512c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2200      	movs	r2, #0
 8005134:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800513e:	d10e      	bne.n	800515e <UART_Start_Receive_IT+0x52>
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	691b      	ldr	r3, [r3, #16]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d105      	bne.n	8005154 <UART_Start_Receive_IT+0x48>
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800514e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005152:	e02d      	b.n	80051b0 <UART_Start_Receive_IT+0xa4>
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	22ff      	movs	r2, #255	; 0xff
 8005158:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800515c:	e028      	b.n	80051b0 <UART_Start_Receive_IT+0xa4>
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d10d      	bne.n	8005182 <UART_Start_Receive_IT+0x76>
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	691b      	ldr	r3, [r3, #16]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d104      	bne.n	8005178 <UART_Start_Receive_IT+0x6c>
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	22ff      	movs	r2, #255	; 0xff
 8005172:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005176:	e01b      	b.n	80051b0 <UART_Start_Receive_IT+0xa4>
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	227f      	movs	r2, #127	; 0x7f
 800517c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005180:	e016      	b.n	80051b0 <UART_Start_Receive_IT+0xa4>
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800518a:	d10d      	bne.n	80051a8 <UART_Start_Receive_IT+0x9c>
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	691b      	ldr	r3, [r3, #16]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d104      	bne.n	800519e <UART_Start_Receive_IT+0x92>
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	227f      	movs	r2, #127	; 0x7f
 8005198:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800519c:	e008      	b.n	80051b0 <UART_Start_Receive_IT+0xa4>
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	223f      	movs	r2, #63	; 0x3f
 80051a2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80051a6:	e003      	b.n	80051b0 <UART_Start_Receive_IT+0xa4>
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2200      	movs	r2, #0
 80051ac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2200      	movs	r2, #0
 80051b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2222      	movs	r2, #34	; 0x22
 80051bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	3308      	adds	r3, #8
 80051c6:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051ca:	e853 3f00 	ldrex	r3, [r3]
 80051ce:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80051d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80051d2:	f043 0301 	orr.w	r3, r3, #1
 80051d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	3308      	adds	r3, #8
 80051e0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80051e4:	673a      	str	r2, [r7, #112]	; 0x70
 80051e6:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051e8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80051ea:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80051ec:	e841 2300 	strex	r3, r2, [r1]
 80051f0:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80051f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d1e3      	bne.n	80051c0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005200:	d153      	bne.n	80052aa <UART_Start_Receive_IT+0x19e>
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005208:	88fa      	ldrh	r2, [r7, #6]
 800520a:	429a      	cmp	r2, r3
 800520c:	d34d      	bcc.n	80052aa <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005216:	d107      	bne.n	8005228 <UART_Start_Receive_IT+0x11c>
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	691b      	ldr	r3, [r3, #16]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d103      	bne.n	8005228 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	4a4b      	ldr	r2, [pc, #300]	; (8005350 <UART_Start_Receive_IT+0x244>)
 8005224:	671a      	str	r2, [r3, #112]	; 0x70
 8005226:	e002      	b.n	800522e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	4a4a      	ldr	r2, [pc, #296]	; (8005354 <UART_Start_Receive_IT+0x248>)
 800522c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2200      	movs	r2, #0
 8005232:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	691b      	ldr	r3, [r3, #16]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d01a      	beq.n	8005274 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005244:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005246:	e853 3f00 	ldrex	r3, [r3]
 800524a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800524c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800524e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005252:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	461a      	mov	r2, r3
 800525c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005260:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005262:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005264:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005266:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005268:	e841 2300 	strex	r3, r2, [r1]
 800526c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800526e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005270:	2b00      	cmp	r3, #0
 8005272:	d1e4      	bne.n	800523e <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	3308      	adds	r3, #8
 800527a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800527c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800527e:	e853 3f00 	ldrex	r3, [r3]
 8005282:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005286:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800528a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	3308      	adds	r3, #8
 8005292:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005294:	64ba      	str	r2, [r7, #72]	; 0x48
 8005296:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005298:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800529a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800529c:	e841 2300 	strex	r3, r2, [r1]
 80052a0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80052a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d1e5      	bne.n	8005274 <UART_Start_Receive_IT+0x168>
 80052a8:	e04a      	b.n	8005340 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052b2:	d107      	bne.n	80052c4 <UART_Start_Receive_IT+0x1b8>
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	691b      	ldr	r3, [r3, #16]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d103      	bne.n	80052c4 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	4a26      	ldr	r2, [pc, #152]	; (8005358 <UART_Start_Receive_IT+0x24c>)
 80052c0:	671a      	str	r2, [r3, #112]	; 0x70
 80052c2:	e002      	b.n	80052ca <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	4a25      	ldr	r2, [pc, #148]	; (800535c <UART_Start_Receive_IT+0x250>)
 80052c8:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2200      	movs	r2, #0
 80052ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	691b      	ldr	r3, [r3, #16]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d019      	beq.n	800530e <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052e2:	e853 3f00 	ldrex	r3, [r3]
 80052e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80052e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ea:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80052ee:	677b      	str	r3, [r7, #116]	; 0x74
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	461a      	mov	r2, r3
 80052f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052f8:	637b      	str	r3, [r7, #52]	; 0x34
 80052fa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80052fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005300:	e841 2300 	strex	r3, r2, [r1]
 8005304:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005308:	2b00      	cmp	r3, #0
 800530a:	d1e6      	bne.n	80052da <UART_Start_Receive_IT+0x1ce>
 800530c:	e018      	b.n	8005340 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	e853 3f00 	ldrex	r3, [r3]
 800531a:	613b      	str	r3, [r7, #16]
   return(result);
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	f043 0320 	orr.w	r3, r3, #32
 8005322:	67bb      	str	r3, [r7, #120]	; 0x78
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	461a      	mov	r2, r3
 800532a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800532c:	623b      	str	r3, [r7, #32]
 800532e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005330:	69f9      	ldr	r1, [r7, #28]
 8005332:	6a3a      	ldr	r2, [r7, #32]
 8005334:	e841 2300 	strex	r3, r2, [r1]
 8005338:	61bb      	str	r3, [r7, #24]
   return(result);
 800533a:	69bb      	ldr	r3, [r7, #24]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d1e6      	bne.n	800530e <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	378c      	adds	r7, #140	; 0x8c
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr
 800534e:	bf00      	nop
 8005350:	08005a69 	.word	0x08005a69
 8005354:	08005771 	.word	0x08005771
 8005358:	0800560f 	.word	0x0800560f
 800535c:	080054af 	.word	0x080054af

08005360 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005360:	b480      	push	{r7}
 8005362:	b095      	sub	sp, #84	; 0x54
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800536e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005370:	e853 3f00 	ldrex	r3, [r3]
 8005374:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005378:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800537c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	461a      	mov	r2, r3
 8005384:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005386:	643b      	str	r3, [r7, #64]	; 0x40
 8005388:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800538a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800538c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800538e:	e841 2300 	strex	r3, r2, [r1]
 8005392:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005396:	2b00      	cmp	r3, #0
 8005398:	d1e6      	bne.n	8005368 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	3308      	adds	r3, #8
 80053a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053a2:	6a3b      	ldr	r3, [r7, #32]
 80053a4:	e853 3f00 	ldrex	r3, [r3]
 80053a8:	61fb      	str	r3, [r7, #28]
   return(result);
 80053aa:	69fb      	ldr	r3, [r7, #28]
 80053ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053b0:	f023 0301 	bic.w	r3, r3, #1
 80053b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	3308      	adds	r3, #8
 80053bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80053be:	62fa      	str	r2, [r7, #44]	; 0x2c
 80053c0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80053c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053c6:	e841 2300 	strex	r3, r2, [r1]
 80053ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80053cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d1e3      	bne.n	800539a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	d118      	bne.n	800540c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	e853 3f00 	ldrex	r3, [r3]
 80053e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	f023 0310 	bic.w	r3, r3, #16
 80053ee:	647b      	str	r3, [r7, #68]	; 0x44
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	461a      	mov	r2, r3
 80053f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053f8:	61bb      	str	r3, [r7, #24]
 80053fa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053fc:	6979      	ldr	r1, [r7, #20]
 80053fe:	69ba      	ldr	r2, [r7, #24]
 8005400:	e841 2300 	strex	r3, r2, [r1]
 8005404:	613b      	str	r3, [r7, #16]
   return(result);
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d1e6      	bne.n	80053da <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2220      	movs	r2, #32
 8005410:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2200      	movs	r2, #0
 8005418:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2200      	movs	r2, #0
 800541e:	671a      	str	r2, [r3, #112]	; 0x70
}
 8005420:	bf00      	nop
 8005422:	3754      	adds	r7, #84	; 0x54
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr

0800542c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b084      	sub	sp, #16
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005438:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2200      	movs	r2, #0
 800543e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2200      	movs	r2, #0
 8005446:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800544a:	68f8      	ldr	r0, [r7, #12]
 800544c:	f7ff f996 	bl	800477c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005450:	bf00      	nop
 8005452:	3710      	adds	r7, #16
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}

08005458 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b088      	sub	sp, #32
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	e853 3f00 	ldrex	r3, [r3]
 800546c:	60bb      	str	r3, [r7, #8]
   return(result);
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005474:	61fb      	str	r3, [r7, #28]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	461a      	mov	r2, r3
 800547c:	69fb      	ldr	r3, [r7, #28]
 800547e:	61bb      	str	r3, [r7, #24]
 8005480:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005482:	6979      	ldr	r1, [r7, #20]
 8005484:	69ba      	ldr	r2, [r7, #24]
 8005486:	e841 2300 	strex	r3, r2, [r1]
 800548a:	613b      	str	r3, [r7, #16]
   return(result);
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d1e6      	bne.n	8005460 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2220      	movs	r2, #32
 8005496:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2200      	movs	r2, #0
 800549e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f7ff f961 	bl	8004768 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054a6:	bf00      	nop
 80054a8:	3720      	adds	r7, #32
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}

080054ae <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80054ae:	b580      	push	{r7, lr}
 80054b0:	b096      	sub	sp, #88	; 0x58
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80054bc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054c6:	2b22      	cmp	r3, #34	; 0x22
 80054c8:	f040 8095 	bne.w	80055f6 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80054d6:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80054da:	b2d9      	uxtb	r1, r3
 80054dc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80054e0:	b2da      	uxtb	r2, r3
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054e6:	400a      	ands	r2, r1
 80054e8:	b2d2      	uxtb	r2, r2
 80054ea:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054f0:	1c5a      	adds	r2, r3, #1
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	3b01      	subs	r3, #1
 8005500:	b29a      	uxth	r2, r3
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800550e:	b29b      	uxth	r3, r3
 8005510:	2b00      	cmp	r3, #0
 8005512:	d178      	bne.n	8005606 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800551a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800551c:	e853 3f00 	ldrex	r3, [r3]
 8005520:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005524:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005528:	653b      	str	r3, [r7, #80]	; 0x50
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	461a      	mov	r2, r3
 8005530:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005532:	647b      	str	r3, [r7, #68]	; 0x44
 8005534:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005536:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005538:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800553a:	e841 2300 	strex	r3, r2, [r1]
 800553e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005540:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005542:	2b00      	cmp	r3, #0
 8005544:	d1e6      	bne.n	8005514 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	3308      	adds	r3, #8
 800554c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800554e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005550:	e853 3f00 	ldrex	r3, [r3]
 8005554:	623b      	str	r3, [r7, #32]
   return(result);
 8005556:	6a3b      	ldr	r3, [r7, #32]
 8005558:	f023 0301 	bic.w	r3, r3, #1
 800555c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	3308      	adds	r3, #8
 8005564:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005566:	633a      	str	r2, [r7, #48]	; 0x30
 8005568:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800556a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800556c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800556e:	e841 2300 	strex	r3, r2, [r1]
 8005572:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005576:	2b00      	cmp	r3, #0
 8005578:	d1e5      	bne.n	8005546 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2220      	movs	r2, #32
 800557e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800558c:	2b01      	cmp	r3, #1
 800558e:	d12e      	bne.n	80055ee <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2200      	movs	r2, #0
 8005594:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	e853 3f00 	ldrex	r3, [r3]
 80055a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f023 0310 	bic.w	r3, r3, #16
 80055aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	461a      	mov	r2, r3
 80055b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055b4:	61fb      	str	r3, [r7, #28]
 80055b6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055b8:	69b9      	ldr	r1, [r7, #24]
 80055ba:	69fa      	ldr	r2, [r7, #28]
 80055bc:	e841 2300 	strex	r3, r2, [r1]
 80055c0:	617b      	str	r3, [r7, #20]
   return(result);
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d1e6      	bne.n	8005596 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	69db      	ldr	r3, [r3, #28]
 80055ce:	f003 0310 	and.w	r3, r3, #16
 80055d2:	2b10      	cmp	r3, #16
 80055d4:	d103      	bne.n	80055de <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	2210      	movs	r2, #16
 80055dc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80055e4:	4619      	mov	r1, r3
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f7ff f8d2 	bl	8004790 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80055ec:	e00b      	b.n	8005606 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f7fb fb22 	bl	8000c38 <HAL_UART_RxCpltCallback>
}
 80055f4:	e007      	b.n	8005606 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	699a      	ldr	r2, [r3, #24]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f042 0208 	orr.w	r2, r2, #8
 8005604:	619a      	str	r2, [r3, #24]
}
 8005606:	bf00      	nop
 8005608:	3758      	adds	r7, #88	; 0x58
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}

0800560e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800560e:	b580      	push	{r7, lr}
 8005610:	b096      	sub	sp, #88	; 0x58
 8005612:	af00      	add	r7, sp, #0
 8005614:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800561c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005626:	2b22      	cmp	r3, #34	; 0x22
 8005628:	f040 8095 	bne.w	8005756 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005632:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800563a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800563c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8005640:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005644:	4013      	ands	r3, r2
 8005646:	b29a      	uxth	r2, r3
 8005648:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800564a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005650:	1c9a      	adds	r2, r3, #2
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800565c:	b29b      	uxth	r3, r3
 800565e:	3b01      	subs	r3, #1
 8005660:	b29a      	uxth	r2, r3
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800566e:	b29b      	uxth	r3, r3
 8005670:	2b00      	cmp	r3, #0
 8005672:	d178      	bne.n	8005766 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800567a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800567c:	e853 3f00 	ldrex	r3, [r3]
 8005680:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005684:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005688:	64fb      	str	r3, [r7, #76]	; 0x4c
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	461a      	mov	r2, r3
 8005690:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005692:	643b      	str	r3, [r7, #64]	; 0x40
 8005694:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005696:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005698:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800569a:	e841 2300 	strex	r3, r2, [r1]
 800569e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80056a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d1e6      	bne.n	8005674 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	3308      	adds	r3, #8
 80056ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ae:	6a3b      	ldr	r3, [r7, #32]
 80056b0:	e853 3f00 	ldrex	r3, [r3]
 80056b4:	61fb      	str	r3, [r7, #28]
   return(result);
 80056b6:	69fb      	ldr	r3, [r7, #28]
 80056b8:	f023 0301 	bic.w	r3, r3, #1
 80056bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	3308      	adds	r3, #8
 80056c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80056c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80056c8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80056cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056ce:	e841 2300 	strex	r3, r2, [r1]
 80056d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80056d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d1e5      	bne.n	80056a6 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2220      	movs	r2, #32
 80056de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2200      	movs	r2, #0
 80056e6:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d12e      	bne.n	800574e <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2200      	movs	r2, #0
 80056f4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	e853 3f00 	ldrex	r3, [r3]
 8005702:	60bb      	str	r3, [r7, #8]
   return(result);
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	f023 0310 	bic.w	r3, r3, #16
 800570a:	647b      	str	r3, [r7, #68]	; 0x44
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	461a      	mov	r2, r3
 8005712:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005714:	61bb      	str	r3, [r7, #24]
 8005716:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005718:	6979      	ldr	r1, [r7, #20]
 800571a:	69ba      	ldr	r2, [r7, #24]
 800571c:	e841 2300 	strex	r3, r2, [r1]
 8005720:	613b      	str	r3, [r7, #16]
   return(result);
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d1e6      	bne.n	80056f6 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	69db      	ldr	r3, [r3, #28]
 800572e:	f003 0310 	and.w	r3, r3, #16
 8005732:	2b10      	cmp	r3, #16
 8005734:	d103      	bne.n	800573e <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	2210      	movs	r2, #16
 800573c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005744:	4619      	mov	r1, r3
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f7ff f822 	bl	8004790 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800574c:	e00b      	b.n	8005766 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f7fb fa72 	bl	8000c38 <HAL_UART_RxCpltCallback>
}
 8005754:	e007      	b.n	8005766 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	699a      	ldr	r2, [r3, #24]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f042 0208 	orr.w	r2, r2, #8
 8005764:	619a      	str	r2, [r3, #24]
}
 8005766:	bf00      	nop
 8005768:	3758      	adds	r7, #88	; 0x58
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}
	...

08005770 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b0a6      	sub	sp, #152	; 0x98
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800577e:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	69db      	ldr	r3, [r3, #28]
 8005788:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057a6:	2b22      	cmp	r3, #34	; 0x22
 80057a8:	f040 814f 	bne.w	8005a4a <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80057b2:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80057b6:	e0f6      	b.n	80059a6 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057be:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80057c2:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80057c6:	b2d9      	uxtb	r1, r3
 80057c8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80057cc:	b2da      	uxtb	r2, r3
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057d2:	400a      	ands	r2, r1
 80057d4:	b2d2      	uxtb	r2, r2
 80057d6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057dc:	1c5a      	adds	r2, r3, #1
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	3b01      	subs	r3, #1
 80057ec:	b29a      	uxth	r2, r3
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	69db      	ldr	r3, [r3, #28]
 80057fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80057fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005802:	f003 0307 	and.w	r3, r3, #7
 8005806:	2b00      	cmp	r3, #0
 8005808:	d053      	beq.n	80058b2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800580a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800580e:	f003 0301 	and.w	r3, r3, #1
 8005812:	2b00      	cmp	r3, #0
 8005814:	d011      	beq.n	800583a <UART_RxISR_8BIT_FIFOEN+0xca>
 8005816:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800581a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800581e:	2b00      	cmp	r3, #0
 8005820:	d00b      	beq.n	800583a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	2201      	movs	r2, #1
 8005828:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005830:	f043 0201 	orr.w	r2, r3, #1
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800583a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800583e:	f003 0302 	and.w	r3, r3, #2
 8005842:	2b00      	cmp	r3, #0
 8005844:	d011      	beq.n	800586a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8005846:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800584a:	f003 0301 	and.w	r3, r3, #1
 800584e:	2b00      	cmp	r3, #0
 8005850:	d00b      	beq.n	800586a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	2202      	movs	r2, #2
 8005858:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005860:	f043 0204 	orr.w	r2, r3, #4
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800586a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800586e:	f003 0304 	and.w	r3, r3, #4
 8005872:	2b00      	cmp	r3, #0
 8005874:	d011      	beq.n	800589a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8005876:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800587a:	f003 0301 	and.w	r3, r3, #1
 800587e:	2b00      	cmp	r3, #0
 8005880:	d00b      	beq.n	800589a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	2204      	movs	r2, #4
 8005888:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005890:	f043 0202 	orr.w	r2, r3, #2
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d006      	beq.n	80058b2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f7fe ff69 	bl	800477c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2200      	movs	r2, #0
 80058ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d173      	bne.n	80059a6 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058c6:	e853 3f00 	ldrex	r3, [r3]
 80058ca:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80058cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80058ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	461a      	mov	r2, r3
 80058dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80058e0:	66bb      	str	r3, [r7, #104]	; 0x68
 80058e2:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e4:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80058e6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80058e8:	e841 2300 	strex	r3, r2, [r1]
 80058ec:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80058ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d1e4      	bne.n	80058be <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	3308      	adds	r3, #8
 80058fa:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058fe:	e853 3f00 	ldrex	r3, [r3]
 8005902:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005904:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005906:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800590a:	f023 0301 	bic.w	r3, r3, #1
 800590e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	3308      	adds	r3, #8
 8005916:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005918:	657a      	str	r2, [r7, #84]	; 0x54
 800591a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800591c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800591e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005920:	e841 2300 	strex	r3, r2, [r1]
 8005924:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005926:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005928:	2b00      	cmp	r3, #0
 800592a:	d1e3      	bne.n	80058f4 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2220      	movs	r2, #32
 8005930:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2200      	movs	r2, #0
 8005938:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800593e:	2b01      	cmp	r3, #1
 8005940:	d12e      	bne.n	80059a0 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800594e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005950:	e853 3f00 	ldrex	r3, [r3]
 8005954:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005958:	f023 0310 	bic.w	r3, r3, #16
 800595c:	67bb      	str	r3, [r7, #120]	; 0x78
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	461a      	mov	r2, r3
 8005964:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005966:	643b      	str	r3, [r7, #64]	; 0x40
 8005968:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800596a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800596c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800596e:	e841 2300 	strex	r3, r2, [r1]
 8005972:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005976:	2b00      	cmp	r3, #0
 8005978:	d1e6      	bne.n	8005948 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	69db      	ldr	r3, [r3, #28]
 8005980:	f003 0310 	and.w	r3, r3, #16
 8005984:	2b10      	cmp	r3, #16
 8005986:	d103      	bne.n	8005990 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	2210      	movs	r2, #16
 800598e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005996:	4619      	mov	r1, r3
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f7fe fef9 	bl	8004790 <HAL_UARTEx_RxEventCallback>
 800599e:	e002      	b.n	80059a6 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f7fb f949 	bl	8000c38 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80059a6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d006      	beq.n	80059bc <UART_RxISR_8BIT_FIFOEN+0x24c>
 80059ae:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80059b2:	f003 0320 	and.w	r3, r3, #32
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	f47f aefe 	bne.w	80057b8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80059c2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80059c6:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d045      	beq.n	8005a5a <UART_RxISR_8BIT_FIFOEN+0x2ea>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80059d4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80059d8:	429a      	cmp	r2, r3
 80059da:	d23e      	bcs.n	8005a5a <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	3308      	adds	r3, #8
 80059e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e4:	6a3b      	ldr	r3, [r7, #32]
 80059e6:	e853 3f00 	ldrex	r3, [r3]
 80059ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80059ec:	69fb      	ldr	r3, [r7, #28]
 80059ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059f2:	673b      	str	r3, [r7, #112]	; 0x70
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	3308      	adds	r3, #8
 80059fa:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80059fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80059fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a04:	e841 2300 	strex	r3, r2, [r1]
 8005a08:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d1e5      	bne.n	80059dc <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	4a14      	ldr	r2, [pc, #80]	; (8005a64 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8005a14:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	e853 3f00 	ldrex	r3, [r3]
 8005a22:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	f043 0320 	orr.w	r3, r3, #32
 8005a2a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	461a      	mov	r2, r3
 8005a32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a34:	61bb      	str	r3, [r7, #24]
 8005a36:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a38:	6979      	ldr	r1, [r7, #20]
 8005a3a:	69ba      	ldr	r2, [r7, #24]
 8005a3c:	e841 2300 	strex	r3, r2, [r1]
 8005a40:	613b      	str	r3, [r7, #16]
   return(result);
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d1e6      	bne.n	8005a16 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005a48:	e007      	b.n	8005a5a <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	699a      	ldr	r2, [r3, #24]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f042 0208 	orr.w	r2, r2, #8
 8005a58:	619a      	str	r2, [r3, #24]
}
 8005a5a:	bf00      	nop
 8005a5c:	3798      	adds	r7, #152	; 0x98
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}
 8005a62:	bf00      	nop
 8005a64:	080054af 	.word	0x080054af

08005a68 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b0a8      	sub	sp, #160	; 0xa0
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005a76:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	69db      	ldr	r3, [r3, #28]
 8005a80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a9e:	2b22      	cmp	r3, #34	; 0x22
 8005aa0:	f040 8153 	bne.w	8005d4a <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005aaa:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005aae:	e0fa      	b.n	8005ca6 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab6:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005abe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8005ac2:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8005ac6:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005aca:	4013      	ands	r3, r2
 8005acc:	b29a      	uxth	r2, r3
 8005ace:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005ad2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ad8:	1c9a      	adds	r2, r3, #2
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005ae4:	b29b      	uxth	r3, r3
 8005ae6:	3b01      	subs	r3, #1
 8005ae8:	b29a      	uxth	r2, r3
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	69db      	ldr	r3, [r3, #28]
 8005af6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005afa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005afe:	f003 0307 	and.w	r3, r3, #7
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d053      	beq.n	8005bae <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005b06:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005b0a:	f003 0301 	and.w	r3, r3, #1
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d011      	beq.n	8005b36 <UART_RxISR_16BIT_FIFOEN+0xce>
 8005b12:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005b16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d00b      	beq.n	8005b36 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	2201      	movs	r2, #1
 8005b24:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b2c:	f043 0201 	orr.w	r2, r3, #1
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b36:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005b3a:	f003 0302 	and.w	r3, r3, #2
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d011      	beq.n	8005b66 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8005b42:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005b46:	f003 0301 	and.w	r3, r3, #1
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d00b      	beq.n	8005b66 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	2202      	movs	r2, #2
 8005b54:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b5c:	f043 0204 	orr.w	r2, r3, #4
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b66:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005b6a:	f003 0304 	and.w	r3, r3, #4
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d011      	beq.n	8005b96 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8005b72:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005b76:	f003 0301 	and.w	r3, r3, #1
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d00b      	beq.n	8005b96 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	2204      	movs	r2, #4
 8005b84:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b8c:	f043 0202 	orr.w	r2, r3, #2
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d006      	beq.n	8005bae <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f7fe fdeb 	bl	800477c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d175      	bne.n	8005ca6 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bc0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005bc2:	e853 3f00 	ldrex	r3, [r3]
 8005bc6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005bc8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005bca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	461a      	mov	r2, r3
 8005bd8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005bdc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005bde:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005be2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005be4:	e841 2300 	strex	r3, r2, [r1]
 8005be8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005bea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d1e4      	bne.n	8005bba <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	3308      	adds	r3, #8
 8005bf6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bfa:	e853 3f00 	ldrex	r3, [r3]
 8005bfe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005c00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c06:	f023 0301 	bic.w	r3, r3, #1
 8005c0a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	3308      	adds	r3, #8
 8005c14:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005c18:	65ba      	str	r2, [r7, #88]	; 0x58
 8005c1a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c1c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005c1e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005c20:	e841 2300 	strex	r3, r2, [r1]
 8005c24:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005c26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d1e1      	bne.n	8005bf0 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2220      	movs	r2, #32
 8005c30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2200      	movs	r2, #0
 8005c38:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c3e:	2b01      	cmp	r3, #1
 8005c40:	d12e      	bne.n	8005ca0 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2200      	movs	r2, #0
 8005c46:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c50:	e853 3f00 	ldrex	r3, [r3]
 8005c54:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005c56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c58:	f023 0310 	bic.w	r3, r3, #16
 8005c5c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	461a      	mov	r2, r3
 8005c64:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005c66:	647b      	str	r3, [r7, #68]	; 0x44
 8005c68:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c6a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005c6c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c6e:	e841 2300 	strex	r3, r2, [r1]
 8005c72:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005c74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d1e6      	bne.n	8005c48 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	69db      	ldr	r3, [r3, #28]
 8005c80:	f003 0310 	and.w	r3, r3, #16
 8005c84:	2b10      	cmp	r3, #16
 8005c86:	d103      	bne.n	8005c90 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	2210      	movs	r2, #16
 8005c8e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005c96:	4619      	mov	r1, r3
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f7fe fd79 	bl	8004790 <HAL_UARTEx_RxEventCallback>
 8005c9e:	e002      	b.n	8005ca6 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f7fa ffc9 	bl	8000c38 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005ca6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d006      	beq.n	8005cbc <UART_RxISR_16BIT_FIFOEN+0x254>
 8005cae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005cb2:	f003 0320 	and.w	r3, r3, #32
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	f47f aefa 	bne.w	8005ab0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005cc2:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005cc6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d045      	beq.n	8005d5a <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005cd4:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d23e      	bcs.n	8005d5a <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	3308      	adds	r3, #8
 8005ce2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce6:	e853 3f00 	ldrex	r3, [r3]
 8005cea:	623b      	str	r3, [r7, #32]
   return(result);
 8005cec:	6a3b      	ldr	r3, [r7, #32]
 8005cee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005cf2:	677b      	str	r3, [r7, #116]	; 0x74
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	3308      	adds	r3, #8
 8005cfa:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005cfc:	633a      	str	r2, [r7, #48]	; 0x30
 8005cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d00:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d04:	e841 2300 	strex	r3, r2, [r1]
 8005d08:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d1e5      	bne.n	8005cdc <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	4a14      	ldr	r2, [pc, #80]	; (8005d64 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8005d14:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	e853 3f00 	ldrex	r3, [r3]
 8005d22:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f043 0320 	orr.w	r3, r3, #32
 8005d2a:	673b      	str	r3, [r7, #112]	; 0x70
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	461a      	mov	r2, r3
 8005d32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d34:	61fb      	str	r3, [r7, #28]
 8005d36:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d38:	69b9      	ldr	r1, [r7, #24]
 8005d3a:	69fa      	ldr	r2, [r7, #28]
 8005d3c:	e841 2300 	strex	r3, r2, [r1]
 8005d40:	617b      	str	r3, [r7, #20]
   return(result);
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d1e6      	bne.n	8005d16 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005d48:	e007      	b.n	8005d5a <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	699a      	ldr	r2, [r3, #24]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f042 0208 	orr.w	r2, r2, #8
 8005d58:	619a      	str	r2, [r3, #24]
}
 8005d5a:	bf00      	nop
 8005d5c:	37a0      	adds	r7, #160	; 0xa0
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}
 8005d62:	bf00      	nop
 8005d64:	0800560f 	.word	0x0800560f

08005d68 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b083      	sub	sp, #12
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005d70:	bf00      	nop
 8005d72:	370c      	adds	r7, #12
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr

08005d7c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b083      	sub	sp, #12
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005d84:	bf00      	nop
 8005d86:	370c      	adds	r7, #12
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr

08005d90 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b083      	sub	sp, #12
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005d98:	bf00      	nop
 8005d9a:	370c      	adds	r7, #12
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da2:	4770      	bx	lr

08005da4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b085      	sub	sp, #20
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d101      	bne.n	8005dba <HAL_UARTEx_DisableFifoMode+0x16>
 8005db6:	2302      	movs	r3, #2
 8005db8:	e027      	b.n	8005e0a <HAL_UARTEx_DisableFifoMode+0x66>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2224      	movs	r2, #36	; 0x24
 8005dc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f022 0201 	bic.w	r2, r2, #1
 8005de0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005de8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2200      	movs	r2, #0
 8005dee:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	68fa      	ldr	r2, [r7, #12]
 8005df6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2220      	movs	r2, #32
 8005dfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2200      	movs	r2, #0
 8005e04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005e08:	2300      	movs	r3, #0
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3714      	adds	r7, #20
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e14:	4770      	bx	lr

08005e16 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005e16:	b580      	push	{r7, lr}
 8005e18:	b084      	sub	sp, #16
 8005e1a:	af00      	add	r7, sp, #0
 8005e1c:	6078      	str	r0, [r7, #4]
 8005e1e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	d101      	bne.n	8005e2e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005e2a:	2302      	movs	r3, #2
 8005e2c:	e02d      	b.n	8005e8a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2201      	movs	r2, #1
 8005e32:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2224      	movs	r2, #36	; 0x24
 8005e3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f022 0201 	bic.w	r2, r2, #1
 8005e54:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	689b      	ldr	r3, [r3, #8]
 8005e5c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	683a      	ldr	r2, [r7, #0]
 8005e66:	430a      	orrs	r2, r1
 8005e68:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f000 f850 	bl	8005f10 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	68fa      	ldr	r2, [r7, #12]
 8005e76:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2220      	movs	r2, #32
 8005e7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2200      	movs	r2, #0
 8005e84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005e88:	2300      	movs	r3, #0
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3710      	adds	r7, #16
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}

08005e92 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005e92:	b580      	push	{r7, lr}
 8005e94:	b084      	sub	sp, #16
 8005e96:	af00      	add	r7, sp, #0
 8005e98:	6078      	str	r0, [r7, #4]
 8005e9a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d101      	bne.n	8005eaa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005ea6:	2302      	movs	r3, #2
 8005ea8:	e02d      	b.n	8005f06 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2201      	movs	r2, #1
 8005eae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2224      	movs	r2, #36	; 0x24
 8005eb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	681a      	ldr	r2, [r3, #0]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f022 0201 	bic.w	r2, r2, #1
 8005ed0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	683a      	ldr	r2, [r7, #0]
 8005ee2:	430a      	orrs	r2, r1
 8005ee4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f000 f812 	bl	8005f10 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	68fa      	ldr	r2, [r7, #12]
 8005ef2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2220      	movs	r2, #32
 8005ef8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2200      	movs	r2, #0
 8005f00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005f04:	2300      	movs	r3, #0
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3710      	adds	r7, #16
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}
	...

08005f10 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b085      	sub	sp, #20
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d108      	bne.n	8005f32 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2201      	movs	r2, #1
 8005f24:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005f30:	e031      	b.n	8005f96 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005f32:	2308      	movs	r3, #8
 8005f34:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005f36:	2308      	movs	r3, #8
 8005f38:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	0e5b      	lsrs	r3, r3, #25
 8005f42:	b2db      	uxtb	r3, r3
 8005f44:	f003 0307 	and.w	r3, r3, #7
 8005f48:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	0f5b      	lsrs	r3, r3, #29
 8005f52:	b2db      	uxtb	r3, r3
 8005f54:	f003 0307 	and.w	r3, r3, #7
 8005f58:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005f5a:	7bbb      	ldrb	r3, [r7, #14]
 8005f5c:	7b3a      	ldrb	r2, [r7, #12]
 8005f5e:	4911      	ldr	r1, [pc, #68]	; (8005fa4 <UARTEx_SetNbDataToProcess+0x94>)
 8005f60:	5c8a      	ldrb	r2, [r1, r2]
 8005f62:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005f66:	7b3a      	ldrb	r2, [r7, #12]
 8005f68:	490f      	ldr	r1, [pc, #60]	; (8005fa8 <UARTEx_SetNbDataToProcess+0x98>)
 8005f6a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005f6c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005f70:	b29a      	uxth	r2, r3
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005f78:	7bfb      	ldrb	r3, [r7, #15]
 8005f7a:	7b7a      	ldrb	r2, [r7, #13]
 8005f7c:	4909      	ldr	r1, [pc, #36]	; (8005fa4 <UARTEx_SetNbDataToProcess+0x94>)
 8005f7e:	5c8a      	ldrb	r2, [r1, r2]
 8005f80:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005f84:	7b7a      	ldrb	r2, [r7, #13]
 8005f86:	4908      	ldr	r1, [pc, #32]	; (8005fa8 <UARTEx_SetNbDataToProcess+0x98>)
 8005f88:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005f8a:	fb93 f3f2 	sdiv	r3, r3, r2
 8005f8e:	b29a      	uxth	r2, r3
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005f96:	bf00      	nop
 8005f98:	3714      	adds	r7, #20
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa0:	4770      	bx	lr
 8005fa2:	bf00      	nop
 8005fa4:	08007740 	.word	0x08007740
 8005fa8:	08007748 	.word	0x08007748

08005fac <atoi>:
 8005fac:	220a      	movs	r2, #10
 8005fae:	2100      	movs	r1, #0
 8005fb0:	f000 b930 	b.w	8006214 <strtol>

08005fb4 <__errno>:
 8005fb4:	4b01      	ldr	r3, [pc, #4]	; (8005fbc <__errno+0x8>)
 8005fb6:	6818      	ldr	r0, [r3, #0]
 8005fb8:	4770      	bx	lr
 8005fba:	bf00      	nop
 8005fbc:	200000a4 	.word	0x200000a4

08005fc0 <__libc_init_array>:
 8005fc0:	b570      	push	{r4, r5, r6, lr}
 8005fc2:	4d0d      	ldr	r5, [pc, #52]	; (8005ff8 <__libc_init_array+0x38>)
 8005fc4:	4c0d      	ldr	r4, [pc, #52]	; (8005ffc <__libc_init_array+0x3c>)
 8005fc6:	1b64      	subs	r4, r4, r5
 8005fc8:	10a4      	asrs	r4, r4, #2
 8005fca:	2600      	movs	r6, #0
 8005fcc:	42a6      	cmp	r6, r4
 8005fce:	d109      	bne.n	8005fe4 <__libc_init_array+0x24>
 8005fd0:	4d0b      	ldr	r5, [pc, #44]	; (8006000 <__libc_init_array+0x40>)
 8005fd2:	4c0c      	ldr	r4, [pc, #48]	; (8006004 <__libc_init_array+0x44>)
 8005fd4:	f001 fade 	bl	8007594 <_init>
 8005fd8:	1b64      	subs	r4, r4, r5
 8005fda:	10a4      	asrs	r4, r4, #2
 8005fdc:	2600      	movs	r6, #0
 8005fde:	42a6      	cmp	r6, r4
 8005fe0:	d105      	bne.n	8005fee <__libc_init_array+0x2e>
 8005fe2:	bd70      	pop	{r4, r5, r6, pc}
 8005fe4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fe8:	4798      	blx	r3
 8005fea:	3601      	adds	r6, #1
 8005fec:	e7ee      	b.n	8005fcc <__libc_init_array+0xc>
 8005fee:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ff2:	4798      	blx	r3
 8005ff4:	3601      	adds	r6, #1
 8005ff6:	e7f2      	b.n	8005fde <__libc_init_array+0x1e>
 8005ff8:	080079a0 	.word	0x080079a0
 8005ffc:	080079a0 	.word	0x080079a0
 8006000:	080079a0 	.word	0x080079a0
 8006004:	080079a4 	.word	0x080079a4

08006008 <memset>:
 8006008:	4402      	add	r2, r0
 800600a:	4603      	mov	r3, r0
 800600c:	4293      	cmp	r3, r2
 800600e:	d100      	bne.n	8006012 <memset+0xa>
 8006010:	4770      	bx	lr
 8006012:	f803 1b01 	strb.w	r1, [r3], #1
 8006016:	e7f9      	b.n	800600c <memset+0x4>

08006018 <siprintf>:
 8006018:	b40e      	push	{r1, r2, r3}
 800601a:	b500      	push	{lr}
 800601c:	b09c      	sub	sp, #112	; 0x70
 800601e:	ab1d      	add	r3, sp, #116	; 0x74
 8006020:	9002      	str	r0, [sp, #8]
 8006022:	9006      	str	r0, [sp, #24]
 8006024:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006028:	4809      	ldr	r0, [pc, #36]	; (8006050 <siprintf+0x38>)
 800602a:	9107      	str	r1, [sp, #28]
 800602c:	9104      	str	r1, [sp, #16]
 800602e:	4909      	ldr	r1, [pc, #36]	; (8006054 <siprintf+0x3c>)
 8006030:	f853 2b04 	ldr.w	r2, [r3], #4
 8006034:	9105      	str	r1, [sp, #20]
 8006036:	6800      	ldr	r0, [r0, #0]
 8006038:	9301      	str	r3, [sp, #4]
 800603a:	a902      	add	r1, sp, #8
 800603c:	f000 fa68 	bl	8006510 <_svfiprintf_r>
 8006040:	9b02      	ldr	r3, [sp, #8]
 8006042:	2200      	movs	r2, #0
 8006044:	701a      	strb	r2, [r3, #0]
 8006046:	b01c      	add	sp, #112	; 0x70
 8006048:	f85d eb04 	ldr.w	lr, [sp], #4
 800604c:	b003      	add	sp, #12
 800604e:	4770      	bx	lr
 8006050:	200000a4 	.word	0x200000a4
 8006054:	ffff0208 	.word	0xffff0208

08006058 <strtok>:
 8006058:	4b16      	ldr	r3, [pc, #88]	; (80060b4 <strtok+0x5c>)
 800605a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800605c:	681e      	ldr	r6, [r3, #0]
 800605e:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8006060:	4605      	mov	r5, r0
 8006062:	b9fc      	cbnz	r4, 80060a4 <strtok+0x4c>
 8006064:	2050      	movs	r0, #80	; 0x50
 8006066:	9101      	str	r1, [sp, #4]
 8006068:	f000 f90e 	bl	8006288 <malloc>
 800606c:	9901      	ldr	r1, [sp, #4]
 800606e:	65b0      	str	r0, [r6, #88]	; 0x58
 8006070:	4602      	mov	r2, r0
 8006072:	b920      	cbnz	r0, 800607e <strtok+0x26>
 8006074:	4b10      	ldr	r3, [pc, #64]	; (80060b8 <strtok+0x60>)
 8006076:	4811      	ldr	r0, [pc, #68]	; (80060bc <strtok+0x64>)
 8006078:	2157      	movs	r1, #87	; 0x57
 800607a:	f000 f8d5 	bl	8006228 <__assert_func>
 800607e:	e9c0 4400 	strd	r4, r4, [r0]
 8006082:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8006086:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800608a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800608e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8006092:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8006096:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800609a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800609e:	6184      	str	r4, [r0, #24]
 80060a0:	7704      	strb	r4, [r0, #28]
 80060a2:	6244      	str	r4, [r0, #36]	; 0x24
 80060a4:	6db2      	ldr	r2, [r6, #88]	; 0x58
 80060a6:	2301      	movs	r3, #1
 80060a8:	4628      	mov	r0, r5
 80060aa:	b002      	add	sp, #8
 80060ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80060b0:	f000 b806 	b.w	80060c0 <__strtok_r>
 80060b4:	200000a4 	.word	0x200000a4
 80060b8:	08007754 	.word	0x08007754
 80060bc:	0800776b 	.word	0x0800776b

080060c0 <__strtok_r>:
 80060c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060c2:	b908      	cbnz	r0, 80060c8 <__strtok_r+0x8>
 80060c4:	6810      	ldr	r0, [r2, #0]
 80060c6:	b188      	cbz	r0, 80060ec <__strtok_r+0x2c>
 80060c8:	4604      	mov	r4, r0
 80060ca:	4620      	mov	r0, r4
 80060cc:	f814 5b01 	ldrb.w	r5, [r4], #1
 80060d0:	460f      	mov	r7, r1
 80060d2:	f817 6b01 	ldrb.w	r6, [r7], #1
 80060d6:	b91e      	cbnz	r6, 80060e0 <__strtok_r+0x20>
 80060d8:	b965      	cbnz	r5, 80060f4 <__strtok_r+0x34>
 80060da:	6015      	str	r5, [r2, #0]
 80060dc:	4628      	mov	r0, r5
 80060de:	e005      	b.n	80060ec <__strtok_r+0x2c>
 80060e0:	42b5      	cmp	r5, r6
 80060e2:	d1f6      	bne.n	80060d2 <__strtok_r+0x12>
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d1f0      	bne.n	80060ca <__strtok_r+0xa>
 80060e8:	6014      	str	r4, [r2, #0]
 80060ea:	7003      	strb	r3, [r0, #0]
 80060ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060ee:	461c      	mov	r4, r3
 80060f0:	e00c      	b.n	800610c <__strtok_r+0x4c>
 80060f2:	b915      	cbnz	r5, 80060fa <__strtok_r+0x3a>
 80060f4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80060f8:	460e      	mov	r6, r1
 80060fa:	f816 5b01 	ldrb.w	r5, [r6], #1
 80060fe:	42ab      	cmp	r3, r5
 8006100:	d1f7      	bne.n	80060f2 <__strtok_r+0x32>
 8006102:	2b00      	cmp	r3, #0
 8006104:	d0f3      	beq.n	80060ee <__strtok_r+0x2e>
 8006106:	2300      	movs	r3, #0
 8006108:	f804 3c01 	strb.w	r3, [r4, #-1]
 800610c:	6014      	str	r4, [r2, #0]
 800610e:	e7ed      	b.n	80060ec <__strtok_r+0x2c>

08006110 <_strtol_l.constprop.0>:
 8006110:	2b01      	cmp	r3, #1
 8006112:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006116:	d001      	beq.n	800611c <_strtol_l.constprop.0+0xc>
 8006118:	2b24      	cmp	r3, #36	; 0x24
 800611a:	d906      	bls.n	800612a <_strtol_l.constprop.0+0x1a>
 800611c:	f7ff ff4a 	bl	8005fb4 <__errno>
 8006120:	2316      	movs	r3, #22
 8006122:	6003      	str	r3, [r0, #0]
 8006124:	2000      	movs	r0, #0
 8006126:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800612a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006210 <_strtol_l.constprop.0+0x100>
 800612e:	460d      	mov	r5, r1
 8006130:	462e      	mov	r6, r5
 8006132:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006136:	f814 700c 	ldrb.w	r7, [r4, ip]
 800613a:	f017 0708 	ands.w	r7, r7, #8
 800613e:	d1f7      	bne.n	8006130 <_strtol_l.constprop.0+0x20>
 8006140:	2c2d      	cmp	r4, #45	; 0x2d
 8006142:	d132      	bne.n	80061aa <_strtol_l.constprop.0+0x9a>
 8006144:	782c      	ldrb	r4, [r5, #0]
 8006146:	2701      	movs	r7, #1
 8006148:	1cb5      	adds	r5, r6, #2
 800614a:	2b00      	cmp	r3, #0
 800614c:	d05b      	beq.n	8006206 <_strtol_l.constprop.0+0xf6>
 800614e:	2b10      	cmp	r3, #16
 8006150:	d109      	bne.n	8006166 <_strtol_l.constprop.0+0x56>
 8006152:	2c30      	cmp	r4, #48	; 0x30
 8006154:	d107      	bne.n	8006166 <_strtol_l.constprop.0+0x56>
 8006156:	782c      	ldrb	r4, [r5, #0]
 8006158:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800615c:	2c58      	cmp	r4, #88	; 0x58
 800615e:	d14d      	bne.n	80061fc <_strtol_l.constprop.0+0xec>
 8006160:	786c      	ldrb	r4, [r5, #1]
 8006162:	2310      	movs	r3, #16
 8006164:	3502      	adds	r5, #2
 8006166:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800616a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800616e:	f04f 0c00 	mov.w	ip, #0
 8006172:	fbb8 f9f3 	udiv	r9, r8, r3
 8006176:	4666      	mov	r6, ip
 8006178:	fb03 8a19 	mls	sl, r3, r9, r8
 800617c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8006180:	f1be 0f09 	cmp.w	lr, #9
 8006184:	d816      	bhi.n	80061b4 <_strtol_l.constprop.0+0xa4>
 8006186:	4674      	mov	r4, lr
 8006188:	42a3      	cmp	r3, r4
 800618a:	dd24      	ble.n	80061d6 <_strtol_l.constprop.0+0xc6>
 800618c:	f1bc 0f00 	cmp.w	ip, #0
 8006190:	db1e      	blt.n	80061d0 <_strtol_l.constprop.0+0xc0>
 8006192:	45b1      	cmp	r9, r6
 8006194:	d31c      	bcc.n	80061d0 <_strtol_l.constprop.0+0xc0>
 8006196:	d101      	bne.n	800619c <_strtol_l.constprop.0+0x8c>
 8006198:	45a2      	cmp	sl, r4
 800619a:	db19      	blt.n	80061d0 <_strtol_l.constprop.0+0xc0>
 800619c:	fb06 4603 	mla	r6, r6, r3, r4
 80061a0:	f04f 0c01 	mov.w	ip, #1
 80061a4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80061a8:	e7e8      	b.n	800617c <_strtol_l.constprop.0+0x6c>
 80061aa:	2c2b      	cmp	r4, #43	; 0x2b
 80061ac:	bf04      	itt	eq
 80061ae:	782c      	ldrbeq	r4, [r5, #0]
 80061b0:	1cb5      	addeq	r5, r6, #2
 80061b2:	e7ca      	b.n	800614a <_strtol_l.constprop.0+0x3a>
 80061b4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80061b8:	f1be 0f19 	cmp.w	lr, #25
 80061bc:	d801      	bhi.n	80061c2 <_strtol_l.constprop.0+0xb2>
 80061be:	3c37      	subs	r4, #55	; 0x37
 80061c0:	e7e2      	b.n	8006188 <_strtol_l.constprop.0+0x78>
 80061c2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80061c6:	f1be 0f19 	cmp.w	lr, #25
 80061ca:	d804      	bhi.n	80061d6 <_strtol_l.constprop.0+0xc6>
 80061cc:	3c57      	subs	r4, #87	; 0x57
 80061ce:	e7db      	b.n	8006188 <_strtol_l.constprop.0+0x78>
 80061d0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80061d4:	e7e6      	b.n	80061a4 <_strtol_l.constprop.0+0x94>
 80061d6:	f1bc 0f00 	cmp.w	ip, #0
 80061da:	da05      	bge.n	80061e8 <_strtol_l.constprop.0+0xd8>
 80061dc:	2322      	movs	r3, #34	; 0x22
 80061de:	6003      	str	r3, [r0, #0]
 80061e0:	4646      	mov	r6, r8
 80061e2:	b942      	cbnz	r2, 80061f6 <_strtol_l.constprop.0+0xe6>
 80061e4:	4630      	mov	r0, r6
 80061e6:	e79e      	b.n	8006126 <_strtol_l.constprop.0+0x16>
 80061e8:	b107      	cbz	r7, 80061ec <_strtol_l.constprop.0+0xdc>
 80061ea:	4276      	negs	r6, r6
 80061ec:	2a00      	cmp	r2, #0
 80061ee:	d0f9      	beq.n	80061e4 <_strtol_l.constprop.0+0xd4>
 80061f0:	f1bc 0f00 	cmp.w	ip, #0
 80061f4:	d000      	beq.n	80061f8 <_strtol_l.constprop.0+0xe8>
 80061f6:	1e69      	subs	r1, r5, #1
 80061f8:	6011      	str	r1, [r2, #0]
 80061fa:	e7f3      	b.n	80061e4 <_strtol_l.constprop.0+0xd4>
 80061fc:	2430      	movs	r4, #48	; 0x30
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d1b1      	bne.n	8006166 <_strtol_l.constprop.0+0x56>
 8006202:	2308      	movs	r3, #8
 8006204:	e7af      	b.n	8006166 <_strtol_l.constprop.0+0x56>
 8006206:	2c30      	cmp	r4, #48	; 0x30
 8006208:	d0a5      	beq.n	8006156 <_strtol_l.constprop.0+0x46>
 800620a:	230a      	movs	r3, #10
 800620c:	e7ab      	b.n	8006166 <_strtol_l.constprop.0+0x56>
 800620e:	bf00      	nop
 8006210:	08007805 	.word	0x08007805

08006214 <strtol>:
 8006214:	4613      	mov	r3, r2
 8006216:	460a      	mov	r2, r1
 8006218:	4601      	mov	r1, r0
 800621a:	4802      	ldr	r0, [pc, #8]	; (8006224 <strtol+0x10>)
 800621c:	6800      	ldr	r0, [r0, #0]
 800621e:	f7ff bf77 	b.w	8006110 <_strtol_l.constprop.0>
 8006222:	bf00      	nop
 8006224:	200000a4 	.word	0x200000a4

08006228 <__assert_func>:
 8006228:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800622a:	4614      	mov	r4, r2
 800622c:	461a      	mov	r2, r3
 800622e:	4b09      	ldr	r3, [pc, #36]	; (8006254 <__assert_func+0x2c>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4605      	mov	r5, r0
 8006234:	68d8      	ldr	r0, [r3, #12]
 8006236:	b14c      	cbz	r4, 800624c <__assert_func+0x24>
 8006238:	4b07      	ldr	r3, [pc, #28]	; (8006258 <__assert_func+0x30>)
 800623a:	9100      	str	r1, [sp, #0]
 800623c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006240:	4906      	ldr	r1, [pc, #24]	; (800625c <__assert_func+0x34>)
 8006242:	462b      	mov	r3, r5
 8006244:	f000 f80e 	bl	8006264 <fiprintf>
 8006248:	f000 fe20 	bl	8006e8c <abort>
 800624c:	4b04      	ldr	r3, [pc, #16]	; (8006260 <__assert_func+0x38>)
 800624e:	461c      	mov	r4, r3
 8006250:	e7f3      	b.n	800623a <__assert_func+0x12>
 8006252:	bf00      	nop
 8006254:	200000a4 	.word	0x200000a4
 8006258:	080077c8 	.word	0x080077c8
 800625c:	080077d5 	.word	0x080077d5
 8006260:	08007803 	.word	0x08007803

08006264 <fiprintf>:
 8006264:	b40e      	push	{r1, r2, r3}
 8006266:	b503      	push	{r0, r1, lr}
 8006268:	4601      	mov	r1, r0
 800626a:	ab03      	add	r3, sp, #12
 800626c:	4805      	ldr	r0, [pc, #20]	; (8006284 <fiprintf+0x20>)
 800626e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006272:	6800      	ldr	r0, [r0, #0]
 8006274:	9301      	str	r3, [sp, #4]
 8006276:	f000 fa75 	bl	8006764 <_vfiprintf_r>
 800627a:	b002      	add	sp, #8
 800627c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006280:	b003      	add	sp, #12
 8006282:	4770      	bx	lr
 8006284:	200000a4 	.word	0x200000a4

08006288 <malloc>:
 8006288:	4b02      	ldr	r3, [pc, #8]	; (8006294 <malloc+0xc>)
 800628a:	4601      	mov	r1, r0
 800628c:	6818      	ldr	r0, [r3, #0]
 800628e:	f000 b86f 	b.w	8006370 <_malloc_r>
 8006292:	bf00      	nop
 8006294:	200000a4 	.word	0x200000a4

08006298 <_free_r>:
 8006298:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800629a:	2900      	cmp	r1, #0
 800629c:	d044      	beq.n	8006328 <_free_r+0x90>
 800629e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062a2:	9001      	str	r0, [sp, #4]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	f1a1 0404 	sub.w	r4, r1, #4
 80062aa:	bfb8      	it	lt
 80062ac:	18e4      	addlt	r4, r4, r3
 80062ae:	f001 f83d 	bl	800732c <__malloc_lock>
 80062b2:	4a1e      	ldr	r2, [pc, #120]	; (800632c <_free_r+0x94>)
 80062b4:	9801      	ldr	r0, [sp, #4]
 80062b6:	6813      	ldr	r3, [r2, #0]
 80062b8:	b933      	cbnz	r3, 80062c8 <_free_r+0x30>
 80062ba:	6063      	str	r3, [r4, #4]
 80062bc:	6014      	str	r4, [r2, #0]
 80062be:	b003      	add	sp, #12
 80062c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80062c4:	f001 b838 	b.w	8007338 <__malloc_unlock>
 80062c8:	42a3      	cmp	r3, r4
 80062ca:	d908      	bls.n	80062de <_free_r+0x46>
 80062cc:	6825      	ldr	r5, [r4, #0]
 80062ce:	1961      	adds	r1, r4, r5
 80062d0:	428b      	cmp	r3, r1
 80062d2:	bf01      	itttt	eq
 80062d4:	6819      	ldreq	r1, [r3, #0]
 80062d6:	685b      	ldreq	r3, [r3, #4]
 80062d8:	1949      	addeq	r1, r1, r5
 80062da:	6021      	streq	r1, [r4, #0]
 80062dc:	e7ed      	b.n	80062ba <_free_r+0x22>
 80062de:	461a      	mov	r2, r3
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	b10b      	cbz	r3, 80062e8 <_free_r+0x50>
 80062e4:	42a3      	cmp	r3, r4
 80062e6:	d9fa      	bls.n	80062de <_free_r+0x46>
 80062e8:	6811      	ldr	r1, [r2, #0]
 80062ea:	1855      	adds	r5, r2, r1
 80062ec:	42a5      	cmp	r5, r4
 80062ee:	d10b      	bne.n	8006308 <_free_r+0x70>
 80062f0:	6824      	ldr	r4, [r4, #0]
 80062f2:	4421      	add	r1, r4
 80062f4:	1854      	adds	r4, r2, r1
 80062f6:	42a3      	cmp	r3, r4
 80062f8:	6011      	str	r1, [r2, #0]
 80062fa:	d1e0      	bne.n	80062be <_free_r+0x26>
 80062fc:	681c      	ldr	r4, [r3, #0]
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	6053      	str	r3, [r2, #4]
 8006302:	4421      	add	r1, r4
 8006304:	6011      	str	r1, [r2, #0]
 8006306:	e7da      	b.n	80062be <_free_r+0x26>
 8006308:	d902      	bls.n	8006310 <_free_r+0x78>
 800630a:	230c      	movs	r3, #12
 800630c:	6003      	str	r3, [r0, #0]
 800630e:	e7d6      	b.n	80062be <_free_r+0x26>
 8006310:	6825      	ldr	r5, [r4, #0]
 8006312:	1961      	adds	r1, r4, r5
 8006314:	428b      	cmp	r3, r1
 8006316:	bf04      	itt	eq
 8006318:	6819      	ldreq	r1, [r3, #0]
 800631a:	685b      	ldreq	r3, [r3, #4]
 800631c:	6063      	str	r3, [r4, #4]
 800631e:	bf04      	itt	eq
 8006320:	1949      	addeq	r1, r1, r5
 8006322:	6021      	streq	r1, [r4, #0]
 8006324:	6054      	str	r4, [r2, #4]
 8006326:	e7ca      	b.n	80062be <_free_r+0x26>
 8006328:	b003      	add	sp, #12
 800632a:	bd30      	pop	{r4, r5, pc}
 800632c:	20000250 	.word	0x20000250

08006330 <sbrk_aligned>:
 8006330:	b570      	push	{r4, r5, r6, lr}
 8006332:	4e0e      	ldr	r6, [pc, #56]	; (800636c <sbrk_aligned+0x3c>)
 8006334:	460c      	mov	r4, r1
 8006336:	6831      	ldr	r1, [r6, #0]
 8006338:	4605      	mov	r5, r0
 800633a:	b911      	cbnz	r1, 8006342 <sbrk_aligned+0x12>
 800633c:	f000 fcd6 	bl	8006cec <_sbrk_r>
 8006340:	6030      	str	r0, [r6, #0]
 8006342:	4621      	mov	r1, r4
 8006344:	4628      	mov	r0, r5
 8006346:	f000 fcd1 	bl	8006cec <_sbrk_r>
 800634a:	1c43      	adds	r3, r0, #1
 800634c:	d00a      	beq.n	8006364 <sbrk_aligned+0x34>
 800634e:	1cc4      	adds	r4, r0, #3
 8006350:	f024 0403 	bic.w	r4, r4, #3
 8006354:	42a0      	cmp	r0, r4
 8006356:	d007      	beq.n	8006368 <sbrk_aligned+0x38>
 8006358:	1a21      	subs	r1, r4, r0
 800635a:	4628      	mov	r0, r5
 800635c:	f000 fcc6 	bl	8006cec <_sbrk_r>
 8006360:	3001      	adds	r0, #1
 8006362:	d101      	bne.n	8006368 <sbrk_aligned+0x38>
 8006364:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006368:	4620      	mov	r0, r4
 800636a:	bd70      	pop	{r4, r5, r6, pc}
 800636c:	20000254 	.word	0x20000254

08006370 <_malloc_r>:
 8006370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006374:	1ccd      	adds	r5, r1, #3
 8006376:	f025 0503 	bic.w	r5, r5, #3
 800637a:	3508      	adds	r5, #8
 800637c:	2d0c      	cmp	r5, #12
 800637e:	bf38      	it	cc
 8006380:	250c      	movcc	r5, #12
 8006382:	2d00      	cmp	r5, #0
 8006384:	4607      	mov	r7, r0
 8006386:	db01      	blt.n	800638c <_malloc_r+0x1c>
 8006388:	42a9      	cmp	r1, r5
 800638a:	d905      	bls.n	8006398 <_malloc_r+0x28>
 800638c:	230c      	movs	r3, #12
 800638e:	603b      	str	r3, [r7, #0]
 8006390:	2600      	movs	r6, #0
 8006392:	4630      	mov	r0, r6
 8006394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006398:	4e2e      	ldr	r6, [pc, #184]	; (8006454 <_malloc_r+0xe4>)
 800639a:	f000 ffc7 	bl	800732c <__malloc_lock>
 800639e:	6833      	ldr	r3, [r6, #0]
 80063a0:	461c      	mov	r4, r3
 80063a2:	bb34      	cbnz	r4, 80063f2 <_malloc_r+0x82>
 80063a4:	4629      	mov	r1, r5
 80063a6:	4638      	mov	r0, r7
 80063a8:	f7ff ffc2 	bl	8006330 <sbrk_aligned>
 80063ac:	1c43      	adds	r3, r0, #1
 80063ae:	4604      	mov	r4, r0
 80063b0:	d14d      	bne.n	800644e <_malloc_r+0xde>
 80063b2:	6834      	ldr	r4, [r6, #0]
 80063b4:	4626      	mov	r6, r4
 80063b6:	2e00      	cmp	r6, #0
 80063b8:	d140      	bne.n	800643c <_malloc_r+0xcc>
 80063ba:	6823      	ldr	r3, [r4, #0]
 80063bc:	4631      	mov	r1, r6
 80063be:	4638      	mov	r0, r7
 80063c0:	eb04 0803 	add.w	r8, r4, r3
 80063c4:	f000 fc92 	bl	8006cec <_sbrk_r>
 80063c8:	4580      	cmp	r8, r0
 80063ca:	d13a      	bne.n	8006442 <_malloc_r+0xd2>
 80063cc:	6821      	ldr	r1, [r4, #0]
 80063ce:	3503      	adds	r5, #3
 80063d0:	1a6d      	subs	r5, r5, r1
 80063d2:	f025 0503 	bic.w	r5, r5, #3
 80063d6:	3508      	adds	r5, #8
 80063d8:	2d0c      	cmp	r5, #12
 80063da:	bf38      	it	cc
 80063dc:	250c      	movcc	r5, #12
 80063de:	4629      	mov	r1, r5
 80063e0:	4638      	mov	r0, r7
 80063e2:	f7ff ffa5 	bl	8006330 <sbrk_aligned>
 80063e6:	3001      	adds	r0, #1
 80063e8:	d02b      	beq.n	8006442 <_malloc_r+0xd2>
 80063ea:	6823      	ldr	r3, [r4, #0]
 80063ec:	442b      	add	r3, r5
 80063ee:	6023      	str	r3, [r4, #0]
 80063f0:	e00e      	b.n	8006410 <_malloc_r+0xa0>
 80063f2:	6822      	ldr	r2, [r4, #0]
 80063f4:	1b52      	subs	r2, r2, r5
 80063f6:	d41e      	bmi.n	8006436 <_malloc_r+0xc6>
 80063f8:	2a0b      	cmp	r2, #11
 80063fa:	d916      	bls.n	800642a <_malloc_r+0xba>
 80063fc:	1961      	adds	r1, r4, r5
 80063fe:	42a3      	cmp	r3, r4
 8006400:	6025      	str	r5, [r4, #0]
 8006402:	bf18      	it	ne
 8006404:	6059      	strne	r1, [r3, #4]
 8006406:	6863      	ldr	r3, [r4, #4]
 8006408:	bf08      	it	eq
 800640a:	6031      	streq	r1, [r6, #0]
 800640c:	5162      	str	r2, [r4, r5]
 800640e:	604b      	str	r3, [r1, #4]
 8006410:	4638      	mov	r0, r7
 8006412:	f104 060b 	add.w	r6, r4, #11
 8006416:	f000 ff8f 	bl	8007338 <__malloc_unlock>
 800641a:	f026 0607 	bic.w	r6, r6, #7
 800641e:	1d23      	adds	r3, r4, #4
 8006420:	1af2      	subs	r2, r6, r3
 8006422:	d0b6      	beq.n	8006392 <_malloc_r+0x22>
 8006424:	1b9b      	subs	r3, r3, r6
 8006426:	50a3      	str	r3, [r4, r2]
 8006428:	e7b3      	b.n	8006392 <_malloc_r+0x22>
 800642a:	6862      	ldr	r2, [r4, #4]
 800642c:	42a3      	cmp	r3, r4
 800642e:	bf0c      	ite	eq
 8006430:	6032      	streq	r2, [r6, #0]
 8006432:	605a      	strne	r2, [r3, #4]
 8006434:	e7ec      	b.n	8006410 <_malloc_r+0xa0>
 8006436:	4623      	mov	r3, r4
 8006438:	6864      	ldr	r4, [r4, #4]
 800643a:	e7b2      	b.n	80063a2 <_malloc_r+0x32>
 800643c:	4634      	mov	r4, r6
 800643e:	6876      	ldr	r6, [r6, #4]
 8006440:	e7b9      	b.n	80063b6 <_malloc_r+0x46>
 8006442:	230c      	movs	r3, #12
 8006444:	603b      	str	r3, [r7, #0]
 8006446:	4638      	mov	r0, r7
 8006448:	f000 ff76 	bl	8007338 <__malloc_unlock>
 800644c:	e7a1      	b.n	8006392 <_malloc_r+0x22>
 800644e:	6025      	str	r5, [r4, #0]
 8006450:	e7de      	b.n	8006410 <_malloc_r+0xa0>
 8006452:	bf00      	nop
 8006454:	20000250 	.word	0x20000250

08006458 <__ssputs_r>:
 8006458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800645c:	688e      	ldr	r6, [r1, #8]
 800645e:	429e      	cmp	r6, r3
 8006460:	4682      	mov	sl, r0
 8006462:	460c      	mov	r4, r1
 8006464:	4690      	mov	r8, r2
 8006466:	461f      	mov	r7, r3
 8006468:	d838      	bhi.n	80064dc <__ssputs_r+0x84>
 800646a:	898a      	ldrh	r2, [r1, #12]
 800646c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006470:	d032      	beq.n	80064d8 <__ssputs_r+0x80>
 8006472:	6825      	ldr	r5, [r4, #0]
 8006474:	6909      	ldr	r1, [r1, #16]
 8006476:	eba5 0901 	sub.w	r9, r5, r1
 800647a:	6965      	ldr	r5, [r4, #20]
 800647c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006480:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006484:	3301      	adds	r3, #1
 8006486:	444b      	add	r3, r9
 8006488:	106d      	asrs	r5, r5, #1
 800648a:	429d      	cmp	r5, r3
 800648c:	bf38      	it	cc
 800648e:	461d      	movcc	r5, r3
 8006490:	0553      	lsls	r3, r2, #21
 8006492:	d531      	bpl.n	80064f8 <__ssputs_r+0xa0>
 8006494:	4629      	mov	r1, r5
 8006496:	f7ff ff6b 	bl	8006370 <_malloc_r>
 800649a:	4606      	mov	r6, r0
 800649c:	b950      	cbnz	r0, 80064b4 <__ssputs_r+0x5c>
 800649e:	230c      	movs	r3, #12
 80064a0:	f8ca 3000 	str.w	r3, [sl]
 80064a4:	89a3      	ldrh	r3, [r4, #12]
 80064a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064aa:	81a3      	strh	r3, [r4, #12]
 80064ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80064b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064b4:	6921      	ldr	r1, [r4, #16]
 80064b6:	464a      	mov	r2, r9
 80064b8:	f000 ff10 	bl	80072dc <memcpy>
 80064bc:	89a3      	ldrh	r3, [r4, #12]
 80064be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80064c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064c6:	81a3      	strh	r3, [r4, #12]
 80064c8:	6126      	str	r6, [r4, #16]
 80064ca:	6165      	str	r5, [r4, #20]
 80064cc:	444e      	add	r6, r9
 80064ce:	eba5 0509 	sub.w	r5, r5, r9
 80064d2:	6026      	str	r6, [r4, #0]
 80064d4:	60a5      	str	r5, [r4, #8]
 80064d6:	463e      	mov	r6, r7
 80064d8:	42be      	cmp	r6, r7
 80064da:	d900      	bls.n	80064de <__ssputs_r+0x86>
 80064dc:	463e      	mov	r6, r7
 80064de:	6820      	ldr	r0, [r4, #0]
 80064e0:	4632      	mov	r2, r6
 80064e2:	4641      	mov	r1, r8
 80064e4:	f000 ff08 	bl	80072f8 <memmove>
 80064e8:	68a3      	ldr	r3, [r4, #8]
 80064ea:	1b9b      	subs	r3, r3, r6
 80064ec:	60a3      	str	r3, [r4, #8]
 80064ee:	6823      	ldr	r3, [r4, #0]
 80064f0:	4433      	add	r3, r6
 80064f2:	6023      	str	r3, [r4, #0]
 80064f4:	2000      	movs	r0, #0
 80064f6:	e7db      	b.n	80064b0 <__ssputs_r+0x58>
 80064f8:	462a      	mov	r2, r5
 80064fa:	f000 ff23 	bl	8007344 <_realloc_r>
 80064fe:	4606      	mov	r6, r0
 8006500:	2800      	cmp	r0, #0
 8006502:	d1e1      	bne.n	80064c8 <__ssputs_r+0x70>
 8006504:	6921      	ldr	r1, [r4, #16]
 8006506:	4650      	mov	r0, sl
 8006508:	f7ff fec6 	bl	8006298 <_free_r>
 800650c:	e7c7      	b.n	800649e <__ssputs_r+0x46>
	...

08006510 <_svfiprintf_r>:
 8006510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006514:	4698      	mov	r8, r3
 8006516:	898b      	ldrh	r3, [r1, #12]
 8006518:	061b      	lsls	r3, r3, #24
 800651a:	b09d      	sub	sp, #116	; 0x74
 800651c:	4607      	mov	r7, r0
 800651e:	460d      	mov	r5, r1
 8006520:	4614      	mov	r4, r2
 8006522:	d50e      	bpl.n	8006542 <_svfiprintf_r+0x32>
 8006524:	690b      	ldr	r3, [r1, #16]
 8006526:	b963      	cbnz	r3, 8006542 <_svfiprintf_r+0x32>
 8006528:	2140      	movs	r1, #64	; 0x40
 800652a:	f7ff ff21 	bl	8006370 <_malloc_r>
 800652e:	6028      	str	r0, [r5, #0]
 8006530:	6128      	str	r0, [r5, #16]
 8006532:	b920      	cbnz	r0, 800653e <_svfiprintf_r+0x2e>
 8006534:	230c      	movs	r3, #12
 8006536:	603b      	str	r3, [r7, #0]
 8006538:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800653c:	e0d1      	b.n	80066e2 <_svfiprintf_r+0x1d2>
 800653e:	2340      	movs	r3, #64	; 0x40
 8006540:	616b      	str	r3, [r5, #20]
 8006542:	2300      	movs	r3, #0
 8006544:	9309      	str	r3, [sp, #36]	; 0x24
 8006546:	2320      	movs	r3, #32
 8006548:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800654c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006550:	2330      	movs	r3, #48	; 0x30
 8006552:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80066fc <_svfiprintf_r+0x1ec>
 8006556:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800655a:	f04f 0901 	mov.w	r9, #1
 800655e:	4623      	mov	r3, r4
 8006560:	469a      	mov	sl, r3
 8006562:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006566:	b10a      	cbz	r2, 800656c <_svfiprintf_r+0x5c>
 8006568:	2a25      	cmp	r2, #37	; 0x25
 800656a:	d1f9      	bne.n	8006560 <_svfiprintf_r+0x50>
 800656c:	ebba 0b04 	subs.w	fp, sl, r4
 8006570:	d00b      	beq.n	800658a <_svfiprintf_r+0x7a>
 8006572:	465b      	mov	r3, fp
 8006574:	4622      	mov	r2, r4
 8006576:	4629      	mov	r1, r5
 8006578:	4638      	mov	r0, r7
 800657a:	f7ff ff6d 	bl	8006458 <__ssputs_r>
 800657e:	3001      	adds	r0, #1
 8006580:	f000 80aa 	beq.w	80066d8 <_svfiprintf_r+0x1c8>
 8006584:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006586:	445a      	add	r2, fp
 8006588:	9209      	str	r2, [sp, #36]	; 0x24
 800658a:	f89a 3000 	ldrb.w	r3, [sl]
 800658e:	2b00      	cmp	r3, #0
 8006590:	f000 80a2 	beq.w	80066d8 <_svfiprintf_r+0x1c8>
 8006594:	2300      	movs	r3, #0
 8006596:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800659a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800659e:	f10a 0a01 	add.w	sl, sl, #1
 80065a2:	9304      	str	r3, [sp, #16]
 80065a4:	9307      	str	r3, [sp, #28]
 80065a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80065aa:	931a      	str	r3, [sp, #104]	; 0x68
 80065ac:	4654      	mov	r4, sl
 80065ae:	2205      	movs	r2, #5
 80065b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065b4:	4851      	ldr	r0, [pc, #324]	; (80066fc <_svfiprintf_r+0x1ec>)
 80065b6:	f7f9 fe43 	bl	8000240 <memchr>
 80065ba:	9a04      	ldr	r2, [sp, #16]
 80065bc:	b9d8      	cbnz	r0, 80065f6 <_svfiprintf_r+0xe6>
 80065be:	06d0      	lsls	r0, r2, #27
 80065c0:	bf44      	itt	mi
 80065c2:	2320      	movmi	r3, #32
 80065c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80065c8:	0711      	lsls	r1, r2, #28
 80065ca:	bf44      	itt	mi
 80065cc:	232b      	movmi	r3, #43	; 0x2b
 80065ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80065d2:	f89a 3000 	ldrb.w	r3, [sl]
 80065d6:	2b2a      	cmp	r3, #42	; 0x2a
 80065d8:	d015      	beq.n	8006606 <_svfiprintf_r+0xf6>
 80065da:	9a07      	ldr	r2, [sp, #28]
 80065dc:	4654      	mov	r4, sl
 80065de:	2000      	movs	r0, #0
 80065e0:	f04f 0c0a 	mov.w	ip, #10
 80065e4:	4621      	mov	r1, r4
 80065e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80065ea:	3b30      	subs	r3, #48	; 0x30
 80065ec:	2b09      	cmp	r3, #9
 80065ee:	d94e      	bls.n	800668e <_svfiprintf_r+0x17e>
 80065f0:	b1b0      	cbz	r0, 8006620 <_svfiprintf_r+0x110>
 80065f2:	9207      	str	r2, [sp, #28]
 80065f4:	e014      	b.n	8006620 <_svfiprintf_r+0x110>
 80065f6:	eba0 0308 	sub.w	r3, r0, r8
 80065fa:	fa09 f303 	lsl.w	r3, r9, r3
 80065fe:	4313      	orrs	r3, r2
 8006600:	9304      	str	r3, [sp, #16]
 8006602:	46a2      	mov	sl, r4
 8006604:	e7d2      	b.n	80065ac <_svfiprintf_r+0x9c>
 8006606:	9b03      	ldr	r3, [sp, #12]
 8006608:	1d19      	adds	r1, r3, #4
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	9103      	str	r1, [sp, #12]
 800660e:	2b00      	cmp	r3, #0
 8006610:	bfbb      	ittet	lt
 8006612:	425b      	neglt	r3, r3
 8006614:	f042 0202 	orrlt.w	r2, r2, #2
 8006618:	9307      	strge	r3, [sp, #28]
 800661a:	9307      	strlt	r3, [sp, #28]
 800661c:	bfb8      	it	lt
 800661e:	9204      	strlt	r2, [sp, #16]
 8006620:	7823      	ldrb	r3, [r4, #0]
 8006622:	2b2e      	cmp	r3, #46	; 0x2e
 8006624:	d10c      	bne.n	8006640 <_svfiprintf_r+0x130>
 8006626:	7863      	ldrb	r3, [r4, #1]
 8006628:	2b2a      	cmp	r3, #42	; 0x2a
 800662a:	d135      	bne.n	8006698 <_svfiprintf_r+0x188>
 800662c:	9b03      	ldr	r3, [sp, #12]
 800662e:	1d1a      	adds	r2, r3, #4
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	9203      	str	r2, [sp, #12]
 8006634:	2b00      	cmp	r3, #0
 8006636:	bfb8      	it	lt
 8006638:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800663c:	3402      	adds	r4, #2
 800663e:	9305      	str	r3, [sp, #20]
 8006640:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800670c <_svfiprintf_r+0x1fc>
 8006644:	7821      	ldrb	r1, [r4, #0]
 8006646:	2203      	movs	r2, #3
 8006648:	4650      	mov	r0, sl
 800664a:	f7f9 fdf9 	bl	8000240 <memchr>
 800664e:	b140      	cbz	r0, 8006662 <_svfiprintf_r+0x152>
 8006650:	2340      	movs	r3, #64	; 0x40
 8006652:	eba0 000a 	sub.w	r0, r0, sl
 8006656:	fa03 f000 	lsl.w	r0, r3, r0
 800665a:	9b04      	ldr	r3, [sp, #16]
 800665c:	4303      	orrs	r3, r0
 800665e:	3401      	adds	r4, #1
 8006660:	9304      	str	r3, [sp, #16]
 8006662:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006666:	4826      	ldr	r0, [pc, #152]	; (8006700 <_svfiprintf_r+0x1f0>)
 8006668:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800666c:	2206      	movs	r2, #6
 800666e:	f7f9 fde7 	bl	8000240 <memchr>
 8006672:	2800      	cmp	r0, #0
 8006674:	d038      	beq.n	80066e8 <_svfiprintf_r+0x1d8>
 8006676:	4b23      	ldr	r3, [pc, #140]	; (8006704 <_svfiprintf_r+0x1f4>)
 8006678:	bb1b      	cbnz	r3, 80066c2 <_svfiprintf_r+0x1b2>
 800667a:	9b03      	ldr	r3, [sp, #12]
 800667c:	3307      	adds	r3, #7
 800667e:	f023 0307 	bic.w	r3, r3, #7
 8006682:	3308      	adds	r3, #8
 8006684:	9303      	str	r3, [sp, #12]
 8006686:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006688:	4433      	add	r3, r6
 800668a:	9309      	str	r3, [sp, #36]	; 0x24
 800668c:	e767      	b.n	800655e <_svfiprintf_r+0x4e>
 800668e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006692:	460c      	mov	r4, r1
 8006694:	2001      	movs	r0, #1
 8006696:	e7a5      	b.n	80065e4 <_svfiprintf_r+0xd4>
 8006698:	2300      	movs	r3, #0
 800669a:	3401      	adds	r4, #1
 800669c:	9305      	str	r3, [sp, #20]
 800669e:	4619      	mov	r1, r3
 80066a0:	f04f 0c0a 	mov.w	ip, #10
 80066a4:	4620      	mov	r0, r4
 80066a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80066aa:	3a30      	subs	r2, #48	; 0x30
 80066ac:	2a09      	cmp	r2, #9
 80066ae:	d903      	bls.n	80066b8 <_svfiprintf_r+0x1a8>
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d0c5      	beq.n	8006640 <_svfiprintf_r+0x130>
 80066b4:	9105      	str	r1, [sp, #20]
 80066b6:	e7c3      	b.n	8006640 <_svfiprintf_r+0x130>
 80066b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80066bc:	4604      	mov	r4, r0
 80066be:	2301      	movs	r3, #1
 80066c0:	e7f0      	b.n	80066a4 <_svfiprintf_r+0x194>
 80066c2:	ab03      	add	r3, sp, #12
 80066c4:	9300      	str	r3, [sp, #0]
 80066c6:	462a      	mov	r2, r5
 80066c8:	4b0f      	ldr	r3, [pc, #60]	; (8006708 <_svfiprintf_r+0x1f8>)
 80066ca:	a904      	add	r1, sp, #16
 80066cc:	4638      	mov	r0, r7
 80066ce:	f3af 8000 	nop.w
 80066d2:	1c42      	adds	r2, r0, #1
 80066d4:	4606      	mov	r6, r0
 80066d6:	d1d6      	bne.n	8006686 <_svfiprintf_r+0x176>
 80066d8:	89ab      	ldrh	r3, [r5, #12]
 80066da:	065b      	lsls	r3, r3, #25
 80066dc:	f53f af2c 	bmi.w	8006538 <_svfiprintf_r+0x28>
 80066e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80066e2:	b01d      	add	sp, #116	; 0x74
 80066e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066e8:	ab03      	add	r3, sp, #12
 80066ea:	9300      	str	r3, [sp, #0]
 80066ec:	462a      	mov	r2, r5
 80066ee:	4b06      	ldr	r3, [pc, #24]	; (8006708 <_svfiprintf_r+0x1f8>)
 80066f0:	a904      	add	r1, sp, #16
 80066f2:	4638      	mov	r0, r7
 80066f4:	f000 f9d4 	bl	8006aa0 <_printf_i>
 80066f8:	e7eb      	b.n	80066d2 <_svfiprintf_r+0x1c2>
 80066fa:	bf00      	nop
 80066fc:	08007905 	.word	0x08007905
 8006700:	0800790f 	.word	0x0800790f
 8006704:	00000000 	.word	0x00000000
 8006708:	08006459 	.word	0x08006459
 800670c:	0800790b 	.word	0x0800790b

08006710 <__sfputc_r>:
 8006710:	6893      	ldr	r3, [r2, #8]
 8006712:	3b01      	subs	r3, #1
 8006714:	2b00      	cmp	r3, #0
 8006716:	b410      	push	{r4}
 8006718:	6093      	str	r3, [r2, #8]
 800671a:	da08      	bge.n	800672e <__sfputc_r+0x1e>
 800671c:	6994      	ldr	r4, [r2, #24]
 800671e:	42a3      	cmp	r3, r4
 8006720:	db01      	blt.n	8006726 <__sfputc_r+0x16>
 8006722:	290a      	cmp	r1, #10
 8006724:	d103      	bne.n	800672e <__sfputc_r+0x1e>
 8006726:	f85d 4b04 	ldr.w	r4, [sp], #4
 800672a:	f000 baef 	b.w	8006d0c <__swbuf_r>
 800672e:	6813      	ldr	r3, [r2, #0]
 8006730:	1c58      	adds	r0, r3, #1
 8006732:	6010      	str	r0, [r2, #0]
 8006734:	7019      	strb	r1, [r3, #0]
 8006736:	4608      	mov	r0, r1
 8006738:	f85d 4b04 	ldr.w	r4, [sp], #4
 800673c:	4770      	bx	lr

0800673e <__sfputs_r>:
 800673e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006740:	4606      	mov	r6, r0
 8006742:	460f      	mov	r7, r1
 8006744:	4614      	mov	r4, r2
 8006746:	18d5      	adds	r5, r2, r3
 8006748:	42ac      	cmp	r4, r5
 800674a:	d101      	bne.n	8006750 <__sfputs_r+0x12>
 800674c:	2000      	movs	r0, #0
 800674e:	e007      	b.n	8006760 <__sfputs_r+0x22>
 8006750:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006754:	463a      	mov	r2, r7
 8006756:	4630      	mov	r0, r6
 8006758:	f7ff ffda 	bl	8006710 <__sfputc_r>
 800675c:	1c43      	adds	r3, r0, #1
 800675e:	d1f3      	bne.n	8006748 <__sfputs_r+0xa>
 8006760:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006764 <_vfiprintf_r>:
 8006764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006768:	460d      	mov	r5, r1
 800676a:	b09d      	sub	sp, #116	; 0x74
 800676c:	4614      	mov	r4, r2
 800676e:	4698      	mov	r8, r3
 8006770:	4606      	mov	r6, r0
 8006772:	b118      	cbz	r0, 800677c <_vfiprintf_r+0x18>
 8006774:	6983      	ldr	r3, [r0, #24]
 8006776:	b90b      	cbnz	r3, 800677c <_vfiprintf_r+0x18>
 8006778:	f000 fcaa 	bl	80070d0 <__sinit>
 800677c:	4b89      	ldr	r3, [pc, #548]	; (80069a4 <_vfiprintf_r+0x240>)
 800677e:	429d      	cmp	r5, r3
 8006780:	d11b      	bne.n	80067ba <_vfiprintf_r+0x56>
 8006782:	6875      	ldr	r5, [r6, #4]
 8006784:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006786:	07d9      	lsls	r1, r3, #31
 8006788:	d405      	bmi.n	8006796 <_vfiprintf_r+0x32>
 800678a:	89ab      	ldrh	r3, [r5, #12]
 800678c:	059a      	lsls	r2, r3, #22
 800678e:	d402      	bmi.n	8006796 <_vfiprintf_r+0x32>
 8006790:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006792:	f000 fd3b 	bl	800720c <__retarget_lock_acquire_recursive>
 8006796:	89ab      	ldrh	r3, [r5, #12]
 8006798:	071b      	lsls	r3, r3, #28
 800679a:	d501      	bpl.n	80067a0 <_vfiprintf_r+0x3c>
 800679c:	692b      	ldr	r3, [r5, #16]
 800679e:	b9eb      	cbnz	r3, 80067dc <_vfiprintf_r+0x78>
 80067a0:	4629      	mov	r1, r5
 80067a2:	4630      	mov	r0, r6
 80067a4:	f000 fb04 	bl	8006db0 <__swsetup_r>
 80067a8:	b1c0      	cbz	r0, 80067dc <_vfiprintf_r+0x78>
 80067aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80067ac:	07dc      	lsls	r4, r3, #31
 80067ae:	d50e      	bpl.n	80067ce <_vfiprintf_r+0x6a>
 80067b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80067b4:	b01d      	add	sp, #116	; 0x74
 80067b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067ba:	4b7b      	ldr	r3, [pc, #492]	; (80069a8 <_vfiprintf_r+0x244>)
 80067bc:	429d      	cmp	r5, r3
 80067be:	d101      	bne.n	80067c4 <_vfiprintf_r+0x60>
 80067c0:	68b5      	ldr	r5, [r6, #8]
 80067c2:	e7df      	b.n	8006784 <_vfiprintf_r+0x20>
 80067c4:	4b79      	ldr	r3, [pc, #484]	; (80069ac <_vfiprintf_r+0x248>)
 80067c6:	429d      	cmp	r5, r3
 80067c8:	bf08      	it	eq
 80067ca:	68f5      	ldreq	r5, [r6, #12]
 80067cc:	e7da      	b.n	8006784 <_vfiprintf_r+0x20>
 80067ce:	89ab      	ldrh	r3, [r5, #12]
 80067d0:	0598      	lsls	r0, r3, #22
 80067d2:	d4ed      	bmi.n	80067b0 <_vfiprintf_r+0x4c>
 80067d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80067d6:	f000 fd1a 	bl	800720e <__retarget_lock_release_recursive>
 80067da:	e7e9      	b.n	80067b0 <_vfiprintf_r+0x4c>
 80067dc:	2300      	movs	r3, #0
 80067de:	9309      	str	r3, [sp, #36]	; 0x24
 80067e0:	2320      	movs	r3, #32
 80067e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80067e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80067ea:	2330      	movs	r3, #48	; 0x30
 80067ec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80069b0 <_vfiprintf_r+0x24c>
 80067f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80067f4:	f04f 0901 	mov.w	r9, #1
 80067f8:	4623      	mov	r3, r4
 80067fa:	469a      	mov	sl, r3
 80067fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006800:	b10a      	cbz	r2, 8006806 <_vfiprintf_r+0xa2>
 8006802:	2a25      	cmp	r2, #37	; 0x25
 8006804:	d1f9      	bne.n	80067fa <_vfiprintf_r+0x96>
 8006806:	ebba 0b04 	subs.w	fp, sl, r4
 800680a:	d00b      	beq.n	8006824 <_vfiprintf_r+0xc0>
 800680c:	465b      	mov	r3, fp
 800680e:	4622      	mov	r2, r4
 8006810:	4629      	mov	r1, r5
 8006812:	4630      	mov	r0, r6
 8006814:	f7ff ff93 	bl	800673e <__sfputs_r>
 8006818:	3001      	adds	r0, #1
 800681a:	f000 80aa 	beq.w	8006972 <_vfiprintf_r+0x20e>
 800681e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006820:	445a      	add	r2, fp
 8006822:	9209      	str	r2, [sp, #36]	; 0x24
 8006824:	f89a 3000 	ldrb.w	r3, [sl]
 8006828:	2b00      	cmp	r3, #0
 800682a:	f000 80a2 	beq.w	8006972 <_vfiprintf_r+0x20e>
 800682e:	2300      	movs	r3, #0
 8006830:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006834:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006838:	f10a 0a01 	add.w	sl, sl, #1
 800683c:	9304      	str	r3, [sp, #16]
 800683e:	9307      	str	r3, [sp, #28]
 8006840:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006844:	931a      	str	r3, [sp, #104]	; 0x68
 8006846:	4654      	mov	r4, sl
 8006848:	2205      	movs	r2, #5
 800684a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800684e:	4858      	ldr	r0, [pc, #352]	; (80069b0 <_vfiprintf_r+0x24c>)
 8006850:	f7f9 fcf6 	bl	8000240 <memchr>
 8006854:	9a04      	ldr	r2, [sp, #16]
 8006856:	b9d8      	cbnz	r0, 8006890 <_vfiprintf_r+0x12c>
 8006858:	06d1      	lsls	r1, r2, #27
 800685a:	bf44      	itt	mi
 800685c:	2320      	movmi	r3, #32
 800685e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006862:	0713      	lsls	r3, r2, #28
 8006864:	bf44      	itt	mi
 8006866:	232b      	movmi	r3, #43	; 0x2b
 8006868:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800686c:	f89a 3000 	ldrb.w	r3, [sl]
 8006870:	2b2a      	cmp	r3, #42	; 0x2a
 8006872:	d015      	beq.n	80068a0 <_vfiprintf_r+0x13c>
 8006874:	9a07      	ldr	r2, [sp, #28]
 8006876:	4654      	mov	r4, sl
 8006878:	2000      	movs	r0, #0
 800687a:	f04f 0c0a 	mov.w	ip, #10
 800687e:	4621      	mov	r1, r4
 8006880:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006884:	3b30      	subs	r3, #48	; 0x30
 8006886:	2b09      	cmp	r3, #9
 8006888:	d94e      	bls.n	8006928 <_vfiprintf_r+0x1c4>
 800688a:	b1b0      	cbz	r0, 80068ba <_vfiprintf_r+0x156>
 800688c:	9207      	str	r2, [sp, #28]
 800688e:	e014      	b.n	80068ba <_vfiprintf_r+0x156>
 8006890:	eba0 0308 	sub.w	r3, r0, r8
 8006894:	fa09 f303 	lsl.w	r3, r9, r3
 8006898:	4313      	orrs	r3, r2
 800689a:	9304      	str	r3, [sp, #16]
 800689c:	46a2      	mov	sl, r4
 800689e:	e7d2      	b.n	8006846 <_vfiprintf_r+0xe2>
 80068a0:	9b03      	ldr	r3, [sp, #12]
 80068a2:	1d19      	adds	r1, r3, #4
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	9103      	str	r1, [sp, #12]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	bfbb      	ittet	lt
 80068ac:	425b      	neglt	r3, r3
 80068ae:	f042 0202 	orrlt.w	r2, r2, #2
 80068b2:	9307      	strge	r3, [sp, #28]
 80068b4:	9307      	strlt	r3, [sp, #28]
 80068b6:	bfb8      	it	lt
 80068b8:	9204      	strlt	r2, [sp, #16]
 80068ba:	7823      	ldrb	r3, [r4, #0]
 80068bc:	2b2e      	cmp	r3, #46	; 0x2e
 80068be:	d10c      	bne.n	80068da <_vfiprintf_r+0x176>
 80068c0:	7863      	ldrb	r3, [r4, #1]
 80068c2:	2b2a      	cmp	r3, #42	; 0x2a
 80068c4:	d135      	bne.n	8006932 <_vfiprintf_r+0x1ce>
 80068c6:	9b03      	ldr	r3, [sp, #12]
 80068c8:	1d1a      	adds	r2, r3, #4
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	9203      	str	r2, [sp, #12]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	bfb8      	it	lt
 80068d2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80068d6:	3402      	adds	r4, #2
 80068d8:	9305      	str	r3, [sp, #20]
 80068da:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80069c0 <_vfiprintf_r+0x25c>
 80068de:	7821      	ldrb	r1, [r4, #0]
 80068e0:	2203      	movs	r2, #3
 80068e2:	4650      	mov	r0, sl
 80068e4:	f7f9 fcac 	bl	8000240 <memchr>
 80068e8:	b140      	cbz	r0, 80068fc <_vfiprintf_r+0x198>
 80068ea:	2340      	movs	r3, #64	; 0x40
 80068ec:	eba0 000a 	sub.w	r0, r0, sl
 80068f0:	fa03 f000 	lsl.w	r0, r3, r0
 80068f4:	9b04      	ldr	r3, [sp, #16]
 80068f6:	4303      	orrs	r3, r0
 80068f8:	3401      	adds	r4, #1
 80068fa:	9304      	str	r3, [sp, #16]
 80068fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006900:	482c      	ldr	r0, [pc, #176]	; (80069b4 <_vfiprintf_r+0x250>)
 8006902:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006906:	2206      	movs	r2, #6
 8006908:	f7f9 fc9a 	bl	8000240 <memchr>
 800690c:	2800      	cmp	r0, #0
 800690e:	d03f      	beq.n	8006990 <_vfiprintf_r+0x22c>
 8006910:	4b29      	ldr	r3, [pc, #164]	; (80069b8 <_vfiprintf_r+0x254>)
 8006912:	bb1b      	cbnz	r3, 800695c <_vfiprintf_r+0x1f8>
 8006914:	9b03      	ldr	r3, [sp, #12]
 8006916:	3307      	adds	r3, #7
 8006918:	f023 0307 	bic.w	r3, r3, #7
 800691c:	3308      	adds	r3, #8
 800691e:	9303      	str	r3, [sp, #12]
 8006920:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006922:	443b      	add	r3, r7
 8006924:	9309      	str	r3, [sp, #36]	; 0x24
 8006926:	e767      	b.n	80067f8 <_vfiprintf_r+0x94>
 8006928:	fb0c 3202 	mla	r2, ip, r2, r3
 800692c:	460c      	mov	r4, r1
 800692e:	2001      	movs	r0, #1
 8006930:	e7a5      	b.n	800687e <_vfiprintf_r+0x11a>
 8006932:	2300      	movs	r3, #0
 8006934:	3401      	adds	r4, #1
 8006936:	9305      	str	r3, [sp, #20]
 8006938:	4619      	mov	r1, r3
 800693a:	f04f 0c0a 	mov.w	ip, #10
 800693e:	4620      	mov	r0, r4
 8006940:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006944:	3a30      	subs	r2, #48	; 0x30
 8006946:	2a09      	cmp	r2, #9
 8006948:	d903      	bls.n	8006952 <_vfiprintf_r+0x1ee>
 800694a:	2b00      	cmp	r3, #0
 800694c:	d0c5      	beq.n	80068da <_vfiprintf_r+0x176>
 800694e:	9105      	str	r1, [sp, #20]
 8006950:	e7c3      	b.n	80068da <_vfiprintf_r+0x176>
 8006952:	fb0c 2101 	mla	r1, ip, r1, r2
 8006956:	4604      	mov	r4, r0
 8006958:	2301      	movs	r3, #1
 800695a:	e7f0      	b.n	800693e <_vfiprintf_r+0x1da>
 800695c:	ab03      	add	r3, sp, #12
 800695e:	9300      	str	r3, [sp, #0]
 8006960:	462a      	mov	r2, r5
 8006962:	4b16      	ldr	r3, [pc, #88]	; (80069bc <_vfiprintf_r+0x258>)
 8006964:	a904      	add	r1, sp, #16
 8006966:	4630      	mov	r0, r6
 8006968:	f3af 8000 	nop.w
 800696c:	4607      	mov	r7, r0
 800696e:	1c78      	adds	r0, r7, #1
 8006970:	d1d6      	bne.n	8006920 <_vfiprintf_r+0x1bc>
 8006972:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006974:	07d9      	lsls	r1, r3, #31
 8006976:	d405      	bmi.n	8006984 <_vfiprintf_r+0x220>
 8006978:	89ab      	ldrh	r3, [r5, #12]
 800697a:	059a      	lsls	r2, r3, #22
 800697c:	d402      	bmi.n	8006984 <_vfiprintf_r+0x220>
 800697e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006980:	f000 fc45 	bl	800720e <__retarget_lock_release_recursive>
 8006984:	89ab      	ldrh	r3, [r5, #12]
 8006986:	065b      	lsls	r3, r3, #25
 8006988:	f53f af12 	bmi.w	80067b0 <_vfiprintf_r+0x4c>
 800698c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800698e:	e711      	b.n	80067b4 <_vfiprintf_r+0x50>
 8006990:	ab03      	add	r3, sp, #12
 8006992:	9300      	str	r3, [sp, #0]
 8006994:	462a      	mov	r2, r5
 8006996:	4b09      	ldr	r3, [pc, #36]	; (80069bc <_vfiprintf_r+0x258>)
 8006998:	a904      	add	r1, sp, #16
 800699a:	4630      	mov	r0, r6
 800699c:	f000 f880 	bl	8006aa0 <_printf_i>
 80069a0:	e7e4      	b.n	800696c <_vfiprintf_r+0x208>
 80069a2:	bf00      	nop
 80069a4:	08007958 	.word	0x08007958
 80069a8:	08007978 	.word	0x08007978
 80069ac:	08007938 	.word	0x08007938
 80069b0:	08007905 	.word	0x08007905
 80069b4:	0800790f 	.word	0x0800790f
 80069b8:	00000000 	.word	0x00000000
 80069bc:	0800673f 	.word	0x0800673f
 80069c0:	0800790b 	.word	0x0800790b

080069c4 <_printf_common>:
 80069c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069c8:	4616      	mov	r6, r2
 80069ca:	4699      	mov	r9, r3
 80069cc:	688a      	ldr	r2, [r1, #8]
 80069ce:	690b      	ldr	r3, [r1, #16]
 80069d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80069d4:	4293      	cmp	r3, r2
 80069d6:	bfb8      	it	lt
 80069d8:	4613      	movlt	r3, r2
 80069da:	6033      	str	r3, [r6, #0]
 80069dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80069e0:	4607      	mov	r7, r0
 80069e2:	460c      	mov	r4, r1
 80069e4:	b10a      	cbz	r2, 80069ea <_printf_common+0x26>
 80069e6:	3301      	adds	r3, #1
 80069e8:	6033      	str	r3, [r6, #0]
 80069ea:	6823      	ldr	r3, [r4, #0]
 80069ec:	0699      	lsls	r1, r3, #26
 80069ee:	bf42      	ittt	mi
 80069f0:	6833      	ldrmi	r3, [r6, #0]
 80069f2:	3302      	addmi	r3, #2
 80069f4:	6033      	strmi	r3, [r6, #0]
 80069f6:	6825      	ldr	r5, [r4, #0]
 80069f8:	f015 0506 	ands.w	r5, r5, #6
 80069fc:	d106      	bne.n	8006a0c <_printf_common+0x48>
 80069fe:	f104 0a19 	add.w	sl, r4, #25
 8006a02:	68e3      	ldr	r3, [r4, #12]
 8006a04:	6832      	ldr	r2, [r6, #0]
 8006a06:	1a9b      	subs	r3, r3, r2
 8006a08:	42ab      	cmp	r3, r5
 8006a0a:	dc26      	bgt.n	8006a5a <_printf_common+0x96>
 8006a0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006a10:	1e13      	subs	r3, r2, #0
 8006a12:	6822      	ldr	r2, [r4, #0]
 8006a14:	bf18      	it	ne
 8006a16:	2301      	movne	r3, #1
 8006a18:	0692      	lsls	r2, r2, #26
 8006a1a:	d42b      	bmi.n	8006a74 <_printf_common+0xb0>
 8006a1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006a20:	4649      	mov	r1, r9
 8006a22:	4638      	mov	r0, r7
 8006a24:	47c0      	blx	r8
 8006a26:	3001      	adds	r0, #1
 8006a28:	d01e      	beq.n	8006a68 <_printf_common+0xa4>
 8006a2a:	6823      	ldr	r3, [r4, #0]
 8006a2c:	68e5      	ldr	r5, [r4, #12]
 8006a2e:	6832      	ldr	r2, [r6, #0]
 8006a30:	f003 0306 	and.w	r3, r3, #6
 8006a34:	2b04      	cmp	r3, #4
 8006a36:	bf08      	it	eq
 8006a38:	1aad      	subeq	r5, r5, r2
 8006a3a:	68a3      	ldr	r3, [r4, #8]
 8006a3c:	6922      	ldr	r2, [r4, #16]
 8006a3e:	bf0c      	ite	eq
 8006a40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a44:	2500      	movne	r5, #0
 8006a46:	4293      	cmp	r3, r2
 8006a48:	bfc4      	itt	gt
 8006a4a:	1a9b      	subgt	r3, r3, r2
 8006a4c:	18ed      	addgt	r5, r5, r3
 8006a4e:	2600      	movs	r6, #0
 8006a50:	341a      	adds	r4, #26
 8006a52:	42b5      	cmp	r5, r6
 8006a54:	d11a      	bne.n	8006a8c <_printf_common+0xc8>
 8006a56:	2000      	movs	r0, #0
 8006a58:	e008      	b.n	8006a6c <_printf_common+0xa8>
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	4652      	mov	r2, sl
 8006a5e:	4649      	mov	r1, r9
 8006a60:	4638      	mov	r0, r7
 8006a62:	47c0      	blx	r8
 8006a64:	3001      	adds	r0, #1
 8006a66:	d103      	bne.n	8006a70 <_printf_common+0xac>
 8006a68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a70:	3501      	adds	r5, #1
 8006a72:	e7c6      	b.n	8006a02 <_printf_common+0x3e>
 8006a74:	18e1      	adds	r1, r4, r3
 8006a76:	1c5a      	adds	r2, r3, #1
 8006a78:	2030      	movs	r0, #48	; 0x30
 8006a7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006a7e:	4422      	add	r2, r4
 8006a80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006a84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006a88:	3302      	adds	r3, #2
 8006a8a:	e7c7      	b.n	8006a1c <_printf_common+0x58>
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	4622      	mov	r2, r4
 8006a90:	4649      	mov	r1, r9
 8006a92:	4638      	mov	r0, r7
 8006a94:	47c0      	blx	r8
 8006a96:	3001      	adds	r0, #1
 8006a98:	d0e6      	beq.n	8006a68 <_printf_common+0xa4>
 8006a9a:	3601      	adds	r6, #1
 8006a9c:	e7d9      	b.n	8006a52 <_printf_common+0x8e>
	...

08006aa0 <_printf_i>:
 8006aa0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006aa4:	7e0f      	ldrb	r7, [r1, #24]
 8006aa6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006aa8:	2f78      	cmp	r7, #120	; 0x78
 8006aaa:	4691      	mov	r9, r2
 8006aac:	4680      	mov	r8, r0
 8006aae:	460c      	mov	r4, r1
 8006ab0:	469a      	mov	sl, r3
 8006ab2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006ab6:	d807      	bhi.n	8006ac8 <_printf_i+0x28>
 8006ab8:	2f62      	cmp	r7, #98	; 0x62
 8006aba:	d80a      	bhi.n	8006ad2 <_printf_i+0x32>
 8006abc:	2f00      	cmp	r7, #0
 8006abe:	f000 80d8 	beq.w	8006c72 <_printf_i+0x1d2>
 8006ac2:	2f58      	cmp	r7, #88	; 0x58
 8006ac4:	f000 80a3 	beq.w	8006c0e <_printf_i+0x16e>
 8006ac8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006acc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006ad0:	e03a      	b.n	8006b48 <_printf_i+0xa8>
 8006ad2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006ad6:	2b15      	cmp	r3, #21
 8006ad8:	d8f6      	bhi.n	8006ac8 <_printf_i+0x28>
 8006ada:	a101      	add	r1, pc, #4	; (adr r1, 8006ae0 <_printf_i+0x40>)
 8006adc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006ae0:	08006b39 	.word	0x08006b39
 8006ae4:	08006b4d 	.word	0x08006b4d
 8006ae8:	08006ac9 	.word	0x08006ac9
 8006aec:	08006ac9 	.word	0x08006ac9
 8006af0:	08006ac9 	.word	0x08006ac9
 8006af4:	08006ac9 	.word	0x08006ac9
 8006af8:	08006b4d 	.word	0x08006b4d
 8006afc:	08006ac9 	.word	0x08006ac9
 8006b00:	08006ac9 	.word	0x08006ac9
 8006b04:	08006ac9 	.word	0x08006ac9
 8006b08:	08006ac9 	.word	0x08006ac9
 8006b0c:	08006c59 	.word	0x08006c59
 8006b10:	08006b7d 	.word	0x08006b7d
 8006b14:	08006c3b 	.word	0x08006c3b
 8006b18:	08006ac9 	.word	0x08006ac9
 8006b1c:	08006ac9 	.word	0x08006ac9
 8006b20:	08006c7b 	.word	0x08006c7b
 8006b24:	08006ac9 	.word	0x08006ac9
 8006b28:	08006b7d 	.word	0x08006b7d
 8006b2c:	08006ac9 	.word	0x08006ac9
 8006b30:	08006ac9 	.word	0x08006ac9
 8006b34:	08006c43 	.word	0x08006c43
 8006b38:	682b      	ldr	r3, [r5, #0]
 8006b3a:	1d1a      	adds	r2, r3, #4
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	602a      	str	r2, [r5, #0]
 8006b40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006b48:	2301      	movs	r3, #1
 8006b4a:	e0a3      	b.n	8006c94 <_printf_i+0x1f4>
 8006b4c:	6820      	ldr	r0, [r4, #0]
 8006b4e:	6829      	ldr	r1, [r5, #0]
 8006b50:	0606      	lsls	r6, r0, #24
 8006b52:	f101 0304 	add.w	r3, r1, #4
 8006b56:	d50a      	bpl.n	8006b6e <_printf_i+0xce>
 8006b58:	680e      	ldr	r6, [r1, #0]
 8006b5a:	602b      	str	r3, [r5, #0]
 8006b5c:	2e00      	cmp	r6, #0
 8006b5e:	da03      	bge.n	8006b68 <_printf_i+0xc8>
 8006b60:	232d      	movs	r3, #45	; 0x2d
 8006b62:	4276      	negs	r6, r6
 8006b64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b68:	485e      	ldr	r0, [pc, #376]	; (8006ce4 <_printf_i+0x244>)
 8006b6a:	230a      	movs	r3, #10
 8006b6c:	e019      	b.n	8006ba2 <_printf_i+0x102>
 8006b6e:	680e      	ldr	r6, [r1, #0]
 8006b70:	602b      	str	r3, [r5, #0]
 8006b72:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006b76:	bf18      	it	ne
 8006b78:	b236      	sxthne	r6, r6
 8006b7a:	e7ef      	b.n	8006b5c <_printf_i+0xbc>
 8006b7c:	682b      	ldr	r3, [r5, #0]
 8006b7e:	6820      	ldr	r0, [r4, #0]
 8006b80:	1d19      	adds	r1, r3, #4
 8006b82:	6029      	str	r1, [r5, #0]
 8006b84:	0601      	lsls	r1, r0, #24
 8006b86:	d501      	bpl.n	8006b8c <_printf_i+0xec>
 8006b88:	681e      	ldr	r6, [r3, #0]
 8006b8a:	e002      	b.n	8006b92 <_printf_i+0xf2>
 8006b8c:	0646      	lsls	r6, r0, #25
 8006b8e:	d5fb      	bpl.n	8006b88 <_printf_i+0xe8>
 8006b90:	881e      	ldrh	r6, [r3, #0]
 8006b92:	4854      	ldr	r0, [pc, #336]	; (8006ce4 <_printf_i+0x244>)
 8006b94:	2f6f      	cmp	r7, #111	; 0x6f
 8006b96:	bf0c      	ite	eq
 8006b98:	2308      	moveq	r3, #8
 8006b9a:	230a      	movne	r3, #10
 8006b9c:	2100      	movs	r1, #0
 8006b9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006ba2:	6865      	ldr	r5, [r4, #4]
 8006ba4:	60a5      	str	r5, [r4, #8]
 8006ba6:	2d00      	cmp	r5, #0
 8006ba8:	bfa2      	ittt	ge
 8006baa:	6821      	ldrge	r1, [r4, #0]
 8006bac:	f021 0104 	bicge.w	r1, r1, #4
 8006bb0:	6021      	strge	r1, [r4, #0]
 8006bb2:	b90e      	cbnz	r6, 8006bb8 <_printf_i+0x118>
 8006bb4:	2d00      	cmp	r5, #0
 8006bb6:	d04d      	beq.n	8006c54 <_printf_i+0x1b4>
 8006bb8:	4615      	mov	r5, r2
 8006bba:	fbb6 f1f3 	udiv	r1, r6, r3
 8006bbe:	fb03 6711 	mls	r7, r3, r1, r6
 8006bc2:	5dc7      	ldrb	r7, [r0, r7]
 8006bc4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006bc8:	4637      	mov	r7, r6
 8006bca:	42bb      	cmp	r3, r7
 8006bcc:	460e      	mov	r6, r1
 8006bce:	d9f4      	bls.n	8006bba <_printf_i+0x11a>
 8006bd0:	2b08      	cmp	r3, #8
 8006bd2:	d10b      	bne.n	8006bec <_printf_i+0x14c>
 8006bd4:	6823      	ldr	r3, [r4, #0]
 8006bd6:	07de      	lsls	r6, r3, #31
 8006bd8:	d508      	bpl.n	8006bec <_printf_i+0x14c>
 8006bda:	6923      	ldr	r3, [r4, #16]
 8006bdc:	6861      	ldr	r1, [r4, #4]
 8006bde:	4299      	cmp	r1, r3
 8006be0:	bfde      	ittt	le
 8006be2:	2330      	movle	r3, #48	; 0x30
 8006be4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006be8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006bec:	1b52      	subs	r2, r2, r5
 8006bee:	6122      	str	r2, [r4, #16]
 8006bf0:	f8cd a000 	str.w	sl, [sp]
 8006bf4:	464b      	mov	r3, r9
 8006bf6:	aa03      	add	r2, sp, #12
 8006bf8:	4621      	mov	r1, r4
 8006bfa:	4640      	mov	r0, r8
 8006bfc:	f7ff fee2 	bl	80069c4 <_printf_common>
 8006c00:	3001      	adds	r0, #1
 8006c02:	d14c      	bne.n	8006c9e <_printf_i+0x1fe>
 8006c04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c08:	b004      	add	sp, #16
 8006c0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c0e:	4835      	ldr	r0, [pc, #212]	; (8006ce4 <_printf_i+0x244>)
 8006c10:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006c14:	6829      	ldr	r1, [r5, #0]
 8006c16:	6823      	ldr	r3, [r4, #0]
 8006c18:	f851 6b04 	ldr.w	r6, [r1], #4
 8006c1c:	6029      	str	r1, [r5, #0]
 8006c1e:	061d      	lsls	r5, r3, #24
 8006c20:	d514      	bpl.n	8006c4c <_printf_i+0x1ac>
 8006c22:	07df      	lsls	r7, r3, #31
 8006c24:	bf44      	itt	mi
 8006c26:	f043 0320 	orrmi.w	r3, r3, #32
 8006c2a:	6023      	strmi	r3, [r4, #0]
 8006c2c:	b91e      	cbnz	r6, 8006c36 <_printf_i+0x196>
 8006c2e:	6823      	ldr	r3, [r4, #0]
 8006c30:	f023 0320 	bic.w	r3, r3, #32
 8006c34:	6023      	str	r3, [r4, #0]
 8006c36:	2310      	movs	r3, #16
 8006c38:	e7b0      	b.n	8006b9c <_printf_i+0xfc>
 8006c3a:	6823      	ldr	r3, [r4, #0]
 8006c3c:	f043 0320 	orr.w	r3, r3, #32
 8006c40:	6023      	str	r3, [r4, #0]
 8006c42:	2378      	movs	r3, #120	; 0x78
 8006c44:	4828      	ldr	r0, [pc, #160]	; (8006ce8 <_printf_i+0x248>)
 8006c46:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006c4a:	e7e3      	b.n	8006c14 <_printf_i+0x174>
 8006c4c:	0659      	lsls	r1, r3, #25
 8006c4e:	bf48      	it	mi
 8006c50:	b2b6      	uxthmi	r6, r6
 8006c52:	e7e6      	b.n	8006c22 <_printf_i+0x182>
 8006c54:	4615      	mov	r5, r2
 8006c56:	e7bb      	b.n	8006bd0 <_printf_i+0x130>
 8006c58:	682b      	ldr	r3, [r5, #0]
 8006c5a:	6826      	ldr	r6, [r4, #0]
 8006c5c:	6961      	ldr	r1, [r4, #20]
 8006c5e:	1d18      	adds	r0, r3, #4
 8006c60:	6028      	str	r0, [r5, #0]
 8006c62:	0635      	lsls	r5, r6, #24
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	d501      	bpl.n	8006c6c <_printf_i+0x1cc>
 8006c68:	6019      	str	r1, [r3, #0]
 8006c6a:	e002      	b.n	8006c72 <_printf_i+0x1d2>
 8006c6c:	0670      	lsls	r0, r6, #25
 8006c6e:	d5fb      	bpl.n	8006c68 <_printf_i+0x1c8>
 8006c70:	8019      	strh	r1, [r3, #0]
 8006c72:	2300      	movs	r3, #0
 8006c74:	6123      	str	r3, [r4, #16]
 8006c76:	4615      	mov	r5, r2
 8006c78:	e7ba      	b.n	8006bf0 <_printf_i+0x150>
 8006c7a:	682b      	ldr	r3, [r5, #0]
 8006c7c:	1d1a      	adds	r2, r3, #4
 8006c7e:	602a      	str	r2, [r5, #0]
 8006c80:	681d      	ldr	r5, [r3, #0]
 8006c82:	6862      	ldr	r2, [r4, #4]
 8006c84:	2100      	movs	r1, #0
 8006c86:	4628      	mov	r0, r5
 8006c88:	f7f9 fada 	bl	8000240 <memchr>
 8006c8c:	b108      	cbz	r0, 8006c92 <_printf_i+0x1f2>
 8006c8e:	1b40      	subs	r0, r0, r5
 8006c90:	6060      	str	r0, [r4, #4]
 8006c92:	6863      	ldr	r3, [r4, #4]
 8006c94:	6123      	str	r3, [r4, #16]
 8006c96:	2300      	movs	r3, #0
 8006c98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c9c:	e7a8      	b.n	8006bf0 <_printf_i+0x150>
 8006c9e:	6923      	ldr	r3, [r4, #16]
 8006ca0:	462a      	mov	r2, r5
 8006ca2:	4649      	mov	r1, r9
 8006ca4:	4640      	mov	r0, r8
 8006ca6:	47d0      	blx	sl
 8006ca8:	3001      	adds	r0, #1
 8006caa:	d0ab      	beq.n	8006c04 <_printf_i+0x164>
 8006cac:	6823      	ldr	r3, [r4, #0]
 8006cae:	079b      	lsls	r3, r3, #30
 8006cb0:	d413      	bmi.n	8006cda <_printf_i+0x23a>
 8006cb2:	68e0      	ldr	r0, [r4, #12]
 8006cb4:	9b03      	ldr	r3, [sp, #12]
 8006cb6:	4298      	cmp	r0, r3
 8006cb8:	bfb8      	it	lt
 8006cba:	4618      	movlt	r0, r3
 8006cbc:	e7a4      	b.n	8006c08 <_printf_i+0x168>
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	4632      	mov	r2, r6
 8006cc2:	4649      	mov	r1, r9
 8006cc4:	4640      	mov	r0, r8
 8006cc6:	47d0      	blx	sl
 8006cc8:	3001      	adds	r0, #1
 8006cca:	d09b      	beq.n	8006c04 <_printf_i+0x164>
 8006ccc:	3501      	adds	r5, #1
 8006cce:	68e3      	ldr	r3, [r4, #12]
 8006cd0:	9903      	ldr	r1, [sp, #12]
 8006cd2:	1a5b      	subs	r3, r3, r1
 8006cd4:	42ab      	cmp	r3, r5
 8006cd6:	dcf2      	bgt.n	8006cbe <_printf_i+0x21e>
 8006cd8:	e7eb      	b.n	8006cb2 <_printf_i+0x212>
 8006cda:	2500      	movs	r5, #0
 8006cdc:	f104 0619 	add.w	r6, r4, #25
 8006ce0:	e7f5      	b.n	8006cce <_printf_i+0x22e>
 8006ce2:	bf00      	nop
 8006ce4:	08007916 	.word	0x08007916
 8006ce8:	08007927 	.word	0x08007927

08006cec <_sbrk_r>:
 8006cec:	b538      	push	{r3, r4, r5, lr}
 8006cee:	4d06      	ldr	r5, [pc, #24]	; (8006d08 <_sbrk_r+0x1c>)
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	4604      	mov	r4, r0
 8006cf4:	4608      	mov	r0, r1
 8006cf6:	602b      	str	r3, [r5, #0]
 8006cf8:	f7fa f962 	bl	8000fc0 <_sbrk>
 8006cfc:	1c43      	adds	r3, r0, #1
 8006cfe:	d102      	bne.n	8006d06 <_sbrk_r+0x1a>
 8006d00:	682b      	ldr	r3, [r5, #0]
 8006d02:	b103      	cbz	r3, 8006d06 <_sbrk_r+0x1a>
 8006d04:	6023      	str	r3, [r4, #0]
 8006d06:	bd38      	pop	{r3, r4, r5, pc}
 8006d08:	2000025c 	.word	0x2000025c

08006d0c <__swbuf_r>:
 8006d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d0e:	460e      	mov	r6, r1
 8006d10:	4614      	mov	r4, r2
 8006d12:	4605      	mov	r5, r0
 8006d14:	b118      	cbz	r0, 8006d1e <__swbuf_r+0x12>
 8006d16:	6983      	ldr	r3, [r0, #24]
 8006d18:	b90b      	cbnz	r3, 8006d1e <__swbuf_r+0x12>
 8006d1a:	f000 f9d9 	bl	80070d0 <__sinit>
 8006d1e:	4b21      	ldr	r3, [pc, #132]	; (8006da4 <__swbuf_r+0x98>)
 8006d20:	429c      	cmp	r4, r3
 8006d22:	d12b      	bne.n	8006d7c <__swbuf_r+0x70>
 8006d24:	686c      	ldr	r4, [r5, #4]
 8006d26:	69a3      	ldr	r3, [r4, #24]
 8006d28:	60a3      	str	r3, [r4, #8]
 8006d2a:	89a3      	ldrh	r3, [r4, #12]
 8006d2c:	071a      	lsls	r2, r3, #28
 8006d2e:	d52f      	bpl.n	8006d90 <__swbuf_r+0x84>
 8006d30:	6923      	ldr	r3, [r4, #16]
 8006d32:	b36b      	cbz	r3, 8006d90 <__swbuf_r+0x84>
 8006d34:	6923      	ldr	r3, [r4, #16]
 8006d36:	6820      	ldr	r0, [r4, #0]
 8006d38:	1ac0      	subs	r0, r0, r3
 8006d3a:	6963      	ldr	r3, [r4, #20]
 8006d3c:	b2f6      	uxtb	r6, r6
 8006d3e:	4283      	cmp	r3, r0
 8006d40:	4637      	mov	r7, r6
 8006d42:	dc04      	bgt.n	8006d4e <__swbuf_r+0x42>
 8006d44:	4621      	mov	r1, r4
 8006d46:	4628      	mov	r0, r5
 8006d48:	f000 f92e 	bl	8006fa8 <_fflush_r>
 8006d4c:	bb30      	cbnz	r0, 8006d9c <__swbuf_r+0x90>
 8006d4e:	68a3      	ldr	r3, [r4, #8]
 8006d50:	3b01      	subs	r3, #1
 8006d52:	60a3      	str	r3, [r4, #8]
 8006d54:	6823      	ldr	r3, [r4, #0]
 8006d56:	1c5a      	adds	r2, r3, #1
 8006d58:	6022      	str	r2, [r4, #0]
 8006d5a:	701e      	strb	r6, [r3, #0]
 8006d5c:	6963      	ldr	r3, [r4, #20]
 8006d5e:	3001      	adds	r0, #1
 8006d60:	4283      	cmp	r3, r0
 8006d62:	d004      	beq.n	8006d6e <__swbuf_r+0x62>
 8006d64:	89a3      	ldrh	r3, [r4, #12]
 8006d66:	07db      	lsls	r3, r3, #31
 8006d68:	d506      	bpl.n	8006d78 <__swbuf_r+0x6c>
 8006d6a:	2e0a      	cmp	r6, #10
 8006d6c:	d104      	bne.n	8006d78 <__swbuf_r+0x6c>
 8006d6e:	4621      	mov	r1, r4
 8006d70:	4628      	mov	r0, r5
 8006d72:	f000 f919 	bl	8006fa8 <_fflush_r>
 8006d76:	b988      	cbnz	r0, 8006d9c <__swbuf_r+0x90>
 8006d78:	4638      	mov	r0, r7
 8006d7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d7c:	4b0a      	ldr	r3, [pc, #40]	; (8006da8 <__swbuf_r+0x9c>)
 8006d7e:	429c      	cmp	r4, r3
 8006d80:	d101      	bne.n	8006d86 <__swbuf_r+0x7a>
 8006d82:	68ac      	ldr	r4, [r5, #8]
 8006d84:	e7cf      	b.n	8006d26 <__swbuf_r+0x1a>
 8006d86:	4b09      	ldr	r3, [pc, #36]	; (8006dac <__swbuf_r+0xa0>)
 8006d88:	429c      	cmp	r4, r3
 8006d8a:	bf08      	it	eq
 8006d8c:	68ec      	ldreq	r4, [r5, #12]
 8006d8e:	e7ca      	b.n	8006d26 <__swbuf_r+0x1a>
 8006d90:	4621      	mov	r1, r4
 8006d92:	4628      	mov	r0, r5
 8006d94:	f000 f80c 	bl	8006db0 <__swsetup_r>
 8006d98:	2800      	cmp	r0, #0
 8006d9a:	d0cb      	beq.n	8006d34 <__swbuf_r+0x28>
 8006d9c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006da0:	e7ea      	b.n	8006d78 <__swbuf_r+0x6c>
 8006da2:	bf00      	nop
 8006da4:	08007958 	.word	0x08007958
 8006da8:	08007978 	.word	0x08007978
 8006dac:	08007938 	.word	0x08007938

08006db0 <__swsetup_r>:
 8006db0:	4b32      	ldr	r3, [pc, #200]	; (8006e7c <__swsetup_r+0xcc>)
 8006db2:	b570      	push	{r4, r5, r6, lr}
 8006db4:	681d      	ldr	r5, [r3, #0]
 8006db6:	4606      	mov	r6, r0
 8006db8:	460c      	mov	r4, r1
 8006dba:	b125      	cbz	r5, 8006dc6 <__swsetup_r+0x16>
 8006dbc:	69ab      	ldr	r3, [r5, #24]
 8006dbe:	b913      	cbnz	r3, 8006dc6 <__swsetup_r+0x16>
 8006dc0:	4628      	mov	r0, r5
 8006dc2:	f000 f985 	bl	80070d0 <__sinit>
 8006dc6:	4b2e      	ldr	r3, [pc, #184]	; (8006e80 <__swsetup_r+0xd0>)
 8006dc8:	429c      	cmp	r4, r3
 8006dca:	d10f      	bne.n	8006dec <__swsetup_r+0x3c>
 8006dcc:	686c      	ldr	r4, [r5, #4]
 8006dce:	89a3      	ldrh	r3, [r4, #12]
 8006dd0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006dd4:	0719      	lsls	r1, r3, #28
 8006dd6:	d42c      	bmi.n	8006e32 <__swsetup_r+0x82>
 8006dd8:	06dd      	lsls	r5, r3, #27
 8006dda:	d411      	bmi.n	8006e00 <__swsetup_r+0x50>
 8006ddc:	2309      	movs	r3, #9
 8006dde:	6033      	str	r3, [r6, #0]
 8006de0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006de4:	81a3      	strh	r3, [r4, #12]
 8006de6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006dea:	e03e      	b.n	8006e6a <__swsetup_r+0xba>
 8006dec:	4b25      	ldr	r3, [pc, #148]	; (8006e84 <__swsetup_r+0xd4>)
 8006dee:	429c      	cmp	r4, r3
 8006df0:	d101      	bne.n	8006df6 <__swsetup_r+0x46>
 8006df2:	68ac      	ldr	r4, [r5, #8]
 8006df4:	e7eb      	b.n	8006dce <__swsetup_r+0x1e>
 8006df6:	4b24      	ldr	r3, [pc, #144]	; (8006e88 <__swsetup_r+0xd8>)
 8006df8:	429c      	cmp	r4, r3
 8006dfa:	bf08      	it	eq
 8006dfc:	68ec      	ldreq	r4, [r5, #12]
 8006dfe:	e7e6      	b.n	8006dce <__swsetup_r+0x1e>
 8006e00:	0758      	lsls	r0, r3, #29
 8006e02:	d512      	bpl.n	8006e2a <__swsetup_r+0x7a>
 8006e04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e06:	b141      	cbz	r1, 8006e1a <__swsetup_r+0x6a>
 8006e08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006e0c:	4299      	cmp	r1, r3
 8006e0e:	d002      	beq.n	8006e16 <__swsetup_r+0x66>
 8006e10:	4630      	mov	r0, r6
 8006e12:	f7ff fa41 	bl	8006298 <_free_r>
 8006e16:	2300      	movs	r3, #0
 8006e18:	6363      	str	r3, [r4, #52]	; 0x34
 8006e1a:	89a3      	ldrh	r3, [r4, #12]
 8006e1c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006e20:	81a3      	strh	r3, [r4, #12]
 8006e22:	2300      	movs	r3, #0
 8006e24:	6063      	str	r3, [r4, #4]
 8006e26:	6923      	ldr	r3, [r4, #16]
 8006e28:	6023      	str	r3, [r4, #0]
 8006e2a:	89a3      	ldrh	r3, [r4, #12]
 8006e2c:	f043 0308 	orr.w	r3, r3, #8
 8006e30:	81a3      	strh	r3, [r4, #12]
 8006e32:	6923      	ldr	r3, [r4, #16]
 8006e34:	b94b      	cbnz	r3, 8006e4a <__swsetup_r+0x9a>
 8006e36:	89a3      	ldrh	r3, [r4, #12]
 8006e38:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006e3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e40:	d003      	beq.n	8006e4a <__swsetup_r+0x9a>
 8006e42:	4621      	mov	r1, r4
 8006e44:	4630      	mov	r0, r6
 8006e46:	f000 fa09 	bl	800725c <__smakebuf_r>
 8006e4a:	89a0      	ldrh	r0, [r4, #12]
 8006e4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006e50:	f010 0301 	ands.w	r3, r0, #1
 8006e54:	d00a      	beq.n	8006e6c <__swsetup_r+0xbc>
 8006e56:	2300      	movs	r3, #0
 8006e58:	60a3      	str	r3, [r4, #8]
 8006e5a:	6963      	ldr	r3, [r4, #20]
 8006e5c:	425b      	negs	r3, r3
 8006e5e:	61a3      	str	r3, [r4, #24]
 8006e60:	6923      	ldr	r3, [r4, #16]
 8006e62:	b943      	cbnz	r3, 8006e76 <__swsetup_r+0xc6>
 8006e64:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006e68:	d1ba      	bne.n	8006de0 <__swsetup_r+0x30>
 8006e6a:	bd70      	pop	{r4, r5, r6, pc}
 8006e6c:	0781      	lsls	r1, r0, #30
 8006e6e:	bf58      	it	pl
 8006e70:	6963      	ldrpl	r3, [r4, #20]
 8006e72:	60a3      	str	r3, [r4, #8]
 8006e74:	e7f4      	b.n	8006e60 <__swsetup_r+0xb0>
 8006e76:	2000      	movs	r0, #0
 8006e78:	e7f7      	b.n	8006e6a <__swsetup_r+0xba>
 8006e7a:	bf00      	nop
 8006e7c:	200000a4 	.word	0x200000a4
 8006e80:	08007958 	.word	0x08007958
 8006e84:	08007978 	.word	0x08007978
 8006e88:	08007938 	.word	0x08007938

08006e8c <abort>:
 8006e8c:	b508      	push	{r3, lr}
 8006e8e:	2006      	movs	r0, #6
 8006e90:	f000 fab0 	bl	80073f4 <raise>
 8006e94:	2001      	movs	r0, #1
 8006e96:	f7fa f81b 	bl	8000ed0 <_exit>
	...

08006e9c <__sflush_r>:
 8006e9c:	898a      	ldrh	r2, [r1, #12]
 8006e9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ea2:	4605      	mov	r5, r0
 8006ea4:	0710      	lsls	r0, r2, #28
 8006ea6:	460c      	mov	r4, r1
 8006ea8:	d458      	bmi.n	8006f5c <__sflush_r+0xc0>
 8006eaa:	684b      	ldr	r3, [r1, #4]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	dc05      	bgt.n	8006ebc <__sflush_r+0x20>
 8006eb0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	dc02      	bgt.n	8006ebc <__sflush_r+0x20>
 8006eb6:	2000      	movs	r0, #0
 8006eb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ebc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006ebe:	2e00      	cmp	r6, #0
 8006ec0:	d0f9      	beq.n	8006eb6 <__sflush_r+0x1a>
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006ec8:	682f      	ldr	r7, [r5, #0]
 8006eca:	602b      	str	r3, [r5, #0]
 8006ecc:	d032      	beq.n	8006f34 <__sflush_r+0x98>
 8006ece:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006ed0:	89a3      	ldrh	r3, [r4, #12]
 8006ed2:	075a      	lsls	r2, r3, #29
 8006ed4:	d505      	bpl.n	8006ee2 <__sflush_r+0x46>
 8006ed6:	6863      	ldr	r3, [r4, #4]
 8006ed8:	1ac0      	subs	r0, r0, r3
 8006eda:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006edc:	b10b      	cbz	r3, 8006ee2 <__sflush_r+0x46>
 8006ede:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006ee0:	1ac0      	subs	r0, r0, r3
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	4602      	mov	r2, r0
 8006ee6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006ee8:	6a21      	ldr	r1, [r4, #32]
 8006eea:	4628      	mov	r0, r5
 8006eec:	47b0      	blx	r6
 8006eee:	1c43      	adds	r3, r0, #1
 8006ef0:	89a3      	ldrh	r3, [r4, #12]
 8006ef2:	d106      	bne.n	8006f02 <__sflush_r+0x66>
 8006ef4:	6829      	ldr	r1, [r5, #0]
 8006ef6:	291d      	cmp	r1, #29
 8006ef8:	d82c      	bhi.n	8006f54 <__sflush_r+0xb8>
 8006efa:	4a2a      	ldr	r2, [pc, #168]	; (8006fa4 <__sflush_r+0x108>)
 8006efc:	40ca      	lsrs	r2, r1
 8006efe:	07d6      	lsls	r6, r2, #31
 8006f00:	d528      	bpl.n	8006f54 <__sflush_r+0xb8>
 8006f02:	2200      	movs	r2, #0
 8006f04:	6062      	str	r2, [r4, #4]
 8006f06:	04d9      	lsls	r1, r3, #19
 8006f08:	6922      	ldr	r2, [r4, #16]
 8006f0a:	6022      	str	r2, [r4, #0]
 8006f0c:	d504      	bpl.n	8006f18 <__sflush_r+0x7c>
 8006f0e:	1c42      	adds	r2, r0, #1
 8006f10:	d101      	bne.n	8006f16 <__sflush_r+0x7a>
 8006f12:	682b      	ldr	r3, [r5, #0]
 8006f14:	b903      	cbnz	r3, 8006f18 <__sflush_r+0x7c>
 8006f16:	6560      	str	r0, [r4, #84]	; 0x54
 8006f18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f1a:	602f      	str	r7, [r5, #0]
 8006f1c:	2900      	cmp	r1, #0
 8006f1e:	d0ca      	beq.n	8006eb6 <__sflush_r+0x1a>
 8006f20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006f24:	4299      	cmp	r1, r3
 8006f26:	d002      	beq.n	8006f2e <__sflush_r+0x92>
 8006f28:	4628      	mov	r0, r5
 8006f2a:	f7ff f9b5 	bl	8006298 <_free_r>
 8006f2e:	2000      	movs	r0, #0
 8006f30:	6360      	str	r0, [r4, #52]	; 0x34
 8006f32:	e7c1      	b.n	8006eb8 <__sflush_r+0x1c>
 8006f34:	6a21      	ldr	r1, [r4, #32]
 8006f36:	2301      	movs	r3, #1
 8006f38:	4628      	mov	r0, r5
 8006f3a:	47b0      	blx	r6
 8006f3c:	1c41      	adds	r1, r0, #1
 8006f3e:	d1c7      	bne.n	8006ed0 <__sflush_r+0x34>
 8006f40:	682b      	ldr	r3, [r5, #0]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d0c4      	beq.n	8006ed0 <__sflush_r+0x34>
 8006f46:	2b1d      	cmp	r3, #29
 8006f48:	d001      	beq.n	8006f4e <__sflush_r+0xb2>
 8006f4a:	2b16      	cmp	r3, #22
 8006f4c:	d101      	bne.n	8006f52 <__sflush_r+0xb6>
 8006f4e:	602f      	str	r7, [r5, #0]
 8006f50:	e7b1      	b.n	8006eb6 <__sflush_r+0x1a>
 8006f52:	89a3      	ldrh	r3, [r4, #12]
 8006f54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f58:	81a3      	strh	r3, [r4, #12]
 8006f5a:	e7ad      	b.n	8006eb8 <__sflush_r+0x1c>
 8006f5c:	690f      	ldr	r7, [r1, #16]
 8006f5e:	2f00      	cmp	r7, #0
 8006f60:	d0a9      	beq.n	8006eb6 <__sflush_r+0x1a>
 8006f62:	0793      	lsls	r3, r2, #30
 8006f64:	680e      	ldr	r6, [r1, #0]
 8006f66:	bf08      	it	eq
 8006f68:	694b      	ldreq	r3, [r1, #20]
 8006f6a:	600f      	str	r7, [r1, #0]
 8006f6c:	bf18      	it	ne
 8006f6e:	2300      	movne	r3, #0
 8006f70:	eba6 0807 	sub.w	r8, r6, r7
 8006f74:	608b      	str	r3, [r1, #8]
 8006f76:	f1b8 0f00 	cmp.w	r8, #0
 8006f7a:	dd9c      	ble.n	8006eb6 <__sflush_r+0x1a>
 8006f7c:	6a21      	ldr	r1, [r4, #32]
 8006f7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006f80:	4643      	mov	r3, r8
 8006f82:	463a      	mov	r2, r7
 8006f84:	4628      	mov	r0, r5
 8006f86:	47b0      	blx	r6
 8006f88:	2800      	cmp	r0, #0
 8006f8a:	dc06      	bgt.n	8006f9a <__sflush_r+0xfe>
 8006f8c:	89a3      	ldrh	r3, [r4, #12]
 8006f8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f92:	81a3      	strh	r3, [r4, #12]
 8006f94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f98:	e78e      	b.n	8006eb8 <__sflush_r+0x1c>
 8006f9a:	4407      	add	r7, r0
 8006f9c:	eba8 0800 	sub.w	r8, r8, r0
 8006fa0:	e7e9      	b.n	8006f76 <__sflush_r+0xda>
 8006fa2:	bf00      	nop
 8006fa4:	20400001 	.word	0x20400001

08006fa8 <_fflush_r>:
 8006fa8:	b538      	push	{r3, r4, r5, lr}
 8006faa:	690b      	ldr	r3, [r1, #16]
 8006fac:	4605      	mov	r5, r0
 8006fae:	460c      	mov	r4, r1
 8006fb0:	b913      	cbnz	r3, 8006fb8 <_fflush_r+0x10>
 8006fb2:	2500      	movs	r5, #0
 8006fb4:	4628      	mov	r0, r5
 8006fb6:	bd38      	pop	{r3, r4, r5, pc}
 8006fb8:	b118      	cbz	r0, 8006fc2 <_fflush_r+0x1a>
 8006fba:	6983      	ldr	r3, [r0, #24]
 8006fbc:	b90b      	cbnz	r3, 8006fc2 <_fflush_r+0x1a>
 8006fbe:	f000 f887 	bl	80070d0 <__sinit>
 8006fc2:	4b14      	ldr	r3, [pc, #80]	; (8007014 <_fflush_r+0x6c>)
 8006fc4:	429c      	cmp	r4, r3
 8006fc6:	d11b      	bne.n	8007000 <_fflush_r+0x58>
 8006fc8:	686c      	ldr	r4, [r5, #4]
 8006fca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d0ef      	beq.n	8006fb2 <_fflush_r+0xa>
 8006fd2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006fd4:	07d0      	lsls	r0, r2, #31
 8006fd6:	d404      	bmi.n	8006fe2 <_fflush_r+0x3a>
 8006fd8:	0599      	lsls	r1, r3, #22
 8006fda:	d402      	bmi.n	8006fe2 <_fflush_r+0x3a>
 8006fdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006fde:	f000 f915 	bl	800720c <__retarget_lock_acquire_recursive>
 8006fe2:	4628      	mov	r0, r5
 8006fe4:	4621      	mov	r1, r4
 8006fe6:	f7ff ff59 	bl	8006e9c <__sflush_r>
 8006fea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006fec:	07da      	lsls	r2, r3, #31
 8006fee:	4605      	mov	r5, r0
 8006ff0:	d4e0      	bmi.n	8006fb4 <_fflush_r+0xc>
 8006ff2:	89a3      	ldrh	r3, [r4, #12]
 8006ff4:	059b      	lsls	r3, r3, #22
 8006ff6:	d4dd      	bmi.n	8006fb4 <_fflush_r+0xc>
 8006ff8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ffa:	f000 f908 	bl	800720e <__retarget_lock_release_recursive>
 8006ffe:	e7d9      	b.n	8006fb4 <_fflush_r+0xc>
 8007000:	4b05      	ldr	r3, [pc, #20]	; (8007018 <_fflush_r+0x70>)
 8007002:	429c      	cmp	r4, r3
 8007004:	d101      	bne.n	800700a <_fflush_r+0x62>
 8007006:	68ac      	ldr	r4, [r5, #8]
 8007008:	e7df      	b.n	8006fca <_fflush_r+0x22>
 800700a:	4b04      	ldr	r3, [pc, #16]	; (800701c <_fflush_r+0x74>)
 800700c:	429c      	cmp	r4, r3
 800700e:	bf08      	it	eq
 8007010:	68ec      	ldreq	r4, [r5, #12]
 8007012:	e7da      	b.n	8006fca <_fflush_r+0x22>
 8007014:	08007958 	.word	0x08007958
 8007018:	08007978 	.word	0x08007978
 800701c:	08007938 	.word	0x08007938

08007020 <std>:
 8007020:	2300      	movs	r3, #0
 8007022:	b510      	push	{r4, lr}
 8007024:	4604      	mov	r4, r0
 8007026:	e9c0 3300 	strd	r3, r3, [r0]
 800702a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800702e:	6083      	str	r3, [r0, #8]
 8007030:	8181      	strh	r1, [r0, #12]
 8007032:	6643      	str	r3, [r0, #100]	; 0x64
 8007034:	81c2      	strh	r2, [r0, #14]
 8007036:	6183      	str	r3, [r0, #24]
 8007038:	4619      	mov	r1, r3
 800703a:	2208      	movs	r2, #8
 800703c:	305c      	adds	r0, #92	; 0x5c
 800703e:	f7fe ffe3 	bl	8006008 <memset>
 8007042:	4b05      	ldr	r3, [pc, #20]	; (8007058 <std+0x38>)
 8007044:	6263      	str	r3, [r4, #36]	; 0x24
 8007046:	4b05      	ldr	r3, [pc, #20]	; (800705c <std+0x3c>)
 8007048:	62a3      	str	r3, [r4, #40]	; 0x28
 800704a:	4b05      	ldr	r3, [pc, #20]	; (8007060 <std+0x40>)
 800704c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800704e:	4b05      	ldr	r3, [pc, #20]	; (8007064 <std+0x44>)
 8007050:	6224      	str	r4, [r4, #32]
 8007052:	6323      	str	r3, [r4, #48]	; 0x30
 8007054:	bd10      	pop	{r4, pc}
 8007056:	bf00      	nop
 8007058:	0800742d 	.word	0x0800742d
 800705c:	0800744f 	.word	0x0800744f
 8007060:	08007487 	.word	0x08007487
 8007064:	080074ab 	.word	0x080074ab

08007068 <_cleanup_r>:
 8007068:	4901      	ldr	r1, [pc, #4]	; (8007070 <_cleanup_r+0x8>)
 800706a:	f000 b8af 	b.w	80071cc <_fwalk_reent>
 800706e:	bf00      	nop
 8007070:	08006fa9 	.word	0x08006fa9

08007074 <__sfmoreglue>:
 8007074:	b570      	push	{r4, r5, r6, lr}
 8007076:	2268      	movs	r2, #104	; 0x68
 8007078:	1e4d      	subs	r5, r1, #1
 800707a:	4355      	muls	r5, r2
 800707c:	460e      	mov	r6, r1
 800707e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007082:	f7ff f975 	bl	8006370 <_malloc_r>
 8007086:	4604      	mov	r4, r0
 8007088:	b140      	cbz	r0, 800709c <__sfmoreglue+0x28>
 800708a:	2100      	movs	r1, #0
 800708c:	e9c0 1600 	strd	r1, r6, [r0]
 8007090:	300c      	adds	r0, #12
 8007092:	60a0      	str	r0, [r4, #8]
 8007094:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007098:	f7fe ffb6 	bl	8006008 <memset>
 800709c:	4620      	mov	r0, r4
 800709e:	bd70      	pop	{r4, r5, r6, pc}

080070a0 <__sfp_lock_acquire>:
 80070a0:	4801      	ldr	r0, [pc, #4]	; (80070a8 <__sfp_lock_acquire+0x8>)
 80070a2:	f000 b8b3 	b.w	800720c <__retarget_lock_acquire_recursive>
 80070a6:	bf00      	nop
 80070a8:	20000259 	.word	0x20000259

080070ac <__sfp_lock_release>:
 80070ac:	4801      	ldr	r0, [pc, #4]	; (80070b4 <__sfp_lock_release+0x8>)
 80070ae:	f000 b8ae 	b.w	800720e <__retarget_lock_release_recursive>
 80070b2:	bf00      	nop
 80070b4:	20000259 	.word	0x20000259

080070b8 <__sinit_lock_acquire>:
 80070b8:	4801      	ldr	r0, [pc, #4]	; (80070c0 <__sinit_lock_acquire+0x8>)
 80070ba:	f000 b8a7 	b.w	800720c <__retarget_lock_acquire_recursive>
 80070be:	bf00      	nop
 80070c0:	2000025a 	.word	0x2000025a

080070c4 <__sinit_lock_release>:
 80070c4:	4801      	ldr	r0, [pc, #4]	; (80070cc <__sinit_lock_release+0x8>)
 80070c6:	f000 b8a2 	b.w	800720e <__retarget_lock_release_recursive>
 80070ca:	bf00      	nop
 80070cc:	2000025a 	.word	0x2000025a

080070d0 <__sinit>:
 80070d0:	b510      	push	{r4, lr}
 80070d2:	4604      	mov	r4, r0
 80070d4:	f7ff fff0 	bl	80070b8 <__sinit_lock_acquire>
 80070d8:	69a3      	ldr	r3, [r4, #24]
 80070da:	b11b      	cbz	r3, 80070e4 <__sinit+0x14>
 80070dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070e0:	f7ff bff0 	b.w	80070c4 <__sinit_lock_release>
 80070e4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80070e8:	6523      	str	r3, [r4, #80]	; 0x50
 80070ea:	4b13      	ldr	r3, [pc, #76]	; (8007138 <__sinit+0x68>)
 80070ec:	4a13      	ldr	r2, [pc, #76]	; (800713c <__sinit+0x6c>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	62a2      	str	r2, [r4, #40]	; 0x28
 80070f2:	42a3      	cmp	r3, r4
 80070f4:	bf04      	itt	eq
 80070f6:	2301      	moveq	r3, #1
 80070f8:	61a3      	streq	r3, [r4, #24]
 80070fa:	4620      	mov	r0, r4
 80070fc:	f000 f820 	bl	8007140 <__sfp>
 8007100:	6060      	str	r0, [r4, #4]
 8007102:	4620      	mov	r0, r4
 8007104:	f000 f81c 	bl	8007140 <__sfp>
 8007108:	60a0      	str	r0, [r4, #8]
 800710a:	4620      	mov	r0, r4
 800710c:	f000 f818 	bl	8007140 <__sfp>
 8007110:	2200      	movs	r2, #0
 8007112:	60e0      	str	r0, [r4, #12]
 8007114:	2104      	movs	r1, #4
 8007116:	6860      	ldr	r0, [r4, #4]
 8007118:	f7ff ff82 	bl	8007020 <std>
 800711c:	68a0      	ldr	r0, [r4, #8]
 800711e:	2201      	movs	r2, #1
 8007120:	2109      	movs	r1, #9
 8007122:	f7ff ff7d 	bl	8007020 <std>
 8007126:	68e0      	ldr	r0, [r4, #12]
 8007128:	2202      	movs	r2, #2
 800712a:	2112      	movs	r1, #18
 800712c:	f7ff ff78 	bl	8007020 <std>
 8007130:	2301      	movs	r3, #1
 8007132:	61a3      	str	r3, [r4, #24]
 8007134:	e7d2      	b.n	80070dc <__sinit+0xc>
 8007136:	bf00      	nop
 8007138:	08007750 	.word	0x08007750
 800713c:	08007069 	.word	0x08007069

08007140 <__sfp>:
 8007140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007142:	4607      	mov	r7, r0
 8007144:	f7ff ffac 	bl	80070a0 <__sfp_lock_acquire>
 8007148:	4b1e      	ldr	r3, [pc, #120]	; (80071c4 <__sfp+0x84>)
 800714a:	681e      	ldr	r6, [r3, #0]
 800714c:	69b3      	ldr	r3, [r6, #24]
 800714e:	b913      	cbnz	r3, 8007156 <__sfp+0x16>
 8007150:	4630      	mov	r0, r6
 8007152:	f7ff ffbd 	bl	80070d0 <__sinit>
 8007156:	3648      	adds	r6, #72	; 0x48
 8007158:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800715c:	3b01      	subs	r3, #1
 800715e:	d503      	bpl.n	8007168 <__sfp+0x28>
 8007160:	6833      	ldr	r3, [r6, #0]
 8007162:	b30b      	cbz	r3, 80071a8 <__sfp+0x68>
 8007164:	6836      	ldr	r6, [r6, #0]
 8007166:	e7f7      	b.n	8007158 <__sfp+0x18>
 8007168:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800716c:	b9d5      	cbnz	r5, 80071a4 <__sfp+0x64>
 800716e:	4b16      	ldr	r3, [pc, #88]	; (80071c8 <__sfp+0x88>)
 8007170:	60e3      	str	r3, [r4, #12]
 8007172:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007176:	6665      	str	r5, [r4, #100]	; 0x64
 8007178:	f000 f847 	bl	800720a <__retarget_lock_init_recursive>
 800717c:	f7ff ff96 	bl	80070ac <__sfp_lock_release>
 8007180:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007184:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007188:	6025      	str	r5, [r4, #0]
 800718a:	61a5      	str	r5, [r4, #24]
 800718c:	2208      	movs	r2, #8
 800718e:	4629      	mov	r1, r5
 8007190:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007194:	f7fe ff38 	bl	8006008 <memset>
 8007198:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800719c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80071a0:	4620      	mov	r0, r4
 80071a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071a4:	3468      	adds	r4, #104	; 0x68
 80071a6:	e7d9      	b.n	800715c <__sfp+0x1c>
 80071a8:	2104      	movs	r1, #4
 80071aa:	4638      	mov	r0, r7
 80071ac:	f7ff ff62 	bl	8007074 <__sfmoreglue>
 80071b0:	4604      	mov	r4, r0
 80071b2:	6030      	str	r0, [r6, #0]
 80071b4:	2800      	cmp	r0, #0
 80071b6:	d1d5      	bne.n	8007164 <__sfp+0x24>
 80071b8:	f7ff ff78 	bl	80070ac <__sfp_lock_release>
 80071bc:	230c      	movs	r3, #12
 80071be:	603b      	str	r3, [r7, #0]
 80071c0:	e7ee      	b.n	80071a0 <__sfp+0x60>
 80071c2:	bf00      	nop
 80071c4:	08007750 	.word	0x08007750
 80071c8:	ffff0001 	.word	0xffff0001

080071cc <_fwalk_reent>:
 80071cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071d0:	4606      	mov	r6, r0
 80071d2:	4688      	mov	r8, r1
 80071d4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80071d8:	2700      	movs	r7, #0
 80071da:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80071de:	f1b9 0901 	subs.w	r9, r9, #1
 80071e2:	d505      	bpl.n	80071f0 <_fwalk_reent+0x24>
 80071e4:	6824      	ldr	r4, [r4, #0]
 80071e6:	2c00      	cmp	r4, #0
 80071e8:	d1f7      	bne.n	80071da <_fwalk_reent+0xe>
 80071ea:	4638      	mov	r0, r7
 80071ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071f0:	89ab      	ldrh	r3, [r5, #12]
 80071f2:	2b01      	cmp	r3, #1
 80071f4:	d907      	bls.n	8007206 <_fwalk_reent+0x3a>
 80071f6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80071fa:	3301      	adds	r3, #1
 80071fc:	d003      	beq.n	8007206 <_fwalk_reent+0x3a>
 80071fe:	4629      	mov	r1, r5
 8007200:	4630      	mov	r0, r6
 8007202:	47c0      	blx	r8
 8007204:	4307      	orrs	r7, r0
 8007206:	3568      	adds	r5, #104	; 0x68
 8007208:	e7e9      	b.n	80071de <_fwalk_reent+0x12>

0800720a <__retarget_lock_init_recursive>:
 800720a:	4770      	bx	lr

0800720c <__retarget_lock_acquire_recursive>:
 800720c:	4770      	bx	lr

0800720e <__retarget_lock_release_recursive>:
 800720e:	4770      	bx	lr

08007210 <__swhatbuf_r>:
 8007210:	b570      	push	{r4, r5, r6, lr}
 8007212:	460e      	mov	r6, r1
 8007214:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007218:	2900      	cmp	r1, #0
 800721a:	b096      	sub	sp, #88	; 0x58
 800721c:	4614      	mov	r4, r2
 800721e:	461d      	mov	r5, r3
 8007220:	da08      	bge.n	8007234 <__swhatbuf_r+0x24>
 8007222:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007226:	2200      	movs	r2, #0
 8007228:	602a      	str	r2, [r5, #0]
 800722a:	061a      	lsls	r2, r3, #24
 800722c:	d410      	bmi.n	8007250 <__swhatbuf_r+0x40>
 800722e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007232:	e00e      	b.n	8007252 <__swhatbuf_r+0x42>
 8007234:	466a      	mov	r2, sp
 8007236:	f000 f95f 	bl	80074f8 <_fstat_r>
 800723a:	2800      	cmp	r0, #0
 800723c:	dbf1      	blt.n	8007222 <__swhatbuf_r+0x12>
 800723e:	9a01      	ldr	r2, [sp, #4]
 8007240:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007244:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007248:	425a      	negs	r2, r3
 800724a:	415a      	adcs	r2, r3
 800724c:	602a      	str	r2, [r5, #0]
 800724e:	e7ee      	b.n	800722e <__swhatbuf_r+0x1e>
 8007250:	2340      	movs	r3, #64	; 0x40
 8007252:	2000      	movs	r0, #0
 8007254:	6023      	str	r3, [r4, #0]
 8007256:	b016      	add	sp, #88	; 0x58
 8007258:	bd70      	pop	{r4, r5, r6, pc}
	...

0800725c <__smakebuf_r>:
 800725c:	898b      	ldrh	r3, [r1, #12]
 800725e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007260:	079d      	lsls	r5, r3, #30
 8007262:	4606      	mov	r6, r0
 8007264:	460c      	mov	r4, r1
 8007266:	d507      	bpl.n	8007278 <__smakebuf_r+0x1c>
 8007268:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800726c:	6023      	str	r3, [r4, #0]
 800726e:	6123      	str	r3, [r4, #16]
 8007270:	2301      	movs	r3, #1
 8007272:	6163      	str	r3, [r4, #20]
 8007274:	b002      	add	sp, #8
 8007276:	bd70      	pop	{r4, r5, r6, pc}
 8007278:	ab01      	add	r3, sp, #4
 800727a:	466a      	mov	r2, sp
 800727c:	f7ff ffc8 	bl	8007210 <__swhatbuf_r>
 8007280:	9900      	ldr	r1, [sp, #0]
 8007282:	4605      	mov	r5, r0
 8007284:	4630      	mov	r0, r6
 8007286:	f7ff f873 	bl	8006370 <_malloc_r>
 800728a:	b948      	cbnz	r0, 80072a0 <__smakebuf_r+0x44>
 800728c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007290:	059a      	lsls	r2, r3, #22
 8007292:	d4ef      	bmi.n	8007274 <__smakebuf_r+0x18>
 8007294:	f023 0303 	bic.w	r3, r3, #3
 8007298:	f043 0302 	orr.w	r3, r3, #2
 800729c:	81a3      	strh	r3, [r4, #12]
 800729e:	e7e3      	b.n	8007268 <__smakebuf_r+0xc>
 80072a0:	4b0d      	ldr	r3, [pc, #52]	; (80072d8 <__smakebuf_r+0x7c>)
 80072a2:	62b3      	str	r3, [r6, #40]	; 0x28
 80072a4:	89a3      	ldrh	r3, [r4, #12]
 80072a6:	6020      	str	r0, [r4, #0]
 80072a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072ac:	81a3      	strh	r3, [r4, #12]
 80072ae:	9b00      	ldr	r3, [sp, #0]
 80072b0:	6163      	str	r3, [r4, #20]
 80072b2:	9b01      	ldr	r3, [sp, #4]
 80072b4:	6120      	str	r0, [r4, #16]
 80072b6:	b15b      	cbz	r3, 80072d0 <__smakebuf_r+0x74>
 80072b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80072bc:	4630      	mov	r0, r6
 80072be:	f000 f92d 	bl	800751c <_isatty_r>
 80072c2:	b128      	cbz	r0, 80072d0 <__smakebuf_r+0x74>
 80072c4:	89a3      	ldrh	r3, [r4, #12]
 80072c6:	f023 0303 	bic.w	r3, r3, #3
 80072ca:	f043 0301 	orr.w	r3, r3, #1
 80072ce:	81a3      	strh	r3, [r4, #12]
 80072d0:	89a0      	ldrh	r0, [r4, #12]
 80072d2:	4305      	orrs	r5, r0
 80072d4:	81a5      	strh	r5, [r4, #12]
 80072d6:	e7cd      	b.n	8007274 <__smakebuf_r+0x18>
 80072d8:	08007069 	.word	0x08007069

080072dc <memcpy>:
 80072dc:	440a      	add	r2, r1
 80072de:	4291      	cmp	r1, r2
 80072e0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80072e4:	d100      	bne.n	80072e8 <memcpy+0xc>
 80072e6:	4770      	bx	lr
 80072e8:	b510      	push	{r4, lr}
 80072ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80072ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80072f2:	4291      	cmp	r1, r2
 80072f4:	d1f9      	bne.n	80072ea <memcpy+0xe>
 80072f6:	bd10      	pop	{r4, pc}

080072f8 <memmove>:
 80072f8:	4288      	cmp	r0, r1
 80072fa:	b510      	push	{r4, lr}
 80072fc:	eb01 0402 	add.w	r4, r1, r2
 8007300:	d902      	bls.n	8007308 <memmove+0x10>
 8007302:	4284      	cmp	r4, r0
 8007304:	4623      	mov	r3, r4
 8007306:	d807      	bhi.n	8007318 <memmove+0x20>
 8007308:	1e43      	subs	r3, r0, #1
 800730a:	42a1      	cmp	r1, r4
 800730c:	d008      	beq.n	8007320 <memmove+0x28>
 800730e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007312:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007316:	e7f8      	b.n	800730a <memmove+0x12>
 8007318:	4402      	add	r2, r0
 800731a:	4601      	mov	r1, r0
 800731c:	428a      	cmp	r2, r1
 800731e:	d100      	bne.n	8007322 <memmove+0x2a>
 8007320:	bd10      	pop	{r4, pc}
 8007322:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007326:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800732a:	e7f7      	b.n	800731c <memmove+0x24>

0800732c <__malloc_lock>:
 800732c:	4801      	ldr	r0, [pc, #4]	; (8007334 <__malloc_lock+0x8>)
 800732e:	f7ff bf6d 	b.w	800720c <__retarget_lock_acquire_recursive>
 8007332:	bf00      	nop
 8007334:	20000258 	.word	0x20000258

08007338 <__malloc_unlock>:
 8007338:	4801      	ldr	r0, [pc, #4]	; (8007340 <__malloc_unlock+0x8>)
 800733a:	f7ff bf68 	b.w	800720e <__retarget_lock_release_recursive>
 800733e:	bf00      	nop
 8007340:	20000258 	.word	0x20000258

08007344 <_realloc_r>:
 8007344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007348:	4680      	mov	r8, r0
 800734a:	4614      	mov	r4, r2
 800734c:	460e      	mov	r6, r1
 800734e:	b921      	cbnz	r1, 800735a <_realloc_r+0x16>
 8007350:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007354:	4611      	mov	r1, r2
 8007356:	f7ff b80b 	b.w	8006370 <_malloc_r>
 800735a:	b92a      	cbnz	r2, 8007368 <_realloc_r+0x24>
 800735c:	f7fe ff9c 	bl	8006298 <_free_r>
 8007360:	4625      	mov	r5, r4
 8007362:	4628      	mov	r0, r5
 8007364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007368:	f000 f8fa 	bl	8007560 <_malloc_usable_size_r>
 800736c:	4284      	cmp	r4, r0
 800736e:	4607      	mov	r7, r0
 8007370:	d802      	bhi.n	8007378 <_realloc_r+0x34>
 8007372:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007376:	d812      	bhi.n	800739e <_realloc_r+0x5a>
 8007378:	4621      	mov	r1, r4
 800737a:	4640      	mov	r0, r8
 800737c:	f7fe fff8 	bl	8006370 <_malloc_r>
 8007380:	4605      	mov	r5, r0
 8007382:	2800      	cmp	r0, #0
 8007384:	d0ed      	beq.n	8007362 <_realloc_r+0x1e>
 8007386:	42bc      	cmp	r4, r7
 8007388:	4622      	mov	r2, r4
 800738a:	4631      	mov	r1, r6
 800738c:	bf28      	it	cs
 800738e:	463a      	movcs	r2, r7
 8007390:	f7ff ffa4 	bl	80072dc <memcpy>
 8007394:	4631      	mov	r1, r6
 8007396:	4640      	mov	r0, r8
 8007398:	f7fe ff7e 	bl	8006298 <_free_r>
 800739c:	e7e1      	b.n	8007362 <_realloc_r+0x1e>
 800739e:	4635      	mov	r5, r6
 80073a0:	e7df      	b.n	8007362 <_realloc_r+0x1e>

080073a2 <_raise_r>:
 80073a2:	291f      	cmp	r1, #31
 80073a4:	b538      	push	{r3, r4, r5, lr}
 80073a6:	4604      	mov	r4, r0
 80073a8:	460d      	mov	r5, r1
 80073aa:	d904      	bls.n	80073b6 <_raise_r+0x14>
 80073ac:	2316      	movs	r3, #22
 80073ae:	6003      	str	r3, [r0, #0]
 80073b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80073b4:	bd38      	pop	{r3, r4, r5, pc}
 80073b6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80073b8:	b112      	cbz	r2, 80073c0 <_raise_r+0x1e>
 80073ba:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80073be:	b94b      	cbnz	r3, 80073d4 <_raise_r+0x32>
 80073c0:	4620      	mov	r0, r4
 80073c2:	f000 f831 	bl	8007428 <_getpid_r>
 80073c6:	462a      	mov	r2, r5
 80073c8:	4601      	mov	r1, r0
 80073ca:	4620      	mov	r0, r4
 80073cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80073d0:	f000 b818 	b.w	8007404 <_kill_r>
 80073d4:	2b01      	cmp	r3, #1
 80073d6:	d00a      	beq.n	80073ee <_raise_r+0x4c>
 80073d8:	1c59      	adds	r1, r3, #1
 80073da:	d103      	bne.n	80073e4 <_raise_r+0x42>
 80073dc:	2316      	movs	r3, #22
 80073de:	6003      	str	r3, [r0, #0]
 80073e0:	2001      	movs	r0, #1
 80073e2:	e7e7      	b.n	80073b4 <_raise_r+0x12>
 80073e4:	2400      	movs	r4, #0
 80073e6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80073ea:	4628      	mov	r0, r5
 80073ec:	4798      	blx	r3
 80073ee:	2000      	movs	r0, #0
 80073f0:	e7e0      	b.n	80073b4 <_raise_r+0x12>
	...

080073f4 <raise>:
 80073f4:	4b02      	ldr	r3, [pc, #8]	; (8007400 <raise+0xc>)
 80073f6:	4601      	mov	r1, r0
 80073f8:	6818      	ldr	r0, [r3, #0]
 80073fa:	f7ff bfd2 	b.w	80073a2 <_raise_r>
 80073fe:	bf00      	nop
 8007400:	200000a4 	.word	0x200000a4

08007404 <_kill_r>:
 8007404:	b538      	push	{r3, r4, r5, lr}
 8007406:	4d07      	ldr	r5, [pc, #28]	; (8007424 <_kill_r+0x20>)
 8007408:	2300      	movs	r3, #0
 800740a:	4604      	mov	r4, r0
 800740c:	4608      	mov	r0, r1
 800740e:	4611      	mov	r1, r2
 8007410:	602b      	str	r3, [r5, #0]
 8007412:	f7f9 fd4d 	bl	8000eb0 <_kill>
 8007416:	1c43      	adds	r3, r0, #1
 8007418:	d102      	bne.n	8007420 <_kill_r+0x1c>
 800741a:	682b      	ldr	r3, [r5, #0]
 800741c:	b103      	cbz	r3, 8007420 <_kill_r+0x1c>
 800741e:	6023      	str	r3, [r4, #0]
 8007420:	bd38      	pop	{r3, r4, r5, pc}
 8007422:	bf00      	nop
 8007424:	2000025c 	.word	0x2000025c

08007428 <_getpid_r>:
 8007428:	f7f9 bd3a 	b.w	8000ea0 <_getpid>

0800742c <__sread>:
 800742c:	b510      	push	{r4, lr}
 800742e:	460c      	mov	r4, r1
 8007430:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007434:	f000 f89c 	bl	8007570 <_read_r>
 8007438:	2800      	cmp	r0, #0
 800743a:	bfab      	itete	ge
 800743c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800743e:	89a3      	ldrhlt	r3, [r4, #12]
 8007440:	181b      	addge	r3, r3, r0
 8007442:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007446:	bfac      	ite	ge
 8007448:	6563      	strge	r3, [r4, #84]	; 0x54
 800744a:	81a3      	strhlt	r3, [r4, #12]
 800744c:	bd10      	pop	{r4, pc}

0800744e <__swrite>:
 800744e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007452:	461f      	mov	r7, r3
 8007454:	898b      	ldrh	r3, [r1, #12]
 8007456:	05db      	lsls	r3, r3, #23
 8007458:	4605      	mov	r5, r0
 800745a:	460c      	mov	r4, r1
 800745c:	4616      	mov	r6, r2
 800745e:	d505      	bpl.n	800746c <__swrite+0x1e>
 8007460:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007464:	2302      	movs	r3, #2
 8007466:	2200      	movs	r2, #0
 8007468:	f000 f868 	bl	800753c <_lseek_r>
 800746c:	89a3      	ldrh	r3, [r4, #12]
 800746e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007472:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007476:	81a3      	strh	r3, [r4, #12]
 8007478:	4632      	mov	r2, r6
 800747a:	463b      	mov	r3, r7
 800747c:	4628      	mov	r0, r5
 800747e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007482:	f000 b817 	b.w	80074b4 <_write_r>

08007486 <__sseek>:
 8007486:	b510      	push	{r4, lr}
 8007488:	460c      	mov	r4, r1
 800748a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800748e:	f000 f855 	bl	800753c <_lseek_r>
 8007492:	1c43      	adds	r3, r0, #1
 8007494:	89a3      	ldrh	r3, [r4, #12]
 8007496:	bf15      	itete	ne
 8007498:	6560      	strne	r0, [r4, #84]	; 0x54
 800749a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800749e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80074a2:	81a3      	strheq	r3, [r4, #12]
 80074a4:	bf18      	it	ne
 80074a6:	81a3      	strhne	r3, [r4, #12]
 80074a8:	bd10      	pop	{r4, pc}

080074aa <__sclose>:
 80074aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074ae:	f000 b813 	b.w	80074d8 <_close_r>
	...

080074b4 <_write_r>:
 80074b4:	b538      	push	{r3, r4, r5, lr}
 80074b6:	4d07      	ldr	r5, [pc, #28]	; (80074d4 <_write_r+0x20>)
 80074b8:	4604      	mov	r4, r0
 80074ba:	4608      	mov	r0, r1
 80074bc:	4611      	mov	r1, r2
 80074be:	2200      	movs	r2, #0
 80074c0:	602a      	str	r2, [r5, #0]
 80074c2:	461a      	mov	r2, r3
 80074c4:	f7f9 fd2b 	bl	8000f1e <_write>
 80074c8:	1c43      	adds	r3, r0, #1
 80074ca:	d102      	bne.n	80074d2 <_write_r+0x1e>
 80074cc:	682b      	ldr	r3, [r5, #0]
 80074ce:	b103      	cbz	r3, 80074d2 <_write_r+0x1e>
 80074d0:	6023      	str	r3, [r4, #0]
 80074d2:	bd38      	pop	{r3, r4, r5, pc}
 80074d4:	2000025c 	.word	0x2000025c

080074d8 <_close_r>:
 80074d8:	b538      	push	{r3, r4, r5, lr}
 80074da:	4d06      	ldr	r5, [pc, #24]	; (80074f4 <_close_r+0x1c>)
 80074dc:	2300      	movs	r3, #0
 80074de:	4604      	mov	r4, r0
 80074e0:	4608      	mov	r0, r1
 80074e2:	602b      	str	r3, [r5, #0]
 80074e4:	f7f9 fd37 	bl	8000f56 <_close>
 80074e8:	1c43      	adds	r3, r0, #1
 80074ea:	d102      	bne.n	80074f2 <_close_r+0x1a>
 80074ec:	682b      	ldr	r3, [r5, #0]
 80074ee:	b103      	cbz	r3, 80074f2 <_close_r+0x1a>
 80074f0:	6023      	str	r3, [r4, #0]
 80074f2:	bd38      	pop	{r3, r4, r5, pc}
 80074f4:	2000025c 	.word	0x2000025c

080074f8 <_fstat_r>:
 80074f8:	b538      	push	{r3, r4, r5, lr}
 80074fa:	4d07      	ldr	r5, [pc, #28]	; (8007518 <_fstat_r+0x20>)
 80074fc:	2300      	movs	r3, #0
 80074fe:	4604      	mov	r4, r0
 8007500:	4608      	mov	r0, r1
 8007502:	4611      	mov	r1, r2
 8007504:	602b      	str	r3, [r5, #0]
 8007506:	f7f9 fd32 	bl	8000f6e <_fstat>
 800750a:	1c43      	adds	r3, r0, #1
 800750c:	d102      	bne.n	8007514 <_fstat_r+0x1c>
 800750e:	682b      	ldr	r3, [r5, #0]
 8007510:	b103      	cbz	r3, 8007514 <_fstat_r+0x1c>
 8007512:	6023      	str	r3, [r4, #0]
 8007514:	bd38      	pop	{r3, r4, r5, pc}
 8007516:	bf00      	nop
 8007518:	2000025c 	.word	0x2000025c

0800751c <_isatty_r>:
 800751c:	b538      	push	{r3, r4, r5, lr}
 800751e:	4d06      	ldr	r5, [pc, #24]	; (8007538 <_isatty_r+0x1c>)
 8007520:	2300      	movs	r3, #0
 8007522:	4604      	mov	r4, r0
 8007524:	4608      	mov	r0, r1
 8007526:	602b      	str	r3, [r5, #0]
 8007528:	f7f9 fd31 	bl	8000f8e <_isatty>
 800752c:	1c43      	adds	r3, r0, #1
 800752e:	d102      	bne.n	8007536 <_isatty_r+0x1a>
 8007530:	682b      	ldr	r3, [r5, #0]
 8007532:	b103      	cbz	r3, 8007536 <_isatty_r+0x1a>
 8007534:	6023      	str	r3, [r4, #0]
 8007536:	bd38      	pop	{r3, r4, r5, pc}
 8007538:	2000025c 	.word	0x2000025c

0800753c <_lseek_r>:
 800753c:	b538      	push	{r3, r4, r5, lr}
 800753e:	4d07      	ldr	r5, [pc, #28]	; (800755c <_lseek_r+0x20>)
 8007540:	4604      	mov	r4, r0
 8007542:	4608      	mov	r0, r1
 8007544:	4611      	mov	r1, r2
 8007546:	2200      	movs	r2, #0
 8007548:	602a      	str	r2, [r5, #0]
 800754a:	461a      	mov	r2, r3
 800754c:	f7f9 fd2a 	bl	8000fa4 <_lseek>
 8007550:	1c43      	adds	r3, r0, #1
 8007552:	d102      	bne.n	800755a <_lseek_r+0x1e>
 8007554:	682b      	ldr	r3, [r5, #0]
 8007556:	b103      	cbz	r3, 800755a <_lseek_r+0x1e>
 8007558:	6023      	str	r3, [r4, #0]
 800755a:	bd38      	pop	{r3, r4, r5, pc}
 800755c:	2000025c 	.word	0x2000025c

08007560 <_malloc_usable_size_r>:
 8007560:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007564:	1f18      	subs	r0, r3, #4
 8007566:	2b00      	cmp	r3, #0
 8007568:	bfbc      	itt	lt
 800756a:	580b      	ldrlt	r3, [r1, r0]
 800756c:	18c0      	addlt	r0, r0, r3
 800756e:	4770      	bx	lr

08007570 <_read_r>:
 8007570:	b538      	push	{r3, r4, r5, lr}
 8007572:	4d07      	ldr	r5, [pc, #28]	; (8007590 <_read_r+0x20>)
 8007574:	4604      	mov	r4, r0
 8007576:	4608      	mov	r0, r1
 8007578:	4611      	mov	r1, r2
 800757a:	2200      	movs	r2, #0
 800757c:	602a      	str	r2, [r5, #0]
 800757e:	461a      	mov	r2, r3
 8007580:	f7f9 fcb0 	bl	8000ee4 <_read>
 8007584:	1c43      	adds	r3, r0, #1
 8007586:	d102      	bne.n	800758e <_read_r+0x1e>
 8007588:	682b      	ldr	r3, [r5, #0]
 800758a:	b103      	cbz	r3, 800758e <_read_r+0x1e>
 800758c:	6023      	str	r3, [r4, #0]
 800758e:	bd38      	pop	{r3, r4, r5, pc}
 8007590:	2000025c 	.word	0x2000025c

08007594 <_init>:
 8007594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007596:	bf00      	nop
 8007598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800759a:	bc08      	pop	{r3}
 800759c:	469e      	mov	lr, r3
 800759e:	4770      	bx	lr

080075a0 <_fini>:
 80075a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075a2:	bf00      	nop
 80075a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075a6:	bc08      	pop	{r3}
 80075a8:	469e      	mov	lr, r3
 80075aa:	4770      	bx	lr
